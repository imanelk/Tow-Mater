
F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007480  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007638  08007638  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08007640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000048  08007684  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007684  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b50  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381e  00000000  00000000  00030bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5fe  00000000  00000000  000362d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018917  00000000  00000000  000508d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b19f  00000000  00000000  000691ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e438c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  000e43dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000048 	.word	0x20000048
 800014c:	00000000 	.word	0x00000000
 8000150:	08007598 	.word	0x08007598

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000004c 	.word	0x2000004c
 800016c:	08007598 	.word	0x08007598

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_frsub>:
 800095c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000960:	e002      	b.n	8000968 <__addsf3>
 8000962:	bf00      	nop

08000964 <__aeabi_fsub>:
 8000964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000968 <__addsf3>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	bf1f      	itttt	ne
 800096c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000970:	ea92 0f03 	teqne	r2, r3
 8000974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097c:	d06a      	beq.n	8000a54 <__addsf3+0xec>
 800097e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000986:	bfc1      	itttt	gt
 8000988:	18d2      	addgt	r2, r2, r3
 800098a:	4041      	eorgt	r1, r0
 800098c:	4048      	eorgt	r0, r1
 800098e:	4041      	eorgt	r1, r0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	2b19      	cmp	r3, #25
 8000996:	bf88      	it	hi
 8000998:	4770      	bxhi	lr
 800099a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4249      	negne	r1, r1
 80009ba:	ea92 0f03 	teq	r2, r3
 80009be:	d03f      	beq.n	8000a40 <__addsf3+0xd8>
 80009c0:	f1a2 0201 	sub.w	r2, r2, #1
 80009c4:	fa41 fc03 	asr.w	ip, r1, r3
 80009c8:	eb10 000c 	adds.w	r0, r0, ip
 80009cc:	f1c3 0320 	rsb	r3, r3, #32
 80009d0:	fa01 f103 	lsl.w	r1, r1, r3
 80009d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__addsf3+0x78>
 80009da:	4249      	negs	r1, r1
 80009dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e4:	d313      	bcc.n	8000a0e <__addsf3+0xa6>
 80009e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ea:	d306      	bcc.n	80009fa <__addsf3+0x92>
 80009ec:	0840      	lsrs	r0, r0, #1
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	f102 0201 	add.w	r2, r2, #1
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	d251      	bcs.n	8000a9e <__addsf3+0x136>
 80009fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a02:	bf08      	it	eq
 8000a04:	f020 0001 	biceq.w	r0, r0, #1
 8000a08:	ea40 0003 	orr.w	r0, r0, r3
 8000a0c:	4770      	bx	lr
 8000a0e:	0049      	lsls	r1, r1, #1
 8000a10:	eb40 0000 	adc.w	r0, r0, r0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	bf28      	it	cs
 8000a18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a1c:	d2ed      	bcs.n	80009fa <__addsf3+0x92>
 8000a1e:	fab0 fc80 	clz	ip, r0
 8000a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a26:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2e:	bfaa      	itet	ge
 8000a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a34:	4252      	neglt	r2, r2
 8000a36:	4318      	orrge	r0, r3
 8000a38:	bfbc      	itt	lt
 8000a3a:	40d0      	lsrlt	r0, r2
 8000a3c:	4318      	orrlt	r0, r3
 8000a3e:	4770      	bx	lr
 8000a40:	f092 0f00 	teq	r2, #0
 8000a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a48:	bf06      	itte	eq
 8000a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4e:	3201      	addeq	r2, #1
 8000a50:	3b01      	subne	r3, #1
 8000a52:	e7b5      	b.n	80009c0 <__addsf3+0x58>
 8000a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a62:	d021      	beq.n	8000aa8 <__addsf3+0x140>
 8000a64:	ea92 0f03 	teq	r2, r3
 8000a68:	d004      	beq.n	8000a74 <__addsf3+0x10c>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	bf08      	it	eq
 8000a70:	4608      	moveq	r0, r1
 8000a72:	4770      	bx	lr
 8000a74:	ea90 0f01 	teq	r0, r1
 8000a78:	bf1c      	itt	ne
 8000a7a:	2000      	movne	r0, #0
 8000a7c:	4770      	bxne	lr
 8000a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a82:	d104      	bne.n	8000a8e <__addsf3+0x126>
 8000a84:	0040      	lsls	r0, r0, #1
 8000a86:	bf28      	it	cs
 8000a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a92:	bf3c      	itt	cc
 8000a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bxcc	lr
 8000a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	4770      	bx	lr
 8000aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aac:	bf16      	itet	ne
 8000aae:	4608      	movne	r0, r1
 8000ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab4:	4601      	movne	r1, r0
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	bf06      	itte	eq
 8000aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000abe:	ea90 0f01 	teqeq	r0, r1
 8000ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_ui2f>:
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e004      	b.n	8000ad8 <__aeabi_i2f+0x8>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2f>:
 8000ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad4:	bf48      	it	mi
 8000ad6:	4240      	negmi	r0, r0
 8000ad8:	ea5f 0c00 	movs.w	ip, r0
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	e01c      	b.n	8000b26 <__aeabi_l2f+0x2a>

08000aec <__aeabi_ul2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e00a      	b.n	8000b10 <__aeabi_l2f+0x14>
 8000afa:	bf00      	nop

08000afc <__aeabi_l2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_l2f+0x14>
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b10:	ea5f 0c01 	movs.w	ip, r1
 8000b14:	bf02      	ittt	eq
 8000b16:	4684      	moveq	ip, r0
 8000b18:	4601      	moveq	r1, r0
 8000b1a:	2000      	moveq	r0, #0
 8000b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b20:	bf08      	it	eq
 8000b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2a:	fabc f28c 	clz	r2, ip
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b34:	db10      	blt.n	8000b58 <__aeabi_l2f+0x5c>
 8000b36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b48:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f102 0220 	add.w	r2, r2, #32
 8000b5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b68:	fa21 f202 	lsr.w	r2, r1, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_fmul>:
 8000b78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b80:	bf1e      	ittt	ne
 8000b82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b86:	ea92 0f0c 	teqne	r2, ip
 8000b8a:	ea93 0f0c 	teqne	r3, ip
 8000b8e:	d06f      	beq.n	8000c70 <__aeabi_fmul+0xf8>
 8000b90:	441a      	add	r2, r3
 8000b92:	ea80 0c01 	eor.w	ip, r0, r1
 8000b96:	0240      	lsls	r0, r0, #9
 8000b98:	bf18      	it	ne
 8000b9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b9e:	d01e      	beq.n	8000bde <__aeabi_fmul+0x66>
 8000ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ba4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ba8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bac:	fba0 3101 	umull	r3, r1, r0, r1
 8000bb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bb8:	bf3e      	ittt	cc
 8000bba:	0049      	lslcc	r1, r1, #1
 8000bbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bc0:	005b      	lslcc	r3, r3, #1
 8000bc2:	ea40 0001 	orr.w	r0, r0, r1
 8000bc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bca:	2afd      	cmp	r2, #253	; 0xfd
 8000bcc:	d81d      	bhi.n	8000c0a <__aeabi_fmul+0x92>
 8000bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	4770      	bx	lr
 8000bde:	f090 0f00 	teq	r0, #0
 8000be2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000be6:	bf08      	it	eq
 8000be8:	0249      	lsleq	r1, r1, #9
 8000bea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bf2:	3a7f      	subs	r2, #127	; 0x7f
 8000bf4:	bfc2      	ittt	gt
 8000bf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bfe:	4770      	bxgt	lr
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	dc5d      	bgt.n	8000cc8 <__aeabi_fmul+0x150>
 8000c0c:	f112 0f19 	cmn.w	r2, #25
 8000c10:	bfdc      	itt	le
 8000c12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c16:	4770      	bxle	lr
 8000c18:	f1c2 0200 	rsb	r2, r2, #0
 8000c1c:	0041      	lsls	r1, r0, #1
 8000c1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c22:	f1c2 0220 	rsb	r2, r2, #32
 8000c26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c2e:	f140 0000 	adc.w	r0, r0, #0
 8000c32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c36:	bf08      	it	eq
 8000c38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c3c:	4770      	bx	lr
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0040      	lsleq	r0, r0, #1
 8000c4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4e:	3a01      	subeq	r2, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xce>
 8000c52:	ea40 000c 	orr.w	r0, r0, ip
 8000c56:	f093 0f00 	teq	r3, #0
 8000c5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5e:	bf02      	ittt	eq
 8000c60:	0049      	lsleq	r1, r1, #1
 8000c62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c66:	3b01      	subeq	r3, #1
 8000c68:	d0f9      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c6a:	ea41 010c 	orr.w	r1, r1, ip
 8000c6e:	e78f      	b.n	8000b90 <__aeabi_fmul+0x18>
 8000c70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c74:	ea92 0f0c 	teq	r2, ip
 8000c78:	bf18      	it	ne
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d00a      	beq.n	8000c96 <__aeabi_fmul+0x11e>
 8000c80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c84:	bf18      	it	ne
 8000c86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	d1d8      	bne.n	8000c3e <__aeabi_fmul+0xc6>
 8000c8c:	ea80 0001 	eor.w	r0, r0, r1
 8000c90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f090 0f00 	teq	r0, #0
 8000c9a:	bf17      	itett	ne
 8000c9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ca0:	4608      	moveq	r0, r1
 8000ca2:	f091 0f00 	teqne	r1, #0
 8000ca6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000caa:	d014      	beq.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cac:	ea92 0f0c 	teq	r2, ip
 8000cb0:	d101      	bne.n	8000cb6 <__aeabi_fmul+0x13e>
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	d10f      	bne.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cb6:	ea93 0f0c 	teq	r3, ip
 8000cba:	d103      	bne.n	8000cc4 <__aeabi_fmul+0x14c>
 8000cbc:	024b      	lsls	r3, r1, #9
 8000cbe:	bf18      	it	ne
 8000cc0:	4608      	movne	r0, r1
 8000cc2:	d108      	bne.n	8000cd6 <__aeabi_fmul+0x15e>
 8000cc4:	ea80 0001 	eor.w	r0, r0, r1
 8000cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fdiv>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d069      	beq.n	8000dcc <__aeabi_fdiv+0xec>
 8000cf8:	eba2 0203 	sub.w	r2, r2, r3
 8000cfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000d00:	0249      	lsls	r1, r1, #9
 8000d02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d06:	d037      	beq.n	8000d78 <__aeabi_fdiv+0x98>
 8000d08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	bf38      	it	cc
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d26:	428b      	cmp	r3, r1
 8000d28:	bf24      	itt	cs
 8000d2a:	1a5b      	subcs	r3, r3, r1
 8000d2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d34:	bf24      	itt	cs
 8000d36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d42:	bf24      	itt	cs
 8000d44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d50:	bf24      	itt	cs
 8000d52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d62:	d1e0      	bne.n	8000d26 <__aeabi_fdiv+0x46>
 8000d64:	2afd      	cmp	r2, #253	; 0xfd
 8000d66:	f63f af50 	bhi.w	8000c0a <__aeabi_fmul+0x92>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d80:	327f      	adds	r2, #127	; 0x7f
 8000d82:	bfc2      	ittt	gt
 8000d84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8c:	4770      	bxgt	lr
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	3a01      	subs	r2, #1
 8000d98:	e737      	b.n	8000c0a <__aeabi_fmul+0x92>
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xc2>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fdiv+0xda>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e795      	b.n	8000cf8 <__aeabi_fdiv+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	d108      	bne.n	8000de8 <__aeabi_fdiv+0x108>
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	f47f af7d 	bne.w	8000cd6 <__aeabi_fmul+0x15e>
 8000ddc:	ea93 0f0c 	teq	r3, ip
 8000de0:	f47f af70 	bne.w	8000cc4 <__aeabi_fmul+0x14c>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e776      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000de8:	ea93 0f0c 	teq	r3, ip
 8000dec:	d104      	bne.n	8000df8 <__aeabi_fdiv+0x118>
 8000dee:	024b      	lsls	r3, r1, #9
 8000df0:	f43f af4c 	beq.w	8000c8c <__aeabi_fmul+0x114>
 8000df4:	4608      	mov	r0, r1
 8000df6:	e76e      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000df8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dfc:	bf18      	it	ne
 8000dfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	d1ca      	bne.n	8000d9a <__aeabi_fdiv+0xba>
 8000e04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e08:	f47f af5c 	bne.w	8000cc4 <__aeabi_fmul+0x14c>
 8000e0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e10:	f47f af3c 	bne.w	8000c8c <__aeabi_fmul+0x114>
 8000e14:	e75f      	b.n	8000cd6 <__aeabi_fmul+0x15e>
 8000e16:	bf00      	nop

08000e18 <__gesf2>:
 8000e18:	f04f 3cff 	mov.w	ip, #4294967295
 8000e1c:	e006      	b.n	8000e2c <__cmpsf2+0x4>
 8000e1e:	bf00      	nop

08000e20 <__lesf2>:
 8000e20:	f04f 0c01 	mov.w	ip, #1
 8000e24:	e002      	b.n	8000e2c <__cmpsf2+0x4>
 8000e26:	bf00      	nop

08000e28 <__cmpsf2>:
 8000e28:	f04f 0c01 	mov.w	ip, #1
 8000e2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	bf18      	it	ne
 8000e3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e42:	d011      	beq.n	8000e68 <__cmpsf2+0x40>
 8000e44:	b001      	add	sp, #4
 8000e46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e4a:	bf18      	it	ne
 8000e4c:	ea90 0f01 	teqne	r0, r1
 8000e50:	bf58      	it	pl
 8000e52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e56:	bf88      	it	hi
 8000e58:	17c8      	asrhi	r0, r1, #31
 8000e5a:	bf38      	it	cc
 8000e5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e60:	bf18      	it	ne
 8000e62:	f040 0001 	orrne.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	d102      	bne.n	8000e74 <__cmpsf2+0x4c>
 8000e6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e72:	d105      	bne.n	8000e80 <__cmpsf2+0x58>
 8000e74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e78:	d1e4      	bne.n	8000e44 <__cmpsf2+0x1c>
 8000e7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e7e:	d0e1      	beq.n	8000e44 <__cmpsf2+0x1c>
 8000e80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <__aeabi_cfrcmple>:
 8000e88:	4684      	mov	ip, r0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	4661      	mov	r1, ip
 8000e8e:	e7ff      	b.n	8000e90 <__aeabi_cfcmpeq>

08000e90 <__aeabi_cfcmpeq>:
 8000e90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e92:	f7ff ffc9 	bl	8000e28 <__cmpsf2>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	bf48      	it	mi
 8000e9a:	f110 0f00 	cmnmi.w	r0, #0
 8000e9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ea0 <__aeabi_fcmpeq>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff fff4 	bl	8000e90 <__aeabi_cfcmpeq>
 8000ea8:	bf0c      	ite	eq
 8000eaa:	2001      	moveq	r0, #1
 8000eac:	2000      	movne	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_fcmplt>:
 8000eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb8:	f7ff ffea 	bl	8000e90 <__aeabi_cfcmpeq>
 8000ebc:	bf34      	ite	cc
 8000ebe:	2001      	movcc	r0, #1
 8000ec0:	2000      	movcs	r0, #0
 8000ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_fcmple>:
 8000ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ecc:	f7ff ffe0 	bl	8000e90 <__aeabi_cfcmpeq>
 8000ed0:	bf94      	ite	ls
 8000ed2:	2001      	movls	r0, #1
 8000ed4:	2000      	movhi	r0, #0
 8000ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eda:	bf00      	nop

08000edc <__aeabi_fcmpge>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff ffd2 	bl	8000e88 <__aeabi_cfrcmple>
 8000ee4:	bf94      	ite	ls
 8000ee6:	2001      	movls	r0, #1
 8000ee8:	2000      	movhi	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_fcmpgt>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff ffc8 	bl	8000e88 <__aeabi_cfrcmple>
 8000ef8:	bf34      	ite	cc
 8000efa:	2001      	movcc	r0, #1
 8000efc:	2000      	movcs	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_f2iz>:
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f0c:	d30f      	bcc.n	8000f2e <__aeabi_f2iz+0x2a>
 8000f0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f16:	d90d      	bls.n	8000f34 <__aeabi_f2iz+0x30>
 8000f18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f24:	fa23 f002 	lsr.w	r0, r3, r2
 8000f28:	bf18      	it	ne
 8000f2a:	4240      	negne	r0, r0
 8000f2c:	4770      	bx	lr
 8000f2e:	f04f 0000 	mov.w	r0, #0
 8000f32:	4770      	bx	lr
 8000f34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f38:	d101      	bne.n	8000f3e <__aeabi_f2iz+0x3a>
 8000f3a:	0242      	lsls	r2, r0, #9
 8000f3c:	d105      	bne.n	8000f4a <__aeabi_f2iz+0x46>
 8000f3e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f42:	bf08      	it	eq
 8000f44:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f48:	4770      	bx	lr
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_uldivmod>:
 8000f50:	b953      	cbnz	r3, 8000f68 <__aeabi_uldivmod+0x18>
 8000f52:	b94a      	cbnz	r2, 8000f68 <__aeabi_uldivmod+0x18>
 8000f54:	2900      	cmp	r1, #0
 8000f56:	bf08      	it	eq
 8000f58:	2800      	cmpeq	r0, #0
 8000f5a:	bf1c      	itt	ne
 8000f5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f60:	f04f 30ff 	movne.w	r0, #4294967295
 8000f64:	f000 b976 	b.w	8001254 <__aeabi_idiv0>
 8000f68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f70:	f000 f806 	bl	8000f80 <__udivmoddi4>
 8000f74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4770      	bx	lr

08000f80 <__udivmoddi4>:
 8000f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f84:	9e08      	ldr	r6, [sp, #32]
 8000f86:	460d      	mov	r5, r1
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4688      	mov	r8, r1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d14d      	bne.n	800102c <__udivmoddi4+0xac>
 8000f90:	428a      	cmp	r2, r1
 8000f92:	4694      	mov	ip, r2
 8000f94:	d968      	bls.n	8001068 <__udivmoddi4+0xe8>
 8000f96:	fab2 f282 	clz	r2, r2
 8000f9a:	b152      	cbz	r2, 8000fb2 <__udivmoddi4+0x32>
 8000f9c:	fa01 f302 	lsl.w	r3, r1, r2
 8000fa0:	f1c2 0120 	rsb	r1, r2, #32
 8000fa4:	fa20 f101 	lsr.w	r1, r0, r1
 8000fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fac:	ea41 0803 	orr.w	r8, r1, r3
 8000fb0:	4094      	lsls	r4, r2
 8000fb2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000fb6:	fbb8 f7f1 	udiv	r7, r8, r1
 8000fba:	fa1f fe8c 	uxth.w	lr, ip
 8000fbe:	fb01 8817 	mls	r8, r1, r7, r8
 8000fc2:	fb07 f00e 	mul.w	r0, r7, lr
 8000fc6:	0c23      	lsrs	r3, r4, #16
 8000fc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	d90a      	bls.n	8000fe6 <__udivmoddi4+0x66>
 8000fd0:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd4:	f107 35ff 	add.w	r5, r7, #4294967295
 8000fd8:	f080 811e 	bcs.w	8001218 <__udivmoddi4+0x298>
 8000fdc:	4298      	cmp	r0, r3
 8000fde:	f240 811b 	bls.w	8001218 <__udivmoddi4+0x298>
 8000fe2:	3f02      	subs	r7, #2
 8000fe4:	4463      	add	r3, ip
 8000fe6:	1a1b      	subs	r3, r3, r0
 8000fe8:	fbb3 f0f1 	udiv	r0, r3, r1
 8000fec:	fb01 3310 	mls	r3, r1, r0, r3
 8000ff0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ff4:	b2a4      	uxth	r4, r4
 8000ff6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ffa:	45a6      	cmp	lr, r4
 8000ffc:	d90a      	bls.n	8001014 <__udivmoddi4+0x94>
 8000ffe:	eb1c 0404 	adds.w	r4, ip, r4
 8001002:	f100 33ff 	add.w	r3, r0, #4294967295
 8001006:	f080 8109 	bcs.w	800121c <__udivmoddi4+0x29c>
 800100a:	45a6      	cmp	lr, r4
 800100c:	f240 8106 	bls.w	800121c <__udivmoddi4+0x29c>
 8001010:	4464      	add	r4, ip
 8001012:	3802      	subs	r0, #2
 8001014:	2100      	movs	r1, #0
 8001016:	eba4 040e 	sub.w	r4, r4, lr
 800101a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800101e:	b11e      	cbz	r6, 8001028 <__udivmoddi4+0xa8>
 8001020:	2300      	movs	r3, #0
 8001022:	40d4      	lsrs	r4, r2
 8001024:	e9c6 4300 	strd	r4, r3, [r6]
 8001028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102c:	428b      	cmp	r3, r1
 800102e:	d908      	bls.n	8001042 <__udivmoddi4+0xc2>
 8001030:	2e00      	cmp	r6, #0
 8001032:	f000 80ee 	beq.w	8001212 <__udivmoddi4+0x292>
 8001036:	2100      	movs	r1, #0
 8001038:	e9c6 0500 	strd	r0, r5, [r6]
 800103c:	4608      	mov	r0, r1
 800103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001042:	fab3 f183 	clz	r1, r3
 8001046:	2900      	cmp	r1, #0
 8001048:	d14a      	bne.n	80010e0 <__udivmoddi4+0x160>
 800104a:	42ab      	cmp	r3, r5
 800104c:	d302      	bcc.n	8001054 <__udivmoddi4+0xd4>
 800104e:	4282      	cmp	r2, r0
 8001050:	f200 80fc 	bhi.w	800124c <__udivmoddi4+0x2cc>
 8001054:	1a84      	subs	r4, r0, r2
 8001056:	eb65 0303 	sbc.w	r3, r5, r3
 800105a:	2001      	movs	r0, #1
 800105c:	4698      	mov	r8, r3
 800105e:	2e00      	cmp	r6, #0
 8001060:	d0e2      	beq.n	8001028 <__udivmoddi4+0xa8>
 8001062:	e9c6 4800 	strd	r4, r8, [r6]
 8001066:	e7df      	b.n	8001028 <__udivmoddi4+0xa8>
 8001068:	b902      	cbnz	r2, 800106c <__udivmoddi4+0xec>
 800106a:	deff      	udf	#255	; 0xff
 800106c:	fab2 f282 	clz	r2, r2
 8001070:	2a00      	cmp	r2, #0
 8001072:	f040 8091 	bne.w	8001198 <__udivmoddi4+0x218>
 8001076:	eba1 000c 	sub.w	r0, r1, ip
 800107a:	2101      	movs	r1, #1
 800107c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001080:	fa1f fe8c 	uxth.w	lr, ip
 8001084:	fbb0 f3f7 	udiv	r3, r0, r7
 8001088:	fb07 0013 	mls	r0, r7, r3, r0
 800108c:	0c25      	lsrs	r5, r4, #16
 800108e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001092:	fb0e f003 	mul.w	r0, lr, r3
 8001096:	42a8      	cmp	r0, r5
 8001098:	d908      	bls.n	80010ac <__udivmoddi4+0x12c>
 800109a:	eb1c 0505 	adds.w	r5, ip, r5
 800109e:	f103 38ff 	add.w	r8, r3, #4294967295
 80010a2:	d202      	bcs.n	80010aa <__udivmoddi4+0x12a>
 80010a4:	42a8      	cmp	r0, r5
 80010a6:	f200 80ce 	bhi.w	8001246 <__udivmoddi4+0x2c6>
 80010aa:	4643      	mov	r3, r8
 80010ac:	1a2d      	subs	r5, r5, r0
 80010ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80010b2:	fb07 5510 	mls	r5, r7, r0, r5
 80010b6:	fb0e fe00 	mul.w	lr, lr, r0
 80010ba:	b2a4      	uxth	r4, r4
 80010bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010c0:	45a6      	cmp	lr, r4
 80010c2:	d908      	bls.n	80010d6 <__udivmoddi4+0x156>
 80010c4:	eb1c 0404 	adds.w	r4, ip, r4
 80010c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80010cc:	d202      	bcs.n	80010d4 <__udivmoddi4+0x154>
 80010ce:	45a6      	cmp	lr, r4
 80010d0:	f200 80b6 	bhi.w	8001240 <__udivmoddi4+0x2c0>
 80010d4:	4628      	mov	r0, r5
 80010d6:	eba4 040e 	sub.w	r4, r4, lr
 80010da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010de:	e79e      	b.n	800101e <__udivmoddi4+0x9e>
 80010e0:	f1c1 0720 	rsb	r7, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80010f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010f6:	fbba f8f9 	udiv	r8, sl, r9
 80010fa:	fa20 f307 	lsr.w	r3, r0, r7
 80010fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8001102:	408d      	lsls	r5, r1
 8001104:	fa1f fe8c 	uxth.w	lr, ip
 8001108:	431d      	orrs	r5, r3
 800110a:	fa00 f301 	lsl.w	r3, r0, r1
 800110e:	fb08 f00e 	mul.w	r0, r8, lr
 8001112:	0c2c      	lsrs	r4, r5, #16
 8001114:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001118:	42a0      	cmp	r0, r4
 800111a:	fa02 f201 	lsl.w	r2, r2, r1
 800111e:	d90b      	bls.n	8001138 <__udivmoddi4+0x1b8>
 8001120:	eb1c 0404 	adds.w	r4, ip, r4
 8001124:	f108 3aff 	add.w	sl, r8, #4294967295
 8001128:	f080 8088 	bcs.w	800123c <__udivmoddi4+0x2bc>
 800112c:	42a0      	cmp	r0, r4
 800112e:	f240 8085 	bls.w	800123c <__udivmoddi4+0x2bc>
 8001132:	f1a8 0802 	sub.w	r8, r8, #2
 8001136:	4464      	add	r4, ip
 8001138:	1a24      	subs	r4, r4, r0
 800113a:	fbb4 f0f9 	udiv	r0, r4, r9
 800113e:	fb09 4410 	mls	r4, r9, r0, r4
 8001142:	fb00 fe0e 	mul.w	lr, r0, lr
 8001146:	b2ad      	uxth	r5, r5
 8001148:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800114c:	45a6      	cmp	lr, r4
 800114e:	d908      	bls.n	8001162 <__udivmoddi4+0x1e2>
 8001150:	eb1c 0404 	adds.w	r4, ip, r4
 8001154:	f100 35ff 	add.w	r5, r0, #4294967295
 8001158:	d26c      	bcs.n	8001234 <__udivmoddi4+0x2b4>
 800115a:	45a6      	cmp	lr, r4
 800115c:	d96a      	bls.n	8001234 <__udivmoddi4+0x2b4>
 800115e:	3802      	subs	r0, #2
 8001160:	4464      	add	r4, ip
 8001162:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001166:	fba0 9502 	umull	r9, r5, r0, r2
 800116a:	eba4 040e 	sub.w	r4, r4, lr
 800116e:	42ac      	cmp	r4, r5
 8001170:	46c8      	mov	r8, r9
 8001172:	46ae      	mov	lr, r5
 8001174:	d356      	bcc.n	8001224 <__udivmoddi4+0x2a4>
 8001176:	d053      	beq.n	8001220 <__udivmoddi4+0x2a0>
 8001178:	2e00      	cmp	r6, #0
 800117a:	d069      	beq.n	8001250 <__udivmoddi4+0x2d0>
 800117c:	ebb3 0208 	subs.w	r2, r3, r8
 8001180:	eb64 040e 	sbc.w	r4, r4, lr
 8001184:	fa22 f301 	lsr.w	r3, r2, r1
 8001188:	fa04 f707 	lsl.w	r7, r4, r7
 800118c:	431f      	orrs	r7, r3
 800118e:	40cc      	lsrs	r4, r1
 8001190:	e9c6 7400 	strd	r7, r4, [r6]
 8001194:	2100      	movs	r1, #0
 8001196:	e747      	b.n	8001028 <__udivmoddi4+0xa8>
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	f1c2 0120 	rsb	r1, r2, #32
 80011a0:	fa25 f301 	lsr.w	r3, r5, r1
 80011a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011a8:	fa20 f101 	lsr.w	r1, r0, r1
 80011ac:	4095      	lsls	r5, r2
 80011ae:	430d      	orrs	r5, r1
 80011b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80011b4:	fb07 3311 	mls	r3, r7, r1, r3
 80011b8:	fa1f fe8c 	uxth.w	lr, ip
 80011bc:	0c28      	lsrs	r0, r5, #16
 80011be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011c2:	fb01 f30e 	mul.w	r3, r1, lr
 80011c6:	4283      	cmp	r3, r0
 80011c8:	fa04 f402 	lsl.w	r4, r4, r2
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x260>
 80011ce:	eb1c 0000 	adds.w	r0, ip, r0
 80011d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80011d6:	d22f      	bcs.n	8001238 <__udivmoddi4+0x2b8>
 80011d8:	4283      	cmp	r3, r0
 80011da:	d92d      	bls.n	8001238 <__udivmoddi4+0x2b8>
 80011dc:	3902      	subs	r1, #2
 80011de:	4460      	add	r0, ip
 80011e0:	1ac0      	subs	r0, r0, r3
 80011e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80011e6:	fb07 0013 	mls	r0, r7, r3, r0
 80011ea:	b2ad      	uxth	r5, r5
 80011ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011f0:	fb03 f00e 	mul.w	r0, r3, lr
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	d908      	bls.n	800120a <__udivmoddi4+0x28a>
 80011f8:	eb1c 0505 	adds.w	r5, ip, r5
 80011fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8001200:	d216      	bcs.n	8001230 <__udivmoddi4+0x2b0>
 8001202:	42a8      	cmp	r0, r5
 8001204:	d914      	bls.n	8001230 <__udivmoddi4+0x2b0>
 8001206:	3b02      	subs	r3, #2
 8001208:	4465      	add	r5, ip
 800120a:	1a28      	subs	r0, r5, r0
 800120c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001210:	e738      	b.n	8001084 <__udivmoddi4+0x104>
 8001212:	4631      	mov	r1, r6
 8001214:	4630      	mov	r0, r6
 8001216:	e707      	b.n	8001028 <__udivmoddi4+0xa8>
 8001218:	462f      	mov	r7, r5
 800121a:	e6e4      	b.n	8000fe6 <__udivmoddi4+0x66>
 800121c:	4618      	mov	r0, r3
 800121e:	e6f9      	b.n	8001014 <__udivmoddi4+0x94>
 8001220:	454b      	cmp	r3, r9
 8001222:	d2a9      	bcs.n	8001178 <__udivmoddi4+0x1f8>
 8001224:	ebb9 0802 	subs.w	r8, r9, r2
 8001228:	eb65 0e0c 	sbc.w	lr, r5, ip
 800122c:	3801      	subs	r0, #1
 800122e:	e7a3      	b.n	8001178 <__udivmoddi4+0x1f8>
 8001230:	4643      	mov	r3, r8
 8001232:	e7ea      	b.n	800120a <__udivmoddi4+0x28a>
 8001234:	4628      	mov	r0, r5
 8001236:	e794      	b.n	8001162 <__udivmoddi4+0x1e2>
 8001238:	4641      	mov	r1, r8
 800123a:	e7d1      	b.n	80011e0 <__udivmoddi4+0x260>
 800123c:	46d0      	mov	r8, sl
 800123e:	e77b      	b.n	8001138 <__udivmoddi4+0x1b8>
 8001240:	4464      	add	r4, ip
 8001242:	3802      	subs	r0, #2
 8001244:	e747      	b.n	80010d6 <__udivmoddi4+0x156>
 8001246:	3b02      	subs	r3, #2
 8001248:	4465      	add	r5, ip
 800124a:	e72f      	b.n	80010ac <__udivmoddi4+0x12c>
 800124c:	4608      	mov	r0, r1
 800124e:	e706      	b.n	800105e <__udivmoddi4+0xde>
 8001250:	4631      	mov	r1, r6
 8001252:	e6e9      	b.n	8001028 <__udivmoddi4+0xa8>

08001254 <__aeabi_idiv0>:
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x28>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x28>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f001 fc3f 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f005 fc68 	bl	8006b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_InitTick+0x30>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_InitTick+0x34>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	099b      	lsrs	r3, r3, #6
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fc5c 	bl	8002b56 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800129e:	2200      	movs	r2, #0
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	f04f 30ff 	mov.w	r0, #4294967295
 80012a6:	f001 fc2c 	bl	8002b02 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000040 	.word	0x20000040
 80012b8:	10624dd3 	.word	0x10624dd3

080012bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick++;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_IncTick+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <HAL_IncTick+0x18>)
 80012c8:	6013      	str	r3, [r2, #0]
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000064 	.word	0x20000064

080012d8 <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <HAL_GetTick+0x10>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000064 	.word	0x20000064

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff fff0 	bl	80012d8 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d002      	beq.n	800130c <HAL_Delay+0x20>
  {
     wait++;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800130c:	bf00      	nop
 800130e:	f7ff ffe3 	bl	80012d8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	429a      	cmp	r2, r3
 800131c:	d8f7      	bhi.n	800130e <HAL_Delay+0x22>
  {
  }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0be      	b.n	80014c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	d109      	bne.n	800136c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f004 fb50 	bl	8005a0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 faf7 	bl	8001960 <ADC_ConversionStop_Disable>
 8001372:	4603      	mov	r3, r0
 8001374:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 8099 	bne.w	80014b6 <HAL_ADC_Init+0x18e>
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8095 	bne.w	80014b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001394:	f023 0302 	bic.w	r3, r3, #2
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80013a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80013b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013c0:	d003      	beq.n	80013ca <HAL_ADC_Init+0xa2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <HAL_ADC_Init+0xa8>
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	e000      	b.n	80013d2 <HAL_ADC_Init+0xaa>
 80013d0:	2300      	movs	r3, #0
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d119      	bne.n	8001414 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	035a      	lsls	r2, r3, #13
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	e00b      	b.n	8001414 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f043 0220 	orr.w	r2, r3, #32
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_ADC_Init+0x1a8>)
 8001430:	4013      	ands	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	430b      	orrs	r3, r1
 800143a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001444:	d003      	beq.n	800144e <HAL_ADC_Init+0x126>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d104      	bne.n	8001458 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	3b01      	subs	r3, #1
 8001454:	051b      	lsls	r3, r3, #20
 8001456:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	430a      	orrs	r2, r1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_ADC_Init+0x1ac>)
 8001474:	4013      	ands	r3, r2
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	429a      	cmp	r2, r3
 800147a:	d10b      	bne.n	8001494 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001492:	e018      	b.n	80014c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f023 0312 	bic.w	r3, r3, #18
 800149c:	f043 0210 	orr.w	r2, r3, #16
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b4:	e007      	b.n	80014c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	ffe1f7fd 	.word	0xffe1f7fd
 80014d4:	ff1f0efe 	.word	0xff1f0efe

080014d8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a64      	ldr	r2, [pc, #400]	; (8001680 <HAL_ADC_Start_DMA+0x1a8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d004      	beq.n	80014fc <HAL_ADC_Start_DMA+0x24>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a63      	ldr	r2, [pc, #396]	; (8001684 <HAL_ADC_Start_DMA+0x1ac>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d106      	bne.n	800150a <HAL_ADC_Start_DMA+0x32>
 80014fc:	4b60      	ldr	r3, [pc, #384]	; (8001680 <HAL_ADC_Start_DMA+0x1a8>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 80b3 	bne.w	8001670 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ADC_Start_DMA+0x40>
 8001514:	2302      	movs	r3, #2
 8001516:	e0ae      	b.n	8001676 <HAL_ADC_Start_DMA+0x19e>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f9cb 	bl	80018bc <ADC_Enable>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 809a 	bne.w	8001666 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_ADC_Start_DMA+0x1ac>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d105      	bne.n	800155c <HAL_ADC_Start_DMA+0x84>
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <HAL_ADC_Start_DMA+0x1a8>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d115      	bne.n	8001588 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	2b00      	cmp	r3, #0
 8001574:	d026      	beq.n	80015c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800157e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001586:	e01d      	b.n	80015c4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a39      	ldr	r2, [pc, #228]	; (8001680 <HAL_ADC_Start_DMA+0x1a8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d004      	beq.n	80015a8 <HAL_ADC_Start_DMA+0xd0>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a38      	ldr	r2, [pc, #224]	; (8001684 <HAL_ADC_Start_DMA+0x1ac>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10d      	bne.n	80015c4 <HAL_ADC_Start_DMA+0xec>
 80015a8:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_ADC_Start_DMA+0x1a8>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	f023 0206 	bic.w	r2, r3, #6
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_ADC_Start_DMA+0x1b0>)
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4a24      	ldr	r2, [pc, #144]	; (800168c <HAL_ADC_Start_DMA+0x1b4>)
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_ADC_Start_DMA+0x1b8>)
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0202 	mvn.w	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800161c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a18      	ldr	r0, [r3, #32]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	334c      	adds	r3, #76	; 0x4c
 8001628:	4619      	mov	r1, r3
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f001 fb2d 	bl	8002c8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800163c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001640:	d108      	bne.n	8001654 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001650:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001652:	e00f      	b.n	8001674 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001662:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001664:	e006      	b.n	8001674 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800166e:	e001      	b.n	8001674 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001674:	7dfb      	ldrb	r3, [r7, #23]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40012400 	.word	0x40012400
 8001684:	40012800 	.word	0x40012800
 8001688:	080019d5 	.word	0x080019d5
 800168c:	08001a51 	.word	0x08001a51
 8001690:	08001a6d 	.word	0x08001a6d

08001694 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0dc      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1da>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d81c      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b05      	subs	r3, #5
 800170e:	221f      	movs	r2, #31
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	4019      	ands	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b05      	subs	r3, #5
 8001728:	fa00 f203 	lsl.w	r2, r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	; 0x34
 8001734:	e03c      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d81c      	bhi.n	8001778 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b23      	subs	r3, #35	; 0x23
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	4019      	ands	r1, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b23      	subs	r3, #35	; 0x23
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
 8001776:	e01b      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	; 0x41
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b41      	subs	r3, #65	; 0x41
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	d91c      	bls.n	80017f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	3b1e      	subs	r3, #30
 80017ca:	2207      	movs	r2, #7
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4019      	ands	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6898      	ldr	r0, [r3, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	3b1e      	subs	r3, #30
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	e019      	b.n	8001826 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6919      	ldr	r1, [r3, #16]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d003      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001832:	2b11      	cmp	r3, #17
 8001834:	d132      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d125      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d126      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800185c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d11a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9a      	lsrs	r2, r3, #18
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800187c:	e002      	b.n	8001884 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3b01      	subs	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_ConfigChannel+0x1b2>
 800188a:	e007      	b.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f043 0220 	orr.w	r2, r3, #32
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40012400 	.word	0x40012400
 80018b4:	20000040 	.word	0x20000040
 80018b8:	431bde83 	.word	0x431bde83

080018bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d039      	beq.n	800194e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <ADC_Enable+0x9c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1b      	ldr	r2, [pc, #108]	; (800195c <ADC_Enable+0xa0>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018f8:	e002      	b.n	8001900 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001906:	f7ff fce7 	bl	80012d8 <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800190c:	e018      	b.n	8001940 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800190e:	f7ff fce3 	bl	80012d8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d911      	bls.n	8001940 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e007      	b.n	8001950 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d1df      	bne.n	800190e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000040 	.word	0x20000040
 800195c:	431bde83 	.word	0x431bde83

08001960 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d127      	bne.n	80019ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800198a:	f7ff fca5 	bl	80012d8 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001990:	e014      	b.n	80019bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001992:	f7ff fca1 	bl	80012d8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d90d      	bls.n	80019bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d0e3      	beq.n	8001992 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d127      	bne.n	8001a3e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a08:	d115      	bne.n	8001a36 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d111      	bne.n	8001a36 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fe2c 	bl	8001694 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a3c:	e004      	b.n	8001a48 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f7ff fe21 	bl	80016a6 <HAL_ADC_ConvHalfCpltCallback>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff fe10 	bl	80016b8 <HAL_ADC_ErrorCallback>
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0ed      	b.n	8001c9a <HAL_CAN_Init+0x1fa>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f004 f940 	bl	8005d58 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0202 	bic.w	r2, r2, #2
 8001aee:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8001b00:	f7ff fbea 	bl	80012d8 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001b06:	e010      	b.n	8001b2a <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001b08:	f7ff fbe6 	bl	80012d8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b0a      	cmp	r3, #10
 8001b14:	d909      	bls.n	8001b2a <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0b7      	b.n	8001c9a <HAL_CAN_Init+0x1fa>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0e7      	beq.n	8001b08 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 8098 	bne.w	8001c78 <HAL_CAN_Init+0x1d8>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d104      	bne.n	8001b5a <HAL_CAN_Init+0xba>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	e003      	b.n	8001b62 <HAL_CAN_Init+0xc2>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b60:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d104      	bne.n	8001b74 <HAL_CAN_Init+0xd4>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e003      	b.n	8001b7c <HAL_CAN_Init+0xdc>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b7a:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d104      	bne.n	8001b8e <HAL_CAN_Init+0xee>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	e003      	b.n	8001b96 <HAL_CAN_Init+0xf6>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f023 0320 	bic.w	r3, r3, #32
 8001b94:	613b      	str	r3, [r7, #16]
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d104      	bne.n	8001ba8 <HAL_CAN_Init+0x108>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e003      	b.n	8001bb0 <HAL_CAN_Init+0x110>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f023 0310 	bic.w	r3, r3, #16
 8001bae:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d104      	bne.n	8001bc2 <HAL_CAN_Init+0x122>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	e003      	b.n	8001bca <HAL_CAN_Init+0x12a>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f023 0308 	bic.w	r3, r3, #8
 8001bc8:	613b      	str	r3, [r7, #16]
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d104      	bne.n	8001bdc <HAL_CAN_Init+0x13c>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e003      	b.n	8001be4 <HAL_CAN_Init+0x144>
    }
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	613b      	str	r3, [r7, #16]
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 01fc 	bic.w	r1, r3, #252	; 0xfc
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 8001c2e:	f7ff fb53 	bl	80012d8 <HAL_GetTick>
 8001c32:	60f8      	str	r0, [r7, #12]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001c34:	e010      	b.n	8001c58 <HAL_CAN_Init+0x1b8>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001c36:	f7ff fb4f 	bl	80012d8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d909      	bls.n	8001c58 <HAL_CAN_Init+0x1b8>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e020      	b.n	8001c9a <HAL_CAN_Init+0x1fa>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1e7      	bne.n	8001c36 <HAL_CAN_Init+0x196>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_CAN_Init+0x1d8>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8001c74:	2301      	movs	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d108      	bne.n	8001c90 <HAL_CAN_Init+0x1f0>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e004      	b.n	8001c9a <HAL_CAN_Init+0x1fa>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2204      	movs	r2, #4
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d127      	bne.n	8001d4a <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d24:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001d26:	3248      	adds	r2, #72	; 0x48
 8001d28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d40:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001d42:	3348      	adds	r3, #72	; 0x48
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d126      	bne.n	8001da0 <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d7a:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001d7c:	3248      	adds	r2, #72	; 0x48
 8001d7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d96:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001d98:	3348      	adds	r3, #72	; 0x48
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dbe:	e009      	b.n	8001dd4 <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001df2:	e009      	b.n	8001e08 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d109      	bne.n	8001e24 <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e64:	d010      	beq.n	8001e88 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8001e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e74:	d008      	beq.n	8001e88 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8001e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e84:	f040 8185 	bne.w	8002192 <HAL_CAN_Transmit+0x34e>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_CAN_Transmit+0x52>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e182      	b.n	800219c <HAL_CAN_Transmit+0x358>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Change CAN state */
    switch(hcan->State)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b62      	cmp	r3, #98	; 0x62
 8001ea8:	d010      	beq.n	8001ecc <HAL_CAN_Transmit+0x88>
 8001eaa:	2b62      	cmp	r3, #98	; 0x62
 8001eac:	dc13      	bgt.n	8001ed6 <HAL_CAN_Transmit+0x92>
 8001eae:	2b22      	cmp	r3, #34	; 0x22
 8001eb0:	d002      	beq.n	8001eb8 <HAL_CAN_Transmit+0x74>
 8001eb2:	2b32      	cmp	r3, #50	; 0x32
 8001eb4:	d005      	beq.n	8001ec2 <HAL_CAN_Transmit+0x7e>
 8001eb6:	e00e      	b.n	8001ed6 <HAL_CAN_Transmit+0x92>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2242      	movs	r2, #66	; 0x42
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8001ec0:	e00e      	b.n	8001ee0 <HAL_CAN_Transmit+0x9c>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2252      	movs	r2, #82	; 0x52
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_CAN_Transmit+0x9c>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2272      	movs	r2, #114	; 0x72
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8001ed4:	e004      	b.n	8001ee0 <HAL_CAN_Transmit+0x9c>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2212      	movs	r2, #18
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8001ede:	bf00      	nop
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_CAN_Transmit+0xb0>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00b      	b.n	8001f0c <HAL_CAN_Transmit+0xc8>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_CAN_Transmit+0xc4>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e001      	b.n	8001f0c <HAL_CAN_Transmit+0xc8>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3318      	adds	r3, #24
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6811      	ldr	r1, [r2, #0]
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3318      	adds	r3, #24
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	440b      	add	r3, r1
 8001f2a:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d117      	bne.n	8001f66 <HAL_CAN_Transmit+0x122>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0559      	lsls	r1, r3, #21
                                                           hcan->pTxMsg->RTR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) |
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	6809      	ldr	r1, [r1, #0]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	440b      	add	r3, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e01a      	b.n	8001f9c <HAL_CAN_Transmit+0x158>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3318      	adds	r3, #24
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	00d9      	lsls	r1, r3, #3
                                                           hcan->pTxMsg->IDE |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 8001f82:	4319      	orrs	r1, r3
                                                           hcan->pTxMsg->RTR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE |
 8001f8a:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) |
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	6809      	ldr	r1, [r1, #0]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3318      	adds	r3, #24
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	440b      	add	r3, r1
 8001f9a:	601a      	str	r2, [r3, #0]
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f002 020f 	and.w	r2, r2, #15
 8001faa:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3318      	adds	r3, #24
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6811      	ldr	r1, [r2, #0]
 8001fc0:	f023 020f 	bic.w	r2, r3, #15
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	440b      	add	r3, r1
 8001fcc:	3304      	adds	r3, #4
 8001fce:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	6809      	ldr	r1, [r1, #0]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3318      	adds	r3, #24
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) | 
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	7ddb      	ldrb	r3, [r3, #23]
 8001ffe:	061a      	lsls	r2, r3, #24
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	7d9b      	ldrb	r3, [r3, #22]
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	7d5b      	ldrb	r3, [r3, #21]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	4313      	orrs	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002018:	7d12      	ldrb	r2, [r2, #20]
 800201a:	4610      	mov	r0, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6811      	ldr	r1, [r2, #0]
 8002020:	ea43 0200 	orr.w	r2, r3, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	440b      	add	r3, r1
 800202a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800202e:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) | 
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) | 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	7edb      	ldrb	r3, [r3, #27]
 8002036:	061a      	lsls	r2, r3, #24
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	7e9b      	ldrb	r3, [r3, #26]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	7e5b      	ldrb	r3, [r3, #25]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	4313      	orrs	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002050:	7e12      	ldrb	r2, [r2, #24]
 8002052:	4610      	mov	r0, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6811      	ldr	r1, [r2, #0]
 8002058:	ea43 0200 	orr.w	r2, r3, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	440b      	add	r3, r1
 8002062:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002066:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));
    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3318      	adds	r3, #24
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6811      	ldr	r1, [r2, #0]
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3318      	adds	r3, #24
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	440b      	add	r3, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff f926 	bl	80012d8 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800208e:	e02e      	b.n	80020ee <HAL_CAN_Transmit+0x2aa>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d02a      	beq.n	80020ee <HAL_CAN_Transmit+0x2aa>
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_CAN_Transmit+0x26a>
 800209e:	f7ff f91b 	bl	80012d8 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d21f      	bcs.n	80020ee <HAL_CAN_Transmit+0x2aa>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <HAL_CAN_Transmit+0x282>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e00d      	b.n	80020e2 <HAL_CAN_Transmit+0x29e>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_CAN_Transmit+0x294>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	e004      	b.n	80020e2 <HAL_CAN_Transmit+0x29e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80020e0:	6093      	str	r3, [r2, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e056      	b.n	800219c <HAL_CAN_Transmit+0x358>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_CAN_Transmit+0x2c8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_CAN_Transmit+0x360>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_CAN_Transmit+0x360>)
 8002100:	4293      	cmp	r3, r2
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e019      	b.n	8002140 <HAL_CAN_Transmit+0x2fc>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10b      	bne.n	800212a <HAL_CAN_Transmit+0x2e6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_CAN_Transmit+0x364>)
 800211a:	4013      	ands	r3, r2
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_CAN_Transmit+0x364>)
 800211e:	4293      	cmp	r3, r2
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e00a      	b.n	8002140 <HAL_CAN_Transmit+0x2fc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_CAN_Transmit+0x368>)
 8002132:	4013      	ands	r3, r2
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_CAN_Transmit+0x368>)
 8002136:	4293      	cmp	r3, r2
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1a5      	bne.n	8002090 <HAL_CAN_Transmit+0x24c>
        }
      }
    }
    /* Change CAN state */
    switch(hcan->State)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b72      	cmp	r3, #114	; 0x72
 800214e:	d010      	beq.n	8002172 <HAL_CAN_Transmit+0x32e>
 8002150:	2b72      	cmp	r3, #114	; 0x72
 8002152:	dc13      	bgt.n	800217c <HAL_CAN_Transmit+0x338>
 8002154:	2b42      	cmp	r3, #66	; 0x42
 8002156:	d002      	beq.n	800215e <HAL_CAN_Transmit+0x31a>
 8002158:	2b52      	cmp	r3, #82	; 0x52
 800215a:	d005      	beq.n	8002168 <HAL_CAN_Transmit+0x324>
 800215c:	e00e      	b.n	800217c <HAL_CAN_Transmit+0x338>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2222      	movs	r2, #34	; 0x22
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8002166:	e00e      	b.n	8002186 <HAL_CAN_Transmit+0x342>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2232      	movs	r2, #50	; 0x32
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8002170:	e009      	b.n	8002186 <HAL_CAN_Transmit+0x342>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2262      	movs	r2, #98	; 0x62
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 800217a:	e004      	b.n	8002186 <HAL_CAN_Transmit+0x342>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          break;
 8002184:	bf00      	nop
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Return function status */
    return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e004      	b.n	800219c <HAL_CAN_Transmit+0x358>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
  }
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	04000001 	.word	0x04000001
 80021a8:	08000100 	.word	0x08000100
 80021ac:	10010000 	.word	0x10010000

080021b0 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  /* Check Overrun flag for FIFO0 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  if((tmp1 != 0U) && tmp2)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_CAN_IRQHandler+0x60>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_CAN_IRQHandler+0x60>
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002206:	617b      	str	r3, [r7, #20]

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2210      	movs	r2, #16
 800220e:	60da      	str	r2, [r3, #12]
  }

  /* Check Overrun flag for FIFO1 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b10      	cmp	r3, #16
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	60fb      	str	r3, [r7, #12]
  if((tmp1 != 0U) && tmp2)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_CAN_IRQHandler+0xa8>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_CAN_IRQHandler+0xa8>
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	617b      	str	r3, [r7, #20]

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2210      	movs	r2, #16
 8002256:	611a      	str	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d16e      	bne.n	8002344 <HAL_CAN_IRQHandler+0x194>
  {
    /* Check Transmit request completion status */
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_CAN_IRQHandler+0x170>)
 800226e:	4013      	ands	r3, r2
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <HAL_CAN_IRQHandler+0x170>)
 8002272:	4293      	cmp	r3, r2
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	613b      	str	r3, [r7, #16]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_CAN_IRQHandler+0x174>)
 8002286:	4013      	ands	r3, r2
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_CAN_IRQHandler+0x174>)
 800228a:	4293      	cmp	r3, r2
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	60fb      	str	r3, [r7, #12]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_CAN_IRQHandler+0x178>)
 800229e:	4013      	ands	r3, r2
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_CAN_IRQHandler+0x178>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	bf0c      	ite	eq
 80022a6:	2301      	moveq	r3, #1
 80022a8:	2300      	movne	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	60bb      	str	r3, [r7, #8]
    if(tmp1 || tmp2 || tmp3)  
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_CAN_IRQHandler+0x110>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_CAN_IRQHandler+0x110>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d041      	beq.n	8002344 <HAL_CAN_IRQHandler+0x194>
    {
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	613b      	str	r3, [r7, #16]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	60fb      	str	r3, [r7, #12]
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	60bb      	str	r3, [r7, #8]
      /* Check Transmit success */
      if((tmp1) || (tmp2) || (tmp3))
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_CAN_IRQHandler+0x166>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_CAN_IRQHandler+0x166>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_CAN_IRQHandler+0x17c>
      {
        /* Call transmit function */
        CAN_Transmit_IT(hcan);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9a0 	bl	800265c <CAN_Transmit_IT>
 800231c:	e00a      	b.n	8002334 <HAL_CAN_IRQHandler+0x184>
 800231e:	bf00      	nop
 8002320:	04000001 	.word	0x04000001
 8002324:	08000100 	.word	0x08000100
 8002328:	10010000 	.word	0x10010000
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002332:	617b      	str	r3, [r7, #20]
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <HAL_CAN_IRQHandler+0x340>)
 8002340:	430b      	orrs	r3, r1
 8002342:	6093      	str	r3, [r2, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	60fb      	str	r3, [r7, #12]
  /* Check End of reception flag for FIFO0 */
  if((tmp1 != 0U) && tmp2)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_CAN_IRQHandler+0x1cc>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_CAN_IRQHandler+0x1cc>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8002374:	2100      	movs	r1, #0
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f9b3 	bl	80026e2 <CAN_Receive_IT>
  }
  
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b10      	cmp	r3, #16
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	60fb      	str	r3, [r7, #12]
  /* Check End of reception flag for FIFO1 */
  if((tmp1 != 0U) && tmp2)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x204>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x204>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 80023ac:	2101      	movs	r1, #1
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f997 	bl	80026e2 <CAN_Receive_IT>
  }

  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	60bb      	str	r3, [r7, #8]
  /* Check Error Warning Flag */
  if(tmp1 && tmp2 && tmp3)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_CAN_IRQHandler+0x274>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_CAN_IRQHandler+0x274>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_CAN_IRQHandler+0x274>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	bf0c      	ite	eq
 8002432:	2301      	moveq	r3, #1
 8002434:	2300      	movne	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	60bb      	str	r3, [r7, #8]
  /* Check Error Passive Flag */
  if(tmp1 && tmp2 && tmp3)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <HAL_CAN_IRQHandler+0x2d8>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_CAN_IRQHandler+0x2d8>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_CAN_IRQHandler+0x2d8>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	60bb      	str	r3, [r7, #8]
  /* Check Bus-Off Flag */
  if(tmp1 && tmp2 && tmp3)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00f      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x344>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x344>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x344>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0204 	orr.w	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
 80024ec:	e002      	b.n	80024f4 <HAL_CAN_IRQHandler+0x344>
 80024ee:	bf00      	nop
 80024f0:	00010509 	.word	0x00010509
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	60bb      	str	r3, [r7, #8]
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d15d      	bne.n	80025fc <HAL_CAN_IRQHandler+0x44c>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d05a      	beq.n	80025fc <HAL_CAN_IRQHandler+0x44c>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d057      	beq.n	80025fc <HAL_CAN_IRQHandler+0x44c>
  {
    tmp1 = (hcan->Instance->ESR & CAN_ESR_LEC);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002556:	613b      	str	r3, [r7, #16]
    switch(tmp1)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b60      	cmp	r3, #96	; 0x60
 800255c:	d03e      	beq.n	80025dc <HAL_CAN_IRQHandler+0x42c>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b60      	cmp	r3, #96	; 0x60
 8002562:	d842      	bhi.n	80025ea <HAL_CAN_IRQHandler+0x43a>
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b50      	cmp	r3, #80	; 0x50
 8002568:	d031      	beq.n	80025ce <HAL_CAN_IRQHandler+0x41e>
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b50      	cmp	r3, #80	; 0x50
 800256e:	d83c      	bhi.n	80025ea <HAL_CAN_IRQHandler+0x43a>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d024      	beq.n	80025c0 <HAL_CAN_IRQHandler+0x410>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d836      	bhi.n	80025ea <HAL_CAN_IRQHandler+0x43a>
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b30      	cmp	r3, #48	; 0x30
 8002580:	d017      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x402>
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b30      	cmp	r3, #48	; 0x30
 8002586:	d830      	bhi.n	80025ea <HAL_CAN_IRQHandler+0x43a>
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0x3e6>
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b20      	cmp	r3, #32
 8002592:	d007      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x3f4>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8002594:	e029      	b.n	80025ea <HAL_CAN_IRQHandler+0x43a>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0208 	orr.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80025a2:	e023      	b.n	80025ec <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f043 0210 	orr.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80025b0:	e01c      	b.n	80025ec <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80025be:	e015      	b.n	80025ec <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80025cc:	e00e      	b.n	80025ec <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80025da:	e007      	b.n	80025ec <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80025e8:	e000      	b.n	80025ec <HAL_CAN_IRQHandler+0x43c>
          break;
 80025ea:	bf00      	nop
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025fa:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d014      	beq.n	800262e <HAL_CAN_IRQHandler+0x47e>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2204      	movs	r2, #4
 800260a:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8002622:	f023 035b 	bic.w	r3, r3, #91	; 0x5b
 8002626:	6153      	str	r3, [r2, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME  );

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f80e 	bl	800264a <HAL_CAN_ErrorCallback>
  }  
}
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop

08002638 <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b12      	cmp	r3, #18
 800267e:	d107      	bne.n	8002690 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 800268e:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  switch(hcan->State)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b72      	cmp	r3, #114	; 0x72
 800269a:	d010      	beq.n	80026be <CAN_Transmit_IT+0x62>
 800269c:	2b72      	cmp	r3, #114	; 0x72
 800269e:	dc13      	bgt.n	80026c8 <CAN_Transmit_IT+0x6c>
 80026a0:	2b42      	cmp	r3, #66	; 0x42
 80026a2:	d002      	beq.n	80026aa <CAN_Transmit_IT+0x4e>
 80026a4:	2b52      	cmp	r3, #82	; 0x52
 80026a6:	d005      	beq.n	80026b4 <CAN_Transmit_IT+0x58>
 80026a8:	e00e      	b.n	80026c8 <CAN_Transmit_IT+0x6c>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2222      	movs	r2, #34	; 0x22
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 80026b2:	e00e      	b.n	80026d2 <CAN_Transmit_IT+0x76>
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2232      	movs	r2, #50	; 0x32
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 80026bc:	e009      	b.n	80026d2 <CAN_Transmit_IT+0x76>
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2262      	movs	r2, #98	; 0x62
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 80026c6:	e004      	b.n	80026d2 <CAN_Transmit_IT+0x76>
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      break;
 80026d0:	bf00      	nop
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffb0 	bl	8002638 <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp1 = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
  CanRxMsgTypeDef* pRxMsg = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <CAN_Receive_IT+0x22>
  {
    pRxMsg = hcan->pRxMsg;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e002      	b.n	800270a <CAN_Receive_IT+0x28>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	60fb      	str	r3, [r7, #12]
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	331b      	adds	r3, #27
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	4413      	add	r3, r2
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0204 	and.w	r2, r3, #4
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <CAN_Receive_IT+0x60>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	331b      	adds	r3, #27
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0d5b      	lsrs	r3, r3, #21
 8002738:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e00b      	b.n	800275a <CAN_Receive_IT+0x78>
  }
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	331b      	adds	r3, #27
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]
  }
  
  pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	331b      	adds	r3, #27
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0202 	and.w	r2, r3, #2
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	331b      	adds	r3, #27
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	611a      	str	r2, [r3, #16]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	331b      	adds	r3, #27
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	4413      	add	r3, r2
 800279a:	3304      	adds	r3, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e1b      	lsrs	r3, r3, #24
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4413      	add	r3, r2
 8002854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e1b      	lsrs	r3, r3, #24
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10c      	bne.n	8002882 <CAN_Receive_IT+0x1a0>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020a 	bic.w	r2, r2, #10
 800287e:	615a      	str	r2, [r3, #20]
 8002880:	e00b      	b.n	800289a <CAN_Receive_IT+0x1b8>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2220      	movs	r2, #32
 8002888:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0250 	bic.w	r2, r2, #80	; 0x50
 8002898:	615a      	str	r2, [r3, #20]
  }

  tmp1 = hcan->State;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	60bb      	str	r3, [r7, #8]
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b22      	cmp	r3, #34	; 0x22
 80028a8:	d002      	beq.n	80028b0 <CAN_Receive_IT+0x1ce>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b32      	cmp	r3, #50	; 0x32
 80028ae:	d107      	bne.n	80028c0 <CAN_Receive_IT+0x1de>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 80028be:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d120      	bne.n	8002908 <CAN_Receive_IT+0x226>
  {
    switch(hcan->State)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b72      	cmp	r3, #114	; 0x72
 80028d0:	d010      	beq.n	80028f4 <CAN_Receive_IT+0x212>
 80028d2:	2b72      	cmp	r3, #114	; 0x72
 80028d4:	dc13      	bgt.n	80028fe <CAN_Receive_IT+0x21c>
 80028d6:	2b42      	cmp	r3, #66	; 0x42
 80028d8:	d002      	beq.n	80028e0 <CAN_Receive_IT+0x1fe>
 80028da:	2b62      	cmp	r3, #98	; 0x62
 80028dc:	d005      	beq.n	80028ea <CAN_Receive_IT+0x208>
 80028de:	e00e      	b.n	80028fe <CAN_Receive_IT+0x21c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2212      	movs	r2, #18
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80028e8:	e02f      	b.n	800294a <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2232      	movs	r2, #50	; 0x32
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80028f2:	e02a      	b.n	800294a <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2252      	movs	r2, #82	; 0x52
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 80028fc:	e025      	b.n	800294a <CAN_Receive_IT+0x268>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8002906:	e020      	b.n	800294a <CAN_Receive_IT+0x268>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b72      	cmp	r3, #114	; 0x72
 8002912:	d010      	beq.n	8002936 <CAN_Receive_IT+0x254>
 8002914:	2b72      	cmp	r3, #114	; 0x72
 8002916:	dc13      	bgt.n	8002940 <CAN_Receive_IT+0x25e>
 8002918:	2b52      	cmp	r3, #82	; 0x52
 800291a:	d002      	beq.n	8002922 <CAN_Receive_IT+0x240>
 800291c:	2b62      	cmp	r3, #98	; 0x62
 800291e:	d005      	beq.n	800292c <CAN_Receive_IT+0x24a>
 8002920:	e00e      	b.n	8002940 <CAN_Receive_IT+0x25e>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2212      	movs	r2, #18
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 800292a:	e00e      	b.n	800294a <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2222      	movs	r2, #34	; 0x22
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8002934:	e009      	b.n	800294a <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2242      	movs	r2, #66	; 0x42
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 800293e:	e004      	b.n	800294a <CAN_Receive_IT+0x268>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        break;
 8002948:	bf00      	nop
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f003 facc 	bl	8005ee8 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <NVIC_EnableIRQ+0x2c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da0b      	bge.n	8002a1c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <NVIC_SetPriority+0x4c>)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	3b04      	subs	r3, #4
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1a:	e009      	b.n	8002a30 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <NVIC_SetPriority+0x50>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f7ff ff90 	bl	80029f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff31 	bl	800295c <NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff46 	bl	80029a4 <NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff90 	bl	8002a44 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5f 	bl	80029f0 <NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff39 	bl	80029c0 <NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d106      	bne.n	8002b8c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002b8a:	e005      	b.n	8002b98 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010

08002ba8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002bac:	f000 f802 	bl	8002bb4 <HAL_SYSTICK_Callback>
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e04f      	b.n	8002c76 <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_DMA_Init+0xc0>)
 8002bde:	4413      	add	r3, r2
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_DMA_Init+0xc4>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	009a      	lsls	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_DMA_Init+0xc8>)
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	bffdfff8 	.word	0xbffdfff8
 8002c84:	cccccccd 	.word	0xcccccccd
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_DMA_Start_IT+0x20>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e04a      	b.n	8002d42 <HAL_DMA_Start_IT+0xb6>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d13a      	bne.n	8002d34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f938 	bl	8002f58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 020e 	orr.w	r2, r2, #14
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e00f      	b.n	8002d22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0204 	bic.w	r2, r2, #4
 8002d10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 020a 	orr.w	r2, r2, #10
 8002d20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e005      	b.n	8002d40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2204      	movs	r2, #4
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d04f      	beq.n	8002e14 <HAL_DMA_IRQHandler+0xc8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d04a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0204 	bic.w	r2, r2, #4
 8002d9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <HAL_DMA_IRQHandler+0x1f0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d029      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xae>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_DMA_IRQHandler+0x1f4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xaa>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a63      	ldr	r2, [pc, #396]	; (8002f44 <HAL_DMA_IRQHandler+0x1f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01a      	beq.n	8002df0 <HAL_DMA_IRQHandler+0xa4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a62      	ldr	r2, [pc, #392]	; (8002f48 <HAL_DMA_IRQHandler+0x1fc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d012      	beq.n	8002dea <HAL_DMA_IRQHandler+0x9e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a60      	ldr	r2, [pc, #384]	; (8002f4c <HAL_DMA_IRQHandler+0x200>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00a      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x98>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5f      	ldr	r2, [pc, #380]	; (8002f50 <HAL_DMA_IRQHandler+0x204>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d102      	bne.n	8002dde <HAL_DMA_IRQHandler+0x92>
 8002dd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ddc:	e00e      	b.n	8002dfc <HAL_DMA_IRQHandler+0xb0>
 8002dde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002de2:	e00b      	b.n	8002dfc <HAL_DMA_IRQHandler+0xb0>
 8002de4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002de8:	e008      	b.n	8002dfc <HAL_DMA_IRQHandler+0xb0>
 8002dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dee:	e005      	b.n	8002dfc <HAL_DMA_IRQHandler+0xb0>
 8002df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df4:	e002      	b.n	8002dfc <HAL_DMA_IRQHandler+0xb0>
 8002df6:	2340      	movs	r3, #64	; 0x40
 8002df8:	e000      	b.n	8002dfc <HAL_DMA_IRQHandler+0xb0>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_DMA_IRQHandler+0x208>)
 8002dfe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8094 	beq.w	8002f32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e12:	e08e      	b.n	8002f32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2202      	movs	r2, #2
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d056      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x186>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d051      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020a 	bic.w	r2, r2, #10
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a38      	ldr	r2, [pc, #224]	; (8002f3c <HAL_DMA_IRQHandler+0x1f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d029      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x166>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a37      	ldr	r2, [pc, #220]	; (8002f40 <HAL_DMA_IRQHandler+0x1f4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_IRQHandler+0x162>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a35      	ldr	r2, [pc, #212]	; (8002f44 <HAL_DMA_IRQHandler+0x1f8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x15c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <HAL_DMA_IRQHandler+0x1fc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d012      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x156>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a32      	ldr	r2, [pc, #200]	; (8002f4c <HAL_DMA_IRQHandler+0x200>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00a      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x150>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <HAL_DMA_IRQHandler+0x204>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d102      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x14a>
 8002e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e94:	e00e      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x168>
 8002e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9a:	e00b      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x168>
 8002e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea0:	e008      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x168>
 8002ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ea6:	e005      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x168>
 8002ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eac:	e002      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x168>
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e000      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x168>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_DMA_IRQHandler+0x208>)
 8002eb6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d034      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ed0:	e02f      	b.n	8002f32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d028      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x1e8>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 020e 	bic.w	r2, r2, #14
 8002efa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
    }
  }
  return;
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
}
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40020008 	.word	0x40020008
 8002f40:	4002001c 	.word	0x4002001c
 8002f44:	40020030 	.word	0x40020030
 8002f48:	40020044 	.word	0x40020044
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	4002006c 	.word	0x4002006c
 8002f54:	40020000 	.word	0x40020000

08002f58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d108      	bne.n	8002f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f96:	e007      	b.n	8002fa8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_FLASH_Program+0xd8>)
 8002fd0:	7e1b      	ldrb	r3, [r3, #24]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_FLASH_Program+0x26>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e054      	b.n	8003084 <HAL_FLASH_Program+0xd0>
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_FLASH_Program+0xd8>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fe4:	f000 f8a8 	bl	8003138 <FLASH_WaitForLastOperation>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d144      	bne.n	800307c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d102      	bne.n	8002ffe <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	757b      	strb	r3, [r7, #21]
 8002ffc:	e007      	b.n	800300e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d102      	bne.n	800300a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003004:	2302      	movs	r3, #2
 8003006:	757b      	strb	r3, [r7, #21]
 8003008:	e001      	b.n	800300e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800300a:	2304      	movs	r3, #4
 800300c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800300e:	2300      	movs	r3, #0
 8003010:	75bb      	strb	r3, [r7, #22]
 8003012:	e02d      	b.n	8003070 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003014:	7dbb      	ldrb	r3, [r7, #22]
 8003016:	005a      	lsls	r2, r3, #1
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	eb02 0c03 	add.w	ip, r2, r3
 800301e:	7dbb      	ldrb	r3, [r7, #22]
 8003020:	0119      	lsls	r1, r3, #4
 8003022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003026:	f1c1 0620 	rsb	r6, r1, #32
 800302a:	f1a1 0020 	sub.w	r0, r1, #32
 800302e:	fa22 f401 	lsr.w	r4, r2, r1
 8003032:	fa03 f606 	lsl.w	r6, r3, r6
 8003036:	4334      	orrs	r4, r6
 8003038:	fa23 f000 	lsr.w	r0, r3, r0
 800303c:	4304      	orrs	r4, r0
 800303e:	fa23 f501 	lsr.w	r5, r3, r1
 8003042:	b2a3      	uxth	r3, r4
 8003044:	4619      	mov	r1, r3
 8003046:	4660      	mov	r0, ip
 8003048:	f000 f85a 	bl	8003100 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800304c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003050:	f000 f872 	bl	8003138 <FLASH_WaitForLastOperation>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <HAL_FLASH_Program+0xdc>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_FLASH_Program+0xdc>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	3301      	adds	r3, #1
 800306e:	75bb      	strb	r3, [r7, #22]
 8003070:	7dba      	ldrb	r2, [r7, #22]
 8003072:	7d7b      	ldrb	r3, [r7, #21]
 8003074:	429a      	cmp	r2, r3
 8003076:	d3cd      	bcc.n	8003014 <HAL_FLASH_Program+0x60>
 8003078:	e000      	b.n	800307c <HAL_FLASH_Program+0xc8>
      {
        break;
 800307a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_FLASH_Program+0xd8>)
 800307e:	2200      	movs	r2, #0
 8003080:	761a      	strb	r2, [r3, #24]

  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800308c:	20000068 	.word	0x20000068
 8003090:	40022000 	.word	0x40022000

08003094 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_FLASH_Unlock+0x2c>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_FLASH_Unlock+0x20>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_FLASH_Unlock+0x2c>)
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_FLASH_Unlock+0x30>)
 80030a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_FLASH_Unlock+0x2c>)
 80030ac:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <HAL_FLASH_Unlock+0x34>)
 80030ae:	605a      	str	r2, [r3, #4]
  {
    return HAL_ERROR;
  }
  
#endif /* FLASH_BANK2_END */
  return HAL_OK; 
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_FLASH_Unlock+0x22>
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40022000 	.word	0x40022000
 80030c4:	45670123 	.word	0x45670123
 80030c8:	cdef89ab 	.word	0xcdef89ab

080030cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_FLASH_Lock+0x1c>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_FLASH_Lock+0x1c>)
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000

080030ec <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <HAL_FLASH_GetError+0x10>)
 80030f2:	69db      	ldr	r3, [r3, #28]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	20000068 	.word	0x20000068

08003100 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <FLASH_Program_HalfWord+0x30>)
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <FLASH_Program_HalfWord+0x34>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	4a07      	ldr	r2, [pc, #28]	; (8003134 <FLASH_Program_HalfWord+0x34>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	887a      	ldrh	r2, [r7, #2]
 8003122:	801a      	strh	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000068 	.word	0x20000068
 8003134:	40022000 	.word	0x40022000

08003138 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7fe f8ca 	bl	80012d8 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003146:	e010      	b.n	800316a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d00c      	beq.n	800316a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <FLASH_WaitForLastOperation+0x2e>
 8003156:	f7fe f8bf 	bl	80012d8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d201      	bcs.n	800316a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e025      	b.n	80031b6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <FLASH_WaitForLastOperation+0x88>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e8      	bne.n	8003148 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <FLASH_WaitForLastOperation+0x88>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <FLASH_WaitForLastOperation+0x88>)
 8003184:	2220      	movs	r2, #32
 8003186:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <FLASH_WaitForLastOperation+0x88>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <FLASH_WaitForLastOperation+0x88>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <FLASH_WaitForLastOperation+0x88>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80031ac:	f000 f80a 	bl	80031c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40022000 	.word	0x40022000

080031c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <FLASH_SetErrorCode+0x98>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <FLASH_SetErrorCode+0x9c>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <FLASH_SetErrorCode+0x9c>)
 80031e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <FLASH_SetErrorCode+0x98>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <FLASH_SetErrorCode+0x9c>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <FLASH_SetErrorCode+0x9c>)
 8003204:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <FLASH_SetErrorCode+0x98>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <FLASH_SetErrorCode+0x9c>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <FLASH_SetErrorCode+0x9c>)
 8003224:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <FLASH_SetErrorCode+0x98>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a0c      	ldr	r2, [pc, #48]	; (800325c <FLASH_SetErrorCode+0x98>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f240 1201 	movw	r2, #257	; 0x101
 8003238:	4293      	cmp	r3, r2
 800323a:	d106      	bne.n	800324a <FLASH_SetErrorCode+0x86>
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <FLASH_SetErrorCode+0x98>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4a06      	ldr	r2, [pc, #24]	; (800325c <FLASH_SetErrorCode+0x98>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	61d3      	str	r3, [r2, #28]
}  
 8003248:	e002      	b.n	8003250 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <FLASH_SetErrorCode+0x98>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	60d3      	str	r3, [r2, #12]
}  
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	20000068 	.word	0x20000068

08003264 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_FLASHEx_Erase+0xd0>)
 8003278:	7e1b      	ldrb	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_FLASHEx_Erase+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e053      	b.n	800332a <HAL_FLASHEx_Erase+0xc6>
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_FLASHEx_Erase+0xd0>)
 8003284:	2201      	movs	r2, #1
 8003286:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d116      	bne.n	80032be <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003290:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003294:	f7ff ff50 	bl	8003138 <FLASH_WaitForLastOperation>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d141      	bne.n	8003322 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 f84c 	bl	800333c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032a8:	f7ff ff46 	bl	8003138 <FLASH_WaitForLastOperation>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_FLASHEx_Erase+0xd4>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_FLASHEx_Erase+0xd4>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6113      	str	r3, [r2, #16]
 80032bc:	e031      	b.n	8003322 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80032be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032c2:	f7ff ff39 	bl	8003138 <FLASH_WaitForLastOperation>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d12a      	bne.n	8003322 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f04f 32ff 	mov.w	r2, #4294967295
 80032d2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	e019      	b.n	8003310 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80032dc:	68b8      	ldr	r0, [r7, #8]
 80032de:	f000 f849 	bl	8003374 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032e6:	f7ff ff27 	bl	8003138 <FLASH_WaitForLastOperation>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_FLASHEx_Erase+0xd4>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <HAL_FLASHEx_Erase+0xd4>)
 80032f4:	f023 0302 	bic.w	r3, r3, #2
 80032f8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	601a      	str	r2, [r3, #0]
            break;
 8003306:	e00c      	b.n	8003322 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	029a      	lsls	r2, r3, #10
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3dc      	bcc.n	80032dc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_FLASHEx_Erase+0xd0>)
 8003324:	2200      	movs	r2, #0
 8003326:	761a      	strb	r2, [r3, #24]

  return status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000068 	.word	0x20000068
 8003338:	40022000 	.word	0x40022000

0800333c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <FLASH_MassErase+0x30>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <FLASH_MassErase+0x34>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <FLASH_MassErase+0x34>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <FLASH_MassErase+0x34>)
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	4a05      	ldr	r2, [pc, #20]	; (8003370 <FLASH_MassErase+0x34>)
 800335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003360:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000068 	.word	0x20000068
 8003370:	40022000 	.word	0x40022000

08003374 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <FLASH_PageErase+0x38>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <FLASH_PageErase+0x3c>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <FLASH_PageErase+0x3c>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <FLASH_PageErase+0x3c>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <FLASH_PageErase+0x3c>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <FLASH_PageErase+0x3c>)
 800339a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800339e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000068 	.word	0x20000068
 80033b0:	40022000 	.word	0x40022000

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b08b      	sub	sp, #44	; 0x2c
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e169      	b.n	80036ac <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80033d8:	2201      	movs	r2, #1
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 8158 	bne.w	80036a6 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a9a      	ldr	r2, [pc, #616]	; (8003664 <HAL_GPIO_Init+0x2b0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d05e      	beq.n	80034be <HAL_GPIO_Init+0x10a>
 8003400:	4a98      	ldr	r2, [pc, #608]	; (8003664 <HAL_GPIO_Init+0x2b0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d875      	bhi.n	80034f2 <HAL_GPIO_Init+0x13e>
 8003406:	4a98      	ldr	r2, [pc, #608]	; (8003668 <HAL_GPIO_Init+0x2b4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d058      	beq.n	80034be <HAL_GPIO_Init+0x10a>
 800340c:	4a96      	ldr	r2, [pc, #600]	; (8003668 <HAL_GPIO_Init+0x2b4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d86f      	bhi.n	80034f2 <HAL_GPIO_Init+0x13e>
 8003412:	4a96      	ldr	r2, [pc, #600]	; (800366c <HAL_GPIO_Init+0x2b8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d052      	beq.n	80034be <HAL_GPIO_Init+0x10a>
 8003418:	4a94      	ldr	r2, [pc, #592]	; (800366c <HAL_GPIO_Init+0x2b8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d869      	bhi.n	80034f2 <HAL_GPIO_Init+0x13e>
 800341e:	4a94      	ldr	r2, [pc, #592]	; (8003670 <HAL_GPIO_Init+0x2bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d04c      	beq.n	80034be <HAL_GPIO_Init+0x10a>
 8003424:	4a92      	ldr	r2, [pc, #584]	; (8003670 <HAL_GPIO_Init+0x2bc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d863      	bhi.n	80034f2 <HAL_GPIO_Init+0x13e>
 800342a:	4a92      	ldr	r2, [pc, #584]	; (8003674 <HAL_GPIO_Init+0x2c0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d046      	beq.n	80034be <HAL_GPIO_Init+0x10a>
 8003430:	4a90      	ldr	r2, [pc, #576]	; (8003674 <HAL_GPIO_Init+0x2c0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d85d      	bhi.n	80034f2 <HAL_GPIO_Init+0x13e>
 8003436:	2b12      	cmp	r3, #18
 8003438:	d82a      	bhi.n	8003490 <HAL_GPIO_Init+0xdc>
 800343a:	2b12      	cmp	r3, #18
 800343c:	d859      	bhi.n	80034f2 <HAL_GPIO_Init+0x13e>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <HAL_GPIO_Init+0x90>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	080034bf 	.word	0x080034bf
 8003448:	08003499 	.word	0x08003499
 800344c:	080034ab 	.word	0x080034ab
 8003450:	080034ed 	.word	0x080034ed
 8003454:	080034f3 	.word	0x080034f3
 8003458:	080034f3 	.word	0x080034f3
 800345c:	080034f3 	.word	0x080034f3
 8003460:	080034f3 	.word	0x080034f3
 8003464:	080034f3 	.word	0x080034f3
 8003468:	080034f3 	.word	0x080034f3
 800346c:	080034f3 	.word	0x080034f3
 8003470:	080034f3 	.word	0x080034f3
 8003474:	080034f3 	.word	0x080034f3
 8003478:	080034f3 	.word	0x080034f3
 800347c:	080034f3 	.word	0x080034f3
 8003480:	080034f3 	.word	0x080034f3
 8003484:	080034f3 	.word	0x080034f3
 8003488:	080034a1 	.word	0x080034a1
 800348c:	080034b5 	.word	0x080034b5
 8003490:	4a79      	ldr	r2, [pc, #484]	; (8003678 <HAL_GPIO_Init+0x2c4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x10a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8003496:	e02c      	b.n	80034f2 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	623b      	str	r3, [r7, #32]
          break;
 800349e:	e029      	b.n	80034f4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	3304      	adds	r3, #4
 80034a6:	623b      	str	r3, [r7, #32]
          break;
 80034a8:	e024      	b.n	80034f4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	3308      	adds	r3, #8
 80034b0:	623b      	str	r3, [r7, #32]
          break;
 80034b2:	e01f      	b.n	80034f4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	330c      	adds	r3, #12
 80034ba:	623b      	str	r3, [r7, #32]
          break;
 80034bc:	e01a      	b.n	80034f4 <HAL_GPIO_Init+0x140>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034c6:	2304      	movs	r3, #4
 80034c8:	623b      	str	r3, [r7, #32]
          break; 
 80034ca:	e013      	b.n	80034f4 <HAL_GPIO_Init+0x140>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034d4:	2308      	movs	r3, #8
 80034d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	611a      	str	r2, [r3, #16]
          break; 
 80034de:	e009      	b.n	80034f4 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e0:	2308      	movs	r3, #8
 80034e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	615a      	str	r2, [r3, #20]
          break; 
 80034ea:	e003      	b.n	80034f4 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034ec:	2300      	movs	r3, #0
 80034ee:	623b      	str	r3, [r7, #32]
          break;
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x140>
          break;
 80034f2:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2bff      	cmp	r3, #255	; 0xff
 80034f8:	d801      	bhi.n	80034fe <HAL_GPIO_Init+0x14a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	e001      	b.n	8003502 <HAL_GPIO_Init+0x14e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	d802      	bhi.n	8003510 <HAL_GPIO_Init+0x15c>
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	e002      	b.n	8003516 <HAL_GPIO_Init+0x162>
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	3b08      	subs	r3, #8
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	210f      	movs	r1, #15
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	6a39      	ldr	r1, [r7, #32]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80b1 	beq.w	80036a6 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003544:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_GPIO_Init+0x2c8>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	4a4c      	ldr	r2, [pc, #304]	; (800367c <HAL_GPIO_Init+0x2c8>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6193      	str	r3, [r2, #24]
 8003550:	4b4a      	ldr	r3, [pc, #296]	; (800367c <HAL_GPIO_Init+0x2c8>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800355c:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_GPIO_Init+0x2cc>)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4013      	ands	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a40      	ldr	r2, [pc, #256]	; (8003684 <HAL_GPIO_Init+0x2d0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_GPIO_Init+0x1fc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <HAL_GPIO_Init+0x2d4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <HAL_GPIO_Init+0x1f8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3e      	ldr	r2, [pc, #248]	; (800368c <HAL_GPIO_Init+0x2d8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <HAL_GPIO_Init+0x1f4>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <HAL_GPIO_Init+0x2dc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_GPIO_Init+0x1f0>
 80035a0:	2303      	movs	r3, #3
 80035a2:	e006      	b.n	80035b2 <HAL_GPIO_Init+0x1fe>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e004      	b.n	80035b2 <HAL_GPIO_Init+0x1fe>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e002      	b.n	80035b2 <HAL_GPIO_Init+0x1fe>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_GPIO_Init+0x1fe>
 80035b0:	2300      	movs	r3, #0
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	f002 0203 	and.w	r2, r2, #3
 80035b8:	0092      	lsls	r2, r2, #2
 80035ba:	4093      	lsls	r3, r2
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80035c2:	492f      	ldr	r1, [pc, #188]	; (8003680 <HAL_GPIO_Init+0x2cc>)
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	492c      	ldr	r1, [pc, #176]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	e006      	b.n	80035f8 <HAL_GPIO_Init+0x244>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4928      	ldr	r1, [pc, #160]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4922      	ldr	r1, [pc, #136]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x26c>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	43db      	mvns	r3, r3
 800361a:	491e      	ldr	r1, [pc, #120]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800361c:	4013      	ands	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	4918      	ldr	r1, [pc, #96]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x294>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	43db      	mvns	r3, r3
 8003642:	4914      	ldr	r1, [pc, #80]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003644:	4013      	ands	r3, r2
 8003646:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d021      	beq.n	8003698 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_GPIO_Init+0x2e0>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
 8003660:	e021      	b.n	80036a6 <HAL_GPIO_Init+0x2f2>
 8003662:	bf00      	nop
 8003664:	10320000 	.word	0x10320000
 8003668:	10310000 	.word	0x10310000
 800366c:	10220000 	.word	0x10220000
 8003670:	10210000 	.word	0x10210000
 8003674:	10120000 	.word	0x10120000
 8003678:	10110000 	.word	0x10110000
 800367c:	40021000 	.word	0x40021000
 8003680:	40010000 	.word	0x40010000
 8003684:	40010800 	.word	0x40010800
 8003688:	40010c00 	.word	0x40010c00
 800368c:	40011000 	.word	0x40011000
 8003690:	40011400 	.word	0x40011400
 8003694:	40010400 	.word	0x40010400
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_GPIO_Init+0x30c>)
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	43db      	mvns	r3, r3
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <HAL_GPIO_Init+0x30c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	3301      	adds	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	f67f ae92 	bls.w	80033d8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	372c      	adds	r7, #44	; 0x2c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40010400 	.word	0x40010400

080036c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e001      	b.n	80036e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
 80036fe:	4613      	mov	r3, r2
 8003700:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003702:	787b      	ldrb	r3, [r7, #1]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003708:	887a      	ldrh	r2, [r7, #2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800370e:	e003      	b.n	8003718 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	041a      	lsls	r2, r3, #16
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	611a      	str	r2, [r3, #16]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
	...

08003724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d006      	beq.n	8003748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	4618      	mov	r0, r3
 8003744:	f002 fde6 	bl	8006314 <HAL_GPIO_EXTI_Callback>
  }
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40010400 	.word	0x40010400

08003754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8087 	beq.w	800387c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800376e:	4b92      	ldr	r3, [pc, #584]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b04      	cmp	r3, #4
 8003778:	d00c      	beq.n	8003794 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800377a:	4b8f      	ldr	r3, [pc, #572]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b08      	cmp	r3, #8
 8003784:	d112      	bne.n	80037ac <HAL_RCC_OscConfig+0x58>
 8003786:	4b8c      	ldr	r3, [pc, #560]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003792:	d10b      	bne.n	80037ac <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d06c      	beq.n	800387a <HAL_RCC_OscConfig+0x126>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d168      	bne.n	800387a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e22d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b4:	d106      	bne.n	80037c4 <HAL_RCC_OscConfig+0x70>
 80037b6:	4b80      	ldr	r3, [pc, #512]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7f      	ldr	r2, [pc, #508]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e02e      	b.n	8003822 <HAL_RCC_OscConfig+0xce>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCC_OscConfig+0x92>
 80037cc:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b77      	ldr	r3, [pc, #476]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a76      	ldr	r2, [pc, #472]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e01d      	b.n	8003822 <HAL_RCC_OscConfig+0xce>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ee:	d10c      	bne.n	800380a <HAL_RCC_OscConfig+0xb6>
 80037f0:	4b71      	ldr	r3, [pc, #452]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a70      	ldr	r2, [pc, #448]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b6e      	ldr	r3, [pc, #440]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6d      	ldr	r2, [pc, #436]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0xce>
 800380a:	4b6b      	ldr	r3, [pc, #428]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b68      	ldr	r3, [pc, #416]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a67      	ldr	r2, [pc, #412]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 800381c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003820:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fd fd55 	bl	80012d8 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003832:	f7fd fd51 	bl	80012d8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e1e1      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003844:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0xde>
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd fd41 	bl	80012d8 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385a:	f7fd fd3d 	bl	80012d8 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	; 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1cd      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386c:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x106>
 8003878:	e000      	b.n	800387c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d063      	beq.n	8003950 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003894:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d11c      	bne.n	80038da <HAL_RCC_OscConfig+0x186>
 80038a0:	4b45      	ldr	r3, [pc, #276]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_OscConfig+0x170>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e1a1      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4939      	ldr	r1, [pc, #228]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d8:	e03a      	b.n	8003950 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_RCC_OscConfig+0x268>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fd fcf6 	bl	80012d8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f0:	f7fd fcf2 	bl	80012d8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e182      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4926      	ldr	r1, [pc, #152]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
 8003922:	e015      	b.n	8003950 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_RCC_OscConfig+0x268>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fd fcd5 	bl	80012d8 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003932:	f7fd fcd1 	bl	80012d8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e161      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d039      	beq.n	80039d0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d019      	beq.n	8003998 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fd fcb5 	bl	80012d8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003972:	f7fd fcb1 	bl	80012d8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e141      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_RCC_OscConfig+0x264>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003990:	2001      	movs	r0, #1
 8003992:	f000 fac7 	bl	8003f24 <RCC_Delay>
 8003996:	e01b      	b.n	80039d0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_OscConfig+0x26c>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fd fc9b 	bl	80012d8 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	e00e      	b.n	80039c4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fd fc97 	bl	80012d8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d907      	bls.n	80039c4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e127      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
 80039b8:	40021000 	.word	0x40021000
 80039bc:	42420000 	.word	0x42420000
 80039c0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	4b92      	ldr	r3, [pc, #584]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ea      	bne.n	80039a6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a6 	beq.w	8003b2a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e2:	4b8b      	ldr	r3, [pc, #556]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	4b88      	ldr	r3, [pc, #544]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4a87      	ldr	r2, [pc, #540]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	61d3      	str	r3, [r2, #28]
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b82      	ldr	r3, [pc, #520]	; (8003c14 <HAL_RCC_OscConfig+0x4c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d118      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <HAL_RCC_OscConfig+0x4c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x4c0>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fd fc59 	bl	80012d8 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2a:	f7fd fc55 	bl	80012d8 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	; 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e0e5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b75      	ldr	r3, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x4c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x30a>
 8003a50:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	e02d      	b.n	8003aba <HAL_RCC_OscConfig+0x366>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x32c>
 8003a66:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	e01c      	b.n	8003aba <HAL_RCC_OscConfig+0x366>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x34e>
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4a60      	ldr	r2, [pc, #384]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6213      	str	r3, [r2, #32]
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6213      	str	r3, [r2, #32]
 8003aa0:	e00b      	b.n	8003aba <HAL_RCC_OscConfig+0x366>
 8003aa2:	4b5b      	ldr	r3, [pc, #364]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	6213      	str	r3, [r2, #32]
 8003aae:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4a57      	ldr	r2, [pc, #348]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac2:	f7fd fc09 	bl	80012d8 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fc05 	bl	80012d8 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e093      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ee      	beq.n	8003aca <HAL_RCC_OscConfig+0x376>
 8003aec:	e014      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fbf3 	bl	80012d8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd fbef 	bl	80012d8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e07d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ee      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4b3c      	ldr	r3, [pc, #240]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a3b      	ldr	r2, [pc, #236]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d069      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d061      	beq.n	8003c02 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d146      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fbc4 	bl	80012d8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fbc0 	bl	80012d8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e050      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7a:	d108      	bne.n	8003b8e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4921      	ldr	r1, [pc, #132]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a19      	ldr	r1, [r3, #32]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	491b      	ldr	r1, [pc, #108]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fd fb94 	bl	80012d8 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fd fb90 	bl	80012d8 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e020      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x460>
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fb7d 	bl	80012d8 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fd fb79 	bl	80012d8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e009      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x48e>
 8003c00:	e001      	b.n	8003c06 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
 8003c18:	42420060 	.word	0x42420060

08003c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c2a:	4b72      	ldr	r3, [pc, #456]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d910      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c38:	4b6e      	ldr	r3, [pc, #440]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 0207 	bic.w	r2, r3, #7
 8003c40:	496c      	ldr	r1, [pc, #432]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0c8      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c66:	4b64      	ldr	r3, [pc, #400]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4961      	ldr	r1, [pc, #388]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d06a      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8c:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0a7      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	4b54      	ldr	r3, [pc, #336]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e09b      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e093      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc4:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 0203 	bic.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4949      	ldr	r1, [pc, #292]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd6:	f7fd faff 	bl	80012d8 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d112      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce6:	f7fd faf7 	bl	80012d8 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e077      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cfc:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d1ee      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xca>
 8003d08:	e027      	b.n	8003d5a <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d11d      	bne.n	8003d4e <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fae0 	bl	80012d8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e060      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2a:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d1ee      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
 8003d36:	e010      	b.n	8003d5a <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d38:	f7fd face 	bl	80012d8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e04e      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ee      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d210      	bcs.n	8003d8a <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 0207 	bic.w	r2, r3, #7
 8003d70:	4920      	ldr	r1, [pc, #128]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_ClockConfig+0x1d8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e030      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	4915      	ldr	r1, [pc, #84]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	490d      	ldr	r1, [pc, #52]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dc8:	f000 f81c 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_RCC_ClockConfig+0x1dc>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	4908      	ldr	r1, [pc, #32]	; (8003dfc <HAL_RCC_ClockConfig+0x1e0>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8003de0:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <HAL_RCC_ClockConfig+0x1e4>)
 8003de2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7fd fa4d 	bl	8001284 <HAL_InitTick>
  
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40022000 	.word	0x40022000
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08007618 	.word	0x08007618
 8003e00:	20000040 	.word	0x20000040

08003e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b490      	push	{r4, r7}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e0a:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e0c:	1d3c      	adds	r4, r7, #4
 8003e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e14:	f240 2301 	movw	r3, #513	; 0x201
 8003e18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x40>
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x46>
 8003e42:	e02b      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e44:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e46:	623b      	str	r3, [r7, #32]
      break;
 8003e48:	e02b      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	0c9b      	lsrs	r3, r3, #18
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3328      	adds	r3, #40	; 0x28
 8003e54:	443b      	add	r3, r7
 8003e56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d012      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	0c5b      	lsrs	r3, r3, #17
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	3328      	adds	r3, #40	; 0x28
 8003e72:	443b      	add	r3, r7
 8003e74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e78:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8003e7a:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8a:	e004      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	623b      	str	r3, [r7, #32]
      break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e9e:	623b      	str	r3, [r7, #32]
      break;
 8003ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc90      	pop	{r4, r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	080075b0 	.word	0x080075b0
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	007a1200 	.word	0x007a1200
 8003ebc:	003d0900 	.word	0x003d0900

08003ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	20000040 	.word	0x20000040

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ed8:	f7ff fff2 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08007628 	.word	0x08007628

08003efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f00:	f7ff ffde 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	0adb      	lsrs	r3, r3, #11
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4903      	ldr	r1, [pc, #12]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	08007628 	.word	0x08007628

08003f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <RCC_Delay+0x38>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <RCC_Delay+0x3c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a5b      	lsrs	r3, r3, #9
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003f40:	bf00      	nop
}
 8003f42:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e5a      	subs	r2, r3, #1
 8003f48:	60fa      	str	r2, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f8      	bne.n	8003f40 <RCC_Delay+0x1c>
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000040 	.word	0x20000040
 8003f60:	10624dd3 	.word	0x10624dd3

08003f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d07d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f80:	2300      	movs	r3, #0
 8003f82:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f84:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10d      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f90:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4a4b      	ldr	r2, [pc, #300]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	61d3      	str	r3, [r2, #28]
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d118      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f988 	bl	80012d8 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	e008      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fd f984 	bl	80012d8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e06d      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02e      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d027      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004012:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004018:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800401e:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d014      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fd f953 	bl	80012d8 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	e00a      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fd f94f 	bl	80012d8 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e036      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ee      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4917      	ldr	r1, [pc, #92]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	4313      	orrs	r3, r2
 8004068:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	490b      	ldr	r1, [pc, #44]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	4904      	ldr	r1, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
 80040cc:	42420440 	.word	0x42420440

080040d0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e01d      	b.n	800411e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f002 ffee 	bl	80070d8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f000 fcb4 	bl	8004a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e01d      	b.n	8004174 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f002 ffa5 	bl	800709c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f000 fc89 	bl	8004a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	6839      	ldr	r1, [r7, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f001 f83c 	bl	800520c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <HAL_TIM_PWM_Start+0x4c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d107      	bne.n	80041ae <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40012c00 	.word	0x40012c00

080041cc <HAL_TIM_IC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e01d      	b.n	800421a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f815 	bl	8004222 <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fc36 	bl	8004a7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d841      	bhi.n	80042c8 <HAL_TIM_IC_Start_IT+0x94>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <HAL_TIM_IC_Start_IT+0x18>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	08004281 	.word	0x08004281
 8004250:	080042c9 	.word	0x080042c9
 8004254:	080042c9 	.word	0x080042c9
 8004258:	080042c9 	.word	0x080042c9
 800425c:	08004293 	.word	0x08004293
 8004260:	080042c9 	.word	0x080042c9
 8004264:	080042c9 	.word	0x080042c9
 8004268:	080042c9 	.word	0x080042c9
 800426c:	080042a5 	.word	0x080042a5
 8004270:	080042c9 	.word	0x080042c9
 8004274:	080042c9 	.word	0x080042c9
 8004278:	080042c9 	.word	0x080042c9
 800427c:	080042b7 	.word	0x080042b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0202 	orr.w	r2, r2, #2
 800428e:	60da      	str	r2, [r3, #12]
    }
    break;
 8004290:	e01b      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0204 	orr.w	r2, r2, #4
 80042a0:	60da      	str	r2, [r3, #12]
    }
    break;
 80042a2:	e012      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0208 	orr.w	r2, r2, #8
 80042b2:	60da      	str	r2, [r3, #12]
    }
    break;
 80042b4:	e009      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0210 	orr.w	r2, r2, #16
 80042c4:	60da      	str	r2, [r3, #12]
    }
    break;
 80042c6:	e000      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x96>

    default:
    break;
 80042c8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 ff9a 	bl	800520c <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop

080042f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0202 	mvn.w	r2, #2
 8004320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 ff98 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fb80 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb86 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0204 	mvn.w	r2, #4
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 ff6e 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fb56 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fb5c 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0208 	mvn.w	r2, #8
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 ff44 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fb2c 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb32 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b10      	cmp	r3, #16
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0210 	mvn.w	r2, #16
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2208      	movs	r2, #8
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f001 ff1a 	bl	800626c <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fb02 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fb08 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0201 	mvn.w	r2, #1
 8004470:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f001 fed0 	bl	8006218 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800449c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ff9c 	bl	80053dc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 facc 	bl	8004a68 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0220 	mvn.w	r2, #32
 80044f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 ff67 	bl	80053ca <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_TIM_IC_ConfigChannel+0x1a>
 800451a:	2302      	movs	r3, #2
 800451c:	e08a      	b.n	8004634 <HAL_TIM_IC_ConfigChannel+0x130>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f000 fca0 	bl	8004e88 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 020c 	bic.w	r2, r2, #12
 8004556:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
 800456a:	e05a      	b.n	8004622 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b04      	cmp	r3, #4
 8004570:	d11c      	bne.n	80045ac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f000 fd11 	bl	8004fa8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004594:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6999      	ldr	r1, [r3, #24]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	021a      	lsls	r2, r3, #8
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
 80045aa:	e03a      	b.n	8004622 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d11b      	bne.n	80045ea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f000 fd64 	bl	800508e <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 020c 	bic.w	r2, r2, #12
 80045d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
 80045e8:	e01b      	b.n	8004622 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f000 fd87 	bl	800510c <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800460c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004652:	2302      	movs	r3, #2
 8004654:	e0b4      	b.n	80047c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b0c      	cmp	r3, #12
 800466a:	f200 809f 	bhi.w	80047ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	080046a9 	.word	0x080046a9
 8004678:	080047ad 	.word	0x080047ad
 800467c:	080047ad 	.word	0x080047ad
 8004680:	080047ad 	.word	0x080047ad
 8004684:	080046e9 	.word	0x080046e9
 8004688:	080047ad 	.word	0x080047ad
 800468c:	080047ad 	.word	0x080047ad
 8004690:	080047ad 	.word	0x080047ad
 8004694:	0800472b 	.word	0x0800472b
 8004698:	080047ad 	.word	0x080047ad
 800469c:	080047ad 	.word	0x080047ad
 80046a0:	080047ad 	.word	0x080047ad
 80046a4:	0800476b 	.word	0x0800476b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fa4a 	bl	8004b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0208 	orr.w	r2, r2, #8
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0204 	bic.w	r2, r2, #4
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	619a      	str	r2, [r3, #24]
    }
    break;
 80046e6:	e062      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fa96 	bl	8004c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6999      	ldr	r1, [r3, #24]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	619a      	str	r2, [r3, #24]
    }
    break;
 8004728:	e041      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fae5 	bl	8004d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0208 	orr.w	r2, r2, #8
 8004744:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0204 	bic.w	r2, r2, #4
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	61da      	str	r2, [r3, #28]
    }
    break;
 8004768:	e021      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb35 	bl	8004de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004784:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	021a      	lsls	r2, r3, #8
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	61da      	str	r2, [r3, #28]
    }
    break;
 80047aa:	e000      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80047ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e0d8      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x1ce>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481c:	d052      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0xfc>
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	f200 80ae 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	d027      	beq.n	800487c <HAL_TIM_ConfigClockSource+0xb4>
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	f200 80a7 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 8004834:	2b70      	cmp	r3, #112	; 0x70
 8004836:	d02a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xc6>
 8004838:	2b70      	cmp	r3, #112	; 0x70
 800483a:	f200 80a2 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 800483e:	2b60      	cmp	r3, #96	; 0x60
 8004840:	d063      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x142>
 8004842:	2b60      	cmp	r3, #96	; 0x60
 8004844:	f200 809d 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 8004848:	2b50      	cmp	r3, #80	; 0x50
 800484a:	d04e      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x122>
 800484c:	2b50      	cmp	r3, #80	; 0x50
 800484e:	f200 8098 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d069      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x162>
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	f200 8093 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 800485c:	2b30      	cmp	r3, #48	; 0x30
 800485e:	f000 8089 	beq.w	8004974 <HAL_TIM_ConfigClockSource+0x1ac>
 8004862:	2b30      	cmp	r3, #48	; 0x30
 8004864:	f200 808d 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d07c      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x19e>
 800486c:	2b20      	cmp	r3, #32
 800486e:	f200 8088 	bhi.w	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d069      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x182>
 8004876:	2b10      	cmp	r3, #16
 8004878:	d06e      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800487a:	e082      	b.n	8004982 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0207 	bic.w	r2, r2, #7
 800488a:	609a      	str	r2, [r3, #8]
    break;
 800488c:	e07a      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f000 fc94 	bl	80051ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	609a      	str	r2, [r3, #8]
    break;
 80048c2:	e05f      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6899      	ldr	r1, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f000 fc79 	bl	80051ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e6:	609a      	str	r2, [r3, #8]
    break;
 80048e8:	e04c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 fb24 	bl	8004f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2150      	movs	r1, #80	; 0x50
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fc42 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004908:	e03c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	461a      	mov	r2, r3
 8004918:	f000 fb86 	bl	8005028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2160      	movs	r1, #96	; 0x60
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fc32 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004928:	e02c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	461a      	mov	r2, r3
 8004938:	f000 fb04 	bl	8004f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2140      	movs	r1, #64	; 0x40
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fc22 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004948:	e01c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fc1b 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004956:	e015      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2110      	movs	r1, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc14 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004964:	e00e      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2120      	movs	r1, #32
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fc0d 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004972:	e007      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2130      	movs	r1, #48	; 0x30
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fc06 	bl	800518c <TIM_ITRx_SetConfig>
    break;
 8004980:	e000      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8004982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3 : TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4 : TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIM_ReadCapturedValue+0x1c>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e03d      	b.n	8004a38 <HAL_TIM_ReadCapturedValue+0x98>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d830      	bhi.n	8004a2c <HAL_TIM_ReadCapturedValue+0x8c>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_TIM_ReadCapturedValue+0x30>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a2d 	.word	0x08004a2d
 80049e8:	08004a2d 	.word	0x08004a2d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a2d 	.word	0x08004a2d
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a23 	.word	0x08004a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	60fb      	str	r3, [r7, #12]

      break;
 8004a0c:	e00f      	b.n	8004a2e <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	60fb      	str	r3, [r7, #12]

      break;
 8004a16:	e00a      	b.n	8004a2e <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	60fb      	str	r3, [r7, #12]

      break;
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	60fb      	str	r3, [r7, #12]

      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_ReadCapturedValue+0x8e>
    }

  default:
    break;
 8004a2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmpreg;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr
	...

08004a7c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <TIM_Base_SetConfig+0xc0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <TIM_Base_SetConfig+0x34>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9e:	d007      	beq.n	8004ab0 <TIM_Base_SetConfig+0x34>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <TIM_Base_SetConfig+0xc4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_Base_SetConfig+0x34>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <TIM_Base_SetConfig+0xc8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <TIM_Base_SetConfig+0xc0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0x66>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0x66>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <TIM_Base_SetConfig+0xc4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0x66>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <TIM_Base_SetConfig+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <TIM_Base_SetConfig+0xc0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800

08004b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 0302 	bic.w	r3, r3, #2
 8004b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_OC1_SetConfig+0xd4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <TIM_OC1_SetConfig+0xd4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00

08004c20 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f023 0210 	bic.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0320 	bic.w	r3, r3, #32
 8004c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <TIM_OC2_SetConfig+0xdc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d10d      	bne.n	8004ca8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca6:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <TIM_OC2_SetConfig+0xdc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d113      	bne.n	8004cd8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	40012c00 	.word	0x40012c00

08004d00 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <TIM_OC3_SetConfig+0xdc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10d      	bne.n	8004d86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d84:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <TIM_OC3_SetConfig+0xdc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d113      	bne.n	8004db6 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	621a      	str	r2, [r3, #32]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00

08004de0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e22:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a0f      	ldr	r2, [pc, #60]	; (8004e84 <TIM_OC4_SetConfig+0xa4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d109      	bne.n	8004e60 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	019b      	lsls	r3, r3, #6
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr
 8004e84:	40012c00 	.word	0x40012c00

08004e88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0201 	bic.w	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <TIM_TI1_SetConfig+0xb0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x4e>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d007      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x4e>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <TIM_TI1_SetConfig+0xb4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x4e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <TIM_TI1_SetConfig+0xb8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <TIM_TI1_SetConfig+0x52>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <TIM_TI1_SetConfig+0x54>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e003      	b.n	8004efa <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f023 030a 	bic.w	r3, r3, #10
 8004f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f003 030a 	and.w	r3, r3, #10
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800

08004f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f023 030a 	bic.w	r3, r3, #10
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0210 	bic.w	r2, r3, #16
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	031b      	lsls	r3, r3, #12
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005002:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f023 0210 	bic.w	r2, r3, #16
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800505a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	031b      	lsls	r3, r3, #12
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800506c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800508e:	b480      	push	{r7}
 8005090:	b087      	sub	sp, #28
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005152:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	031b      	lsls	r3, r3, #12
 8005158:	b29b      	uxth	r3, r3
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~TIM_CCER_CC4P;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005166:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	031b      	lsls	r3, r3, #12
 800516c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	621a      	str	r2, [r3, #32]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	f043 0307 	orr.w	r3, r3, #7
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	609a      	str	r2, [r3, #8]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800521c:	2201      	movs	r2, #1
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	43db      	mvns	r3, r3
 800522e:	401a      	ands	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	431a      	orrs	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2204      	movs	r2, #4
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f8c3 	bl	80053ee <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005276:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e044      	b.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005356:	2302      	movs	r3, #2
 8005358:	e032      	b.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005378:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800539a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <TIM_CCxNChannelCmd>:
  * @param  ChannelNState : specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 80053fe:	2204      	movs	r2, #4
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	43db      	mvns	r3, r3
 8005410:	401a      	ands	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	431a      	orrs	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e03f      	b.n	80054c4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 ff7b 	bl	8007354 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2224      	movs	r2, #36	; 0x24
 8005462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005474:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f828 	bl	80054cc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800548a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800549a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054aa:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800550e:	f023 030c 	bic.w	r3, r3, #12
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	430b      	orrs	r3, r1
 800551a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a6f      	ldr	r2, [pc, #444]	; (80056f4 <UART_SetConfig+0x228>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d16b      	bne.n	8005614 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800553c:	f7fe fcde 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8005540:	4602      	mov	r2, r0
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009a      	lsls	r2, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	4a68      	ldr	r2, [pc, #416]	; (80056f8 <UART_SetConfig+0x22c>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	011c      	lsls	r4, r3, #4
 8005560:	f7fe fccc 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 8005564:	4602      	mov	r2, r0
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009a      	lsls	r2, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	fbb2 f5f3 	udiv	r5, r2, r3
 800557a:	f7fe fcbf 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 800557e:	4602      	mov	r2, r0
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009a      	lsls	r2, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	4a58      	ldr	r2, [pc, #352]	; (80056f8 <UART_SetConfig+0x22c>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2264      	movs	r2, #100	; 0x64
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	1aeb      	subs	r3, r5, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a53      	ldr	r2, [pc, #332]	; (80056f8 <UART_SetConfig+0x22c>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b4:	441c      	add	r4, r3
 80055b6:	f7fe fca1 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009a      	lsls	r2, r3, #2
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80055d0:	f7fe fc94 	bl	8003efc <HAL_RCC_GetPCLK2Freq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009a      	lsls	r2, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	4a43      	ldr	r2, [pc, #268]	; (80056f8 <UART_SetConfig+0x22c>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	2264      	movs	r2, #100	; 0x64
 80055f4:	fb02 f303 	mul.w	r3, r2, r3
 80055f8:	1aeb      	subs	r3, r5, r3
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	3332      	adds	r3, #50	; 0x32
 80055fe:	4a3e      	ldr	r2, [pc, #248]	; (80056f8 <UART_SetConfig+0x22c>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f003 020f 	and.w	r2, r3, #15
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4422      	add	r2, r4
 8005610:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005612:	e06a      	b.n	80056ea <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005614:	f7fe fc5e 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8005618:	4602      	mov	r2, r0
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009a      	lsls	r2, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	4a32      	ldr	r2, [pc, #200]	; (80056f8 <UART_SetConfig+0x22c>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	011c      	lsls	r4, r3, #4
 8005638:	f7fe fc4c 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 800563c:	4602      	mov	r2, r0
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009a      	lsls	r2, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005652:	f7fe fc3f 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8005656:	4602      	mov	r2, r0
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009a      	lsls	r2, r3, #2
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <UART_SetConfig+0x22c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2264      	movs	r2, #100	; 0x64
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	1aeb      	subs	r3, r5, r3
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	3332      	adds	r3, #50	; 0x32
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <UART_SetConfig+0x22c>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800568c:	441c      	add	r4, r3
 800568e:	f7fe fc21 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 8005692:	4602      	mov	r2, r0
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009a      	lsls	r2, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80056a8:	f7fe fc14 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009a      	lsls	r2, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	4a0d      	ldr	r2, [pc, #52]	; (80056f8 <UART_SetConfig+0x22c>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	2264      	movs	r2, #100	; 0x64
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	1aeb      	subs	r3, r5, r3
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	3332      	adds	r3, #50	; 0x32
 80056d6:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <UART_SetConfig+0x22c>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4422      	add	r2, r4
 80056e8:	609a      	str	r2, [r3, #8]
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40013800 	.word	0x40013800
 80056f8:	51eb851f 	.word	0x51eb851f

080056fc <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e016      	b.n	8005738 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005710:	3301      	adds	r3, #1
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d20b      	bcs.n	8005732 <GetPage+0x36>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d304      	bcc.n	8005732 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800572e:	029b      	lsls	r3, r3, #10
 8005730:	e006      	b.n	8005740 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	dde5      	ble.n	800570a <GetPage+0xe>
	  }
  }

  return 0;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <float2Bytes>:

uint8_t bytes_temp[4];


void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e00b      	b.n	8005776 <float2Bytes+0x2c>
      ftoa_bytes_temp[i] = thing.bytes[i];
 800575e:	7bfa      	ldrb	r2, [r7, #15]
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	440b      	add	r3, r1
 8005766:	3210      	adds	r2, #16
 8005768:	443a      	add	r2, r7
 800576a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800576e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	3301      	adds	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d9f0      	bls.n	800575e <float2Bytes+0x14>
    }

}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8005790:	2300      	movs	r3, #0
 8005792:	75fb      	strb	r3, [r7, #23]
 8005794:	e00b      	b.n	80057ae <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	441a      	add	r2, r3
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	3318      	adds	r3, #24
 80057a2:	443b      	add	r3, r7
 80057a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	3301      	adds	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d9f0      	bls.n	8005796 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	613b      	str	r3, [r7, #16]
   return float_variable;
 80057b8:	693b      	ldr	r3, [r7, #16]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80057c4:	b5b0      	push	{r4, r5, r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80057d6:	f7fd fc5d 	bl	8003094 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff ff8e 	bl	80056fc <GetPage>
 80057e0:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	461a      	mov	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80057ee:	69f8      	ldr	r0, [r7, #28]
 80057f0:	f7ff ff84 	bl	80056fc <GetPage>
 80057f4:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <Flash_Write_Data+0xb4>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80057fc:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <Flash_Write_Data+0xb4>)
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	0a9b      	lsrs	r3, r3, #10
 800580a:	3301      	adds	r3, #1
 800580c:	4a1a      	ldr	r2, [pc, #104]	; (8005878 <Flash_Write_Data+0xb4>)
 800580e:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	4619      	mov	r1, r3
 8005816:	4818      	ldr	r0, [pc, #96]	; (8005878 <Flash_Write_Data+0xb4>)
 8005818:	f7fd fd24 	bl	8003264 <HAL_FLASHEx_Erase>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01f      	beq.n	8005862 <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8005822:	f7fd fc63 	bl	80030ec <HAL_FLASH_GetError>
 8005826:	4603      	mov	r3, r0
 8005828:	e022      	b.n	8005870 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	461c      	mov	r4, r3
 8005838:	4615      	mov	r5, r2
 800583a:	4622      	mov	r2, r4
 800583c:	462b      	mov	r3, r5
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	2002      	movs	r0, #2
 8005842:	f7fd fbb7 	bl	8002fb4 <HAL_FLASH_Program>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3304      	adds	r3, #4
 8005850:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	3301      	adds	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e003      	b.n	8005862 <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800585a:	f7fd fc47 	bl	80030ec <HAL_FLASH_GetError>
 800585e:	4603      	mov	r3, r0
 8005860:	e006      	b.n	8005870 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005866:	429a      	cmp	r2, r3
 8005868:	dbdf      	blt.n	800582a <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800586a:	f7fd fc2f 	bl	80030cc <HAL_FLASH_Lock>

	   return 0;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	; 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	bdb0      	pop	{r4, r5, r7, pc}
 8005878:	2000008c 	.word	0x2000008c

0800587c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3304      	adds	r3, #4
 800589c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	1e5a      	subs	r2, r3, #1
 80058a2:	80fa      	strh	r2, [r7, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d000      	beq.n	80058aa <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80058a8:	e7ef      	b.n	800588a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80058aa:	bf00      	nop
	}
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
	...

080058b8 <Flash_Write_NUM>:
	}
}


void Flash_Write_NUM (uint32_t StartSectorAddress, float Num)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]

	float2Bytes(bytes_temp, Num);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	4805      	ldr	r0, [pc, #20]	; (80058dc <Flash_Write_NUM+0x24>)
 80058c6:	f7ff ff40 	bl	800574a <float2Bytes>

	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
 80058ca:	2201      	movs	r2, #1
 80058cc:	4903      	ldr	r1, [pc, #12]	; (80058dc <Flash_Write_NUM+0x24>)
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff78 	bl	80057c4 <Flash_Write_Data>
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000088 	.word	0x20000088

080058e0 <Flash_Read_NUM>:


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 80058e8:	f107 0308 	add.w	r3, r7, #8
 80058ec:	2201      	movs	r2, #1
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ffc3 	bl	800587c <Flash_Read_Data>
	value = Bytes2float(buffer);
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff44 	bl	8005788 <Bytes2float>
 8005900:	60f8      	str	r0, [r7, #12]
	return value;
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005914:	4a3b      	ldr	r2, [pc, #236]	; (8005a04 <MX_ADC1_Init+0xf8>)
 8005916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005918:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <MX_ADC1_Init+0xf4>)
 800591a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005920:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005922:	2201      	movs	r2, #1
 8005924:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005926:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005928:	2200      	movs	r2, #0
 800592a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <MX_ADC1_Init+0xf4>)
 800592e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005932:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005934:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005936:	2200      	movs	r2, #0
 8005938:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 800593a:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <MX_ADC1_Init+0xf4>)
 800593c:	2205      	movs	r2, #5
 800593e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005940:	482f      	ldr	r0, [pc, #188]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005942:	f7fb fcf1 	bl	8001328 <HAL_ADC_Init>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 800594c:	2145      	movs	r1, #69	; 0x45
 800594e:	482e      	ldr	r0, [pc, #184]	; (8005a08 <MX_ADC1_Init+0xfc>)
 8005950:	f000 ffc6 	bl	80068e0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8005954:	2300      	movs	r3, #0
 8005956:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005958:	2301      	movs	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4826      	ldr	r0, [pc, #152]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005966:	f7fb feb1 	bl	80016cc <HAL_ADC_ConfigChannel>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005970:	214f      	movs	r1, #79	; 0x4f
 8005972:	4825      	ldr	r0, [pc, #148]	; (8005a08 <MX_ADC1_Init+0xfc>)
 8005974:	f000 ffb4 	bl	80068e0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8005978:	2301      	movs	r3, #1
 800597a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800597c:	2302      	movs	r3, #2
 800597e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	4619      	mov	r1, r3
 8005984:	481e      	ldr	r0, [pc, #120]	; (8005a00 <MX_ADC1_Init+0xf4>)
 8005986:	f7fb fea1 	bl	80016cc <HAL_ADC_ConfigChannel>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005990:	2158      	movs	r1, #88	; 0x58
 8005992:	481d      	ldr	r0, [pc, #116]	; (8005a08 <MX_ADC1_Init+0xfc>)
 8005994:	f000 ffa4 	bl	80068e0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8005998:	2304      	movs	r3, #4
 800599a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800599c:	2303      	movs	r3, #3
 800599e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4816      	ldr	r0, [pc, #88]	; (8005a00 <MX_ADC1_Init+0xf4>)
 80059a6:	f7fb fe91 	bl	80016cc <HAL_ADC_ConfigChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <MX_ADC1_Init+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059b0:	2161      	movs	r1, #97	; 0x61
 80059b2:	4815      	ldr	r0, [pc, #84]	; (8005a08 <MX_ADC1_Init+0xfc>)
 80059b4:	f000 ff94 	bl	80068e0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 80059b8:	2305      	movs	r3, #5
 80059ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80059bc:	2304      	movs	r3, #4
 80059be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	480e      	ldr	r0, [pc, #56]	; (8005a00 <MX_ADC1_Init+0xf4>)
 80059c6:	f7fb fe81 	bl	80016cc <HAL_ADC_ConfigChannel>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <MX_ADC1_Init+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059d0:	216a      	movs	r1, #106	; 0x6a
 80059d2:	480d      	ldr	r0, [pc, #52]	; (8005a08 <MX_ADC1_Init+0xfc>)
 80059d4:	f000 ff84 	bl	80068e0 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 80059d8:	230a      	movs	r3, #10
 80059da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80059dc:	2305      	movs	r3, #5
 80059de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4806      	ldr	r0, [pc, #24]	; (8005a00 <MX_ADC1_Init+0xf4>)
 80059e6:	f7fb fe71 	bl	80016cc <HAL_ADC_ConfigChannel>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <MX_ADC1_Init+0xec>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059f0:	2173      	movs	r1, #115	; 0x73
 80059f2:	4805      	ldr	r0, [pc, #20]	; (8005a08 <MX_ADC1_Init+0xfc>)
 80059f4:	f000 ff74 	bl	80068e0 <_Error_Handler>
  }

}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	2000009c 	.word	0x2000009c
 8005a04:	40012400 	.word	0x40012400
 8005a08:	080075c0 	.word	0x080075c0

08005a0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a28      	ldr	r2, [pc, #160]	; (8005abc <HAL_ADC_MspInit+0xb0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d149      	bne.n	8005ab2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a1e:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <HAL_ADC_MspInit+0xb4>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <HAL_ADC_MspInit+0xb4>)
 8005a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a28:	6193      	str	r3, [r2, #24]
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <HAL_ADC_MspInit+0xb4>)
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a36:	2301      	movs	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a3e:	f107 0310 	add.w	r3, r7, #16
 8005a42:	4619      	mov	r1, r3
 8005a44:	481f      	ldr	r0, [pc, #124]	; (8005ac4 <HAL_ADC_MspInit+0xb8>)
 8005a46:	f7fd fcb5 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005a4a:	2333      	movs	r3, #51	; 0x33
 8005a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	4619      	mov	r1, r3
 8005a58:	481b      	ldr	r0, [pc, #108]	; (8005ac8 <HAL_ADC_MspInit+0xbc>)
 8005a5a:	f7fd fcab 	bl	80033b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a60:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <HAL_ADC_MspInit+0xc4>)
 8005a62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a88:	2220      	movs	r2, #32
 8005a8a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005a92:	480e      	ldr	r0, [pc, #56]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005a94:	f7fd f894 	bl	8002bc0 <HAL_DMA_Init>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8005a9e:	219f      	movs	r1, #159	; 0x9f
 8005aa0:	480c      	ldr	r0, [pc, #48]	; (8005ad4 <HAL_ADC_MspInit+0xc8>)
 8005aa2:	f000 ff1d 	bl	80068e0 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005aaa:	621a      	str	r2, [r3, #32]
 8005aac:	4a07      	ldr	r2, [pc, #28]	; (8005acc <HAL_ADC_MspInit+0xc0>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40012400 	.word	0x40012400
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40011000 	.word	0x40011000
 8005ac8:	40010800 	.word	0x40010800
 8005acc:	200000cc 	.word	0x200000cc
 8005ad0:	40020008 	.word	0x40020008
 8005ad4:	080075c0 	.word	0x080075c0

08005ad8 <is_blue_button_pressed>:
/* Programs ------------------------------------------------------------------*/

/*
 * Verifie si le user button bleu est appuyé
 */
int is_blue_button_pressed(){
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	return (!HAL_GPIO_ReadPin(GPIOC, pin_blue_user_button));
 8005adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ae0:	4805      	ldr	r0, [pc, #20]	; (8005af8 <is_blue_button_pressed+0x20>)
 8005ae2:	f7fd fdef 	bl	80036c4 <HAL_GPIO_ReadPin>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf0c      	ite	eq
 8005aec:	2301      	moveq	r3, #1
 8005aee:	2300      	movne	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40011000 	.word	0x40011000

08005afc <calibrate>:

/*
 *	Performe la calibration du module de direction (action moteur, recuperation valeur capteur)
 */
void calibrate(void){
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
	int right_ok = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
	int left_ok = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
	int centre_ok = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	float capt_L = 0.0;
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
	float capt_R = 0.0;
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
	float capt_C = 0.0;
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	623b      	str	r3, [r7, #32]

	float coef_a;
	float coef_b;

	car_control(DISABLED, DISABLED, DISABLED);	//Stop the car
 8005b20:	f04f 32ff 	mov.w	r2, #4294967295
 8005b24:	f04f 31ff 	mov.w	r1, #4294967295
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	f000 fa58 	bl	8005fe0 <car_control>

	uint8_t dataCalibration[8] = {CALIBRATION_IN_PROGRESS, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005b30:	4a60      	ldr	r2, [pc, #384]	; (8005cb4 <calibrate+0x1b8>)
 8005b32:	463b      	mov	r3, r7
 8005b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b38:	e883 0003 	stmia.w	r3, {r0, r1}
	CAN_Send(dataCalibration, CAN_ID_CALIBRATION_MODE);	//Indicate that calibration is in progress (to raspberry)
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f986 	bl	8005e54 <CAN_Send>

	if (!right_ok){
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d110      	bne.n	8005b70 <calibrate+0x74>
		right_ok = 1;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	61bb      	str	r3, [r7, #24]
		steering_set_speed(GPIO_PIN_SET, RIGHT_MAX_SPEED_STEERING);
 8005b52:	215a      	movs	r1, #90	; 0x5a
 8005b54:	2001      	movs	r0, #1
 8005b56:	f000 fedb 	bl	8006910 <steering_set_speed>
		HAL_Delay(7000);
 8005b5a:	f641 3058 	movw	r0, #7000	; 0x1b58
 8005b5e:	f7fb fbc5 	bl	80012ec <HAL_Delay>
		capt_R = ADCBUF[1];
 8005b62:	4b55      	ldr	r3, [pc, #340]	; (8005cb8 <calibrate+0x1bc>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fa ffae 	bl	8000ac8 <__aeabi_ui2f>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (!left_ok){
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d110      	bne.n	8005b98 <calibrate+0x9c>
		left_ok = 1;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
		steering_set_speed(GPIO_PIN_SET, LEFT_MAX_SPEED_STEERING);
 8005b7a:	210a      	movs	r1, #10
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f000 fec7 	bl	8006910 <steering_set_speed>
		HAL_Delay(7000);
 8005b82:	f641 3058 	movw	r0, #7000	; 0x1b58
 8005b86:	f7fb fbb1 	bl	80012ec <HAL_Delay>
		capt_L = ADCBUF[1];
 8005b8a:	4b4b      	ldr	r3, [pc, #300]	; (8005cb8 <calibrate+0x1bc>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fa ff9a 	bl	8000ac8 <__aeabi_ui2f>
 8005b94:	4603      	mov	r3, r0
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (!centre_ok){
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d117      	bne.n	8005bce <calibrate+0xd2>
		dataCalibration[1] = CALIBRATION_USER_NEED;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	707b      	strb	r3, [r7, #1]
		CAN_Send(dataCalibration, CAN_ID_CALIBRATION_MODE);	//Indicate that calibration need user action (to raspberry)
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 f953 	bl	8005e54 <CAN_Send>

		while (1){
			steering_move_with_button();
 8005bae:	f000 ff51 	bl	8006a54 <steering_move_with_button>
			if (is_blue_button_pressed()){
 8005bb2:	f7ff ff91 	bl	8005ad8 <is_blue_button_pressed>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f8      	beq.n	8005bae <calibrate+0xb2>
				centre_ok = 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
				capt_C = ADCBUF[1];
 8005bc0:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <calibrate+0x1bc>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fa ff7f 	bl	8000ac8 <__aeabi_ui2f>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	623b      	str	r3, [r7, #32]
			}
		}
	}


	if (centre_ok){
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d06b      	beq.n	8005cac <calibrate+0x1b0>
		int LC = abs(capt_L-capt_C);
 8005bd4:	6a39      	ldr	r1, [r7, #32]
 8005bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd8:	f7fa fec4 	bl	8000964 <__aeabi_fsub>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fb f990 	bl	8000f04 <__aeabi_f2iz>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfb8      	it	lt
 8005bea:	425b      	neglt	r3, r3
 8005bec:	613b      	str	r3, [r7, #16]
		int RC = abs(capt_C-capt_R);
 8005bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bf0:	6a38      	ldr	r0, [r7, #32]
 8005bf2:	f7fa feb7 	bl	8000964 <__aeabi_fsub>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fb f983 	bl	8000f04 <__aeabi_f2iz>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfb8      	it	lt
 8005c04:	425b      	neglt	r3, r3
 8005c06:	60fb      	str	r3, [r7, #12]

		if (LC<RC){
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	da0b      	bge.n	8005c28 <calibrate+0x12c>
			coef_a = (ANGLE_CENTER_VALUE-ANGLE_LEFT_VALUE)/(capt_C-capt_L);
 8005c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c12:	6a38      	ldr	r0, [r7, #32]
 8005c14:	f7fa fea6 	bl	8000964 <__aeabi_fsub>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4827      	ldr	r0, [pc, #156]	; (8005cbc <calibrate+0x1c0>)
 8005c1e:	f7fb f85f 	bl	8000ce0 <__aeabi_fdiv>
 8005c22:	4603      	mov	r3, r0
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	e00a      	b.n	8005c3e <calibrate+0x142>
		}else{
			coef_a = (ANGLE_CENTER_VALUE-ANGLE_RIGHT_VALUE)/(capt_C-capt_R);
 8005c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2a:	6a38      	ldr	r0, [r7, #32]
 8005c2c:	f7fa fe9a 	bl	8000964 <__aeabi_fsub>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4619      	mov	r1, r3
 8005c34:	4822      	ldr	r0, [pc, #136]	; (8005cc0 <calibrate+0x1c4>)
 8005c36:	f7fb f853 	bl	8000ce0 <__aeabi_fdiv>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	61fb      	str	r3, [r7, #28]
		}

		coef_b = ANGLE_CENTER_VALUE - coef_a*capt_C;
 8005c3e:	6a39      	ldr	r1, [r7, #32]
 8005c40:	69f8      	ldr	r0, [r7, #28]
 8005c42:	f7fa ff99 	bl	8000b78 <__aeabi_fmul>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4619      	mov	r1, r3
 8005c4a:	481c      	ldr	r0, [pc, #112]	; (8005cbc <calibrate+0x1c0>)
 8005c4c:	f7fa fe8a 	bl	8000964 <__aeabi_fsub>
 8005c50:	4603      	mov	r3, r0
 8005c52:	60bb      	str	r3, [r7, #8]

		Flash_Write_NUM(STEERING_CALIBRATION_A_ADDR, coef_a);
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	481b      	ldr	r0, [pc, #108]	; (8005cc4 <calibrate+0x1c8>)
 8005c58:	f7ff fe2e 	bl	80058b8 <Flash_Write_NUM>
		Flash_Write_NUM(STEERING_CALIBRATION_B_ADDR, coef_b);
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	481a      	ldr	r0, [pc, #104]	; (8005cc8 <calibrate+0x1cc>)
 8005c60:	f7ff fe2a 	bl	80058b8 <Flash_Write_NUM>


		need_read_calibration = 1;  //Indicate that steering calibration values has changed
 8005c64:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <calibrate+0x1d0>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

		//Ckeck if Flash_write succeeded
		if (Flash_Read_NUM(STEERING_CALIBRATION_A_ADDR) == coef_a
 8005c6a:	4816      	ldr	r0, [pc, #88]	; (8005cc4 <calibrate+0x1c8>)
 8005c6c:	f7ff fe38 	bl	80058e0 <Flash_Read_NUM>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4619      	mov	r1, r3
 8005c74:	69f8      	ldr	r0, [r7, #28]
 8005c76:	f7fb f913 	bl	8000ea0 <__aeabi_fcmpeq>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <calibrate+0x1a0>
			&& Flash_Read_NUM(STEERING_CALIBRATION_B_ADDR) == coef_b)
 8005c80:	4811      	ldr	r0, [pc, #68]	; (8005cc8 <calibrate+0x1cc>)
 8005c82:	f7ff fe2d 	bl	80058e0 <Flash_Read_NUM>
 8005c86:	4603      	mov	r3, r0
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68b8      	ldr	r0, [r7, #8]
 8005c8c:	f7fb f908 	bl	8000ea0 <__aeabi_fcmpeq>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <calibrate+0x1a0>
		{
			dataCalibration[0] = CALIBRATION_SUCCESS;
 8005c96:	2303      	movs	r3, #3
 8005c98:	703b      	strb	r3, [r7, #0]
 8005c9a:	e001      	b.n	8005ca0 <calibrate+0x1a4>

		}else{
			dataCalibration[0] = CALIBRATION_FAIL;
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	703b      	strb	r3, [r7, #0]
		}


		CAN_Send(dataCalibration, CAN_ID_CALIBRATION_MODE);	//Indicate calibration status (success/fail) (to raspberry)
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f8d4 	bl	8005e54 <CAN_Send>

	}

}
 8005cac:	bf00      	nop
 8005cae:	3730      	adds	r7, #48	; 0x30
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	080075d0 	.word	0x080075d0
 8005cb8:	20000158 	.word	0x20000158
 8005cbc:	42c80000 	.word	0x42c80000
 8005cc0:	c2c80000 	.word	0xc2c80000
 8005cc4:	0800a100 	.word	0x0800a100
 8005cc8:	0800b100 	.word	0x0800b100
 8005ccc:	2000003c 	.word	0x2000003c

08005cd0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <MX_CAN_Init+0x80>)
 8005cd8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005cdc:	2208      	movs	r2, #8
 8005cde:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8005ce6:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	60da      	str	r2, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_7TQ;
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005cee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8005cf2:	611a      	str	r2, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_2TQ;
 8005cf4:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005cf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cfa:	615a      	str	r2, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 8005cfc:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 8005d08:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005d20:	480a      	ldr	r0, [pc, #40]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d22:	f7fb febd 	bl	8001aa0 <HAL_CAN_Init>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <MX_CAN_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d2c:	214e      	movs	r1, #78	; 0x4e
 8005d2e:	4809      	ldr	r0, [pc, #36]	; (8005d54 <MX_CAN_Init+0x84>)
 8005d30:	f000 fdd6 	bl	80068e0 <_Error_Handler>
  }

  CAN_FilterConfig();
 8005d34:	f000 f85e 	bl	8005df4 <CAN_FilterConfig>

  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_FMP0);
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <MX_CAN_Init+0x7c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0202 	orr.w	r2, r2, #2
 8005d46:	615a      	str	r2, [r3, #20]
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000110 	.word	0x20000110
 8005d50:	40006400 	.word	0x40006400
 8005d54:	080075d8 	.word	0x080075d8

08005d58 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a20      	ldr	r2, [pc, #128]	; (8005de8 <HAL_CAN_MspInit+0x90>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d139      	bne.n	8005dde <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005d6a:	4b20      	ldr	r3, [pc, #128]	; (8005dec <HAL_CAN_MspInit+0x94>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_CAN_MspInit+0x94>)
 8005d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d74:	61d3      	str	r3, [r2, #28]
 8005d76:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <HAL_CAN_MspInit+0x94>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d82:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <HAL_CAN_MspInit+0x94>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	4a19      	ldr	r2, [pc, #100]	; (8005dec <HAL_CAN_MspInit+0x94>)
 8005d88:	f043 0304 	orr.w	r3, r3, #4
 8005d8c:	6193      	str	r3, [r2, #24]
 8005d8e:	4b17      	ldr	r3, [pc, #92]	; (8005dec <HAL_CAN_MspInit+0x94>)
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	60bb      	str	r3, [r7, #8]
 8005d98:	68bb      	ldr	r3, [r7, #8]

    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da8:	f107 0310 	add.w	r3, r7, #16
 8005dac:	4619      	mov	r1, r3
 8005dae:	4810      	ldr	r0, [pc, #64]	; (8005df0 <HAL_CAN_MspInit+0x98>)
 8005db0:	f7fd fb00 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc2:	f107 0310 	add.w	r3, r7, #16
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4809      	ldr	r0, [pc, #36]	; (8005df0 <HAL_CAN_MspInit+0x98>)
 8005dca:	f7fd faf3 	bl	80033b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 1U);
 8005dce:	2201      	movs	r2, #1
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	2014      	movs	r0, #20
 8005dd4:	f7fc fe95 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005dd8:	2014      	movs	r0, #20
 8005dda:	f7fc feae 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005dde:	bf00      	nop
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40006400 	.word	0x40006400
 8005dec:	40021000 	.word	0x40021000
 8005df0:	40010800 	.word	0x40010800

08005df4 <CAN_FilterConfig>:
} 

/* USER CODE BEGIN 1 */

void CAN_FilterConfig(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	; 0x28
 8005df8:	af00      	add	r7, sp, #0
	CAN_FilterConfTypeDef sFilterConfig;	
	
	sFilterConfig.FilterNumber = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = CAN_ID_MOTORS_CMD<<5;
 8005e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e0a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = CAN_ID_CALIBRATION_MODE<<5;
 8005e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e10:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = CAN_ID_COMM_CHECKING<<5;
 8005e12:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8005e16:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = CAN_ID_HOOK<<5;
 8005e18:	f242 2320 	movw	r3, #8736	; 0x2220
 8005e1c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	623b      	str	r3, [r7, #32]
	sFilterConfig.BankNumber = 14;
 8005e26:	230e      	movs	r3, #14
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24


	if( HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK )
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4807      	ldr	r0, [pc, #28]	; (8005e4c <CAN_FilterConfig+0x58>)
 8005e30:	f7fb ff37 	bl	8001ca2 <HAL_CAN_ConfigFilter>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <CAN_FilterConfig+0x4e>
	{
		_Error_Handler(__FILE__, __LINE__);
 8005e3a:	21a8      	movs	r1, #168	; 0xa8
 8005e3c:	4804      	ldr	r0, [pc, #16]	; (8005e50 <CAN_FilterConfig+0x5c>)
 8005e3e:	f000 fd4f 	bl	80068e0 <_Error_Handler>
	}
}
 8005e42:	bf00      	nop
 8005e44:	3728      	adds	r7, #40	; 0x28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000110 	.word	0x20000110
 8005e50:	080075d8 	.word	0x080075d8

08005e54 <CAN_Send>:


void CAN_Send(uint8_t* data, uint32_t id)
{		
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	hcan.pTxMsg->StdId = id;
 8005e5e:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <CAN_Send+0x70>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	601a      	str	r2, [r3, #0]
	hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8005e66:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <CAN_Send+0x70>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	60da      	str	r2, [r3, #12]
	hcan.pTxMsg->IDE = CAN_ID_STD;
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <CAN_Send+0x70>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	609a      	str	r2, [r3, #8]
	hcan.pTxMsg->DLC = 8;
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <CAN_Send+0x70>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	611a      	str	r2, [r3, #16]
		
	for(int i=0; i < 8; i++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e00d      	b.n	8005ea0 <CAN_Send+0x4c>
		hcan.pTxMsg->Data[i] = data[i];
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	4a0e      	ldr	r2, [pc, #56]	; (8005ec4 <CAN_Send+0x70>)
 8005e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e8e:	7819      	ldrb	r1, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	3314      	adds	r3, #20
 8005e96:	460a      	mov	r2, r1
 8005e98:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 8; i++)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b07      	cmp	r3, #7
 8005ea4:	ddee      	ble.n	8005e84 <CAN_Send+0x30>
	
		
	if( HAL_CAN_Transmit(&hcan, 10) != HAL_OK )
 8005ea6:	210a      	movs	r1, #10
 8005ea8:	4806      	ldr	r0, [pc, #24]	; (8005ec4 <CAN_Send+0x70>)
 8005eaa:	f7fb ffcb 	bl	8001e44 <HAL_CAN_Transmit>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <CAN_Send+0x68>
	{
		Error_Handler();
 8005eb4:	21ba      	movs	r1, #186	; 0xba
 8005eb6:	4804      	ldr	r0, [pc, #16]	; (8005ec8 <CAN_Send+0x74>)
 8005eb8:	f000 fd12 	bl	80068e0 <_Error_Handler>
	}
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000110 	.word	0x20000110
 8005ec8:	080075d8 	.word	0x080075d8

08005ecc <read_mode>:
	VMdata = data & 0x7F;
	return (int)VMdata;
}

int read_mode(uint8_t data) //En soit cette fonction ne sert a rien parce qu'on pourrait simplement recuperer la data en la typecastant int
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t VMdata;

	VMdata = data & 0xFF; //On recupere ici les 8 bits (l'encodage du MODE se fait sur les 8 bits)
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	73fb      	strb	r3, [r7, #15]
	return (int)VMdata;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_CAN_RxCpltCallback>:

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

	/* PWM commands (steering and propulsion) */
	if(hcan->pRxMsg->StdId == CAN_ID_MOTORS_CMD)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efa:	d11e      	bne.n	8005f3a <HAL_CAN_RxCpltCallback+0x52>
	{
		leftRearSpeed = read_mode(hcan->pRxMsg->Data[0]);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	7d1b      	ldrb	r3, [r3, #20]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff ffe2 	bl	8005ecc <read_mode>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4a2f      	ldr	r2, [pc, #188]	; (8005fc8 <HAL_CAN_RxCpltCallback+0xe0>)
 8005f0c:	6013      	str	r3, [r2, #0]
		rightRearSpeed = read_mode(hcan->pRxMsg->Data[1]);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	7d5b      	ldrb	r3, [r3, #21]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff ffd9 	bl	8005ecc <read_mode>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4a2b      	ldr	r2, [pc, #172]	; (8005fcc <HAL_CAN_RxCpltCallback+0xe4>)
 8005f1e:	6013      	str	r3, [r2, #0]
		steeringSpeed = read_mode(hcan->pRxMsg->Data[2]);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	7d9b      	ldrb	r3, [r3, #22]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ffd0 	bl	8005ecc <read_mode>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4a28      	ldr	r2, [pc, #160]	; (8005fd0 <HAL_CAN_RxCpltCallback+0xe8>)
 8005f30:	6013      	str	r3, [r2, #0]
		UPDATE_CMD_FLAG = 1;
 8005f32:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <HAL_CAN_RxCpltCallback+0xec>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e03a      	b.n	8005fb0 <HAL_CAN_RxCpltCallback+0xc8>

	}else if (hcan->pRxMsg->StdId == CAN_ID_CALIBRATION_MODE && hcan->pRxMsg->Data[0]== CALIBRATION_REQUEST){
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f44:	d108      	bne.n	8005f58 <HAL_CAN_RxCpltCallback+0x70>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	7d1b      	ldrb	r3, [r3, #20]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d103      	bne.n	8005f58 <HAL_CAN_RxCpltCallback+0x70>
		mode = 0;	//Enter in calibration mode
 8005f50:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <HAL_CAN_RxCpltCallback+0xf0>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e02b      	b.n	8005fb0 <HAL_CAN_RxCpltCallback+0xc8>

	}else if (hcan->pRxMsg->StdId == CAN_ID_COMM_CHECKING && hcan->pRxMsg->Data[0]==COMM_CHECKING_REQUEST){	//Communication checking request
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8005f62:	d108      	bne.n	8005f76 <HAL_CAN_RxCpltCallback+0x8e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	7d1b      	ldrb	r3, [r3, #20]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d103      	bne.n	8005f76 <HAL_CAN_RxCpltCallback+0x8e>

		commCheckingRequest = 1;
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_CAN_RxCpltCallback+0xf4>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e01c      	b.n	8005fb0 <HAL_CAN_RxCpltCallback+0xc8>

	}else if (hcan->pRxMsg->StdId == CAN_ID_HOOK && hcan->pRxMsg->Data[0]==HOOK_LOCK){
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f240 1211 	movw	r2, #273	; 0x111
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d107      	bne.n	8005f94 <HAL_CAN_RxCpltCallback+0xac>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	7d1b      	ldrb	r3, [r3, #20]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d102      	bne.n	8005f94 <HAL_CAN_RxCpltCallback+0xac>
		lockHook();
 8005f8e:	f000 f92b 	bl	80061e8 <lockHook>
 8005f92:	e00d      	b.n	8005fb0 <HAL_CAN_RxCpltCallback+0xc8>

	}else if (hcan->pRxMsg->StdId == CAN_ID_HOOK && hcan->pRxMsg->Data[0]==HOOK_UNLOCK){
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f240 1211 	movw	r2, #273	; 0x111
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d106      	bne.n	8005fb0 <HAL_CAN_RxCpltCallback+0xc8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	7d1b      	ldrb	r3, [r3, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_CAN_RxCpltCallback+0xc8>
		unlockHook();
 8005fac:	f000 f928 	bl	8006200 <unlockHook>
	}
		
	__HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0202 	orr.w	r2, r2, #2
 8005fbe:	615a      	str	r2, [r3, #20]
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000030 	.word	0x20000030
 8005fcc:	20000034 	.word	0x20000034
 8005fd0:	20000038 	.word	0x20000038
 8005fd4:	20000004 	.word	0x20000004
 8005fd8:	20000000 	.word	0x20000000
 8005fdc:	200001ec 	.word	0x200001ec

08005fe0 <car_control>:
/* Programs ------------------------------------------------------------------*/

/**
*	Update motor speeds
**/
void car_control(int left_rear_speed, int right_rear_speed, int steering_speed){
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]

	if (left_rear_speed == DISABLED && right_rear_speed == DISABLED && steering_speed == DISABLED){
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d112      	bne.n	800601a <car_control+0x3a>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d10e      	bne.n	800601a <car_control+0x3a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d10a      	bne.n	800601a <car_control+0x3a>

		wheels_set_speed(GPIO_PIN_RESET, GPIO_PIN_RESET, STOP, STOP);
 8006004:	2332      	movs	r3, #50	; 0x32
 8006006:	2232      	movs	r2, #50	; 0x32
 8006008:	2100      	movs	r1, #0
 800600a:	2000      	movs	r0, #0
 800600c:	f001 f9ce 	bl	80073ac <wheels_set_speed>
		steering_set_speed(GPIO_PIN_RESET, STOP);
 8006010:	2132      	movs	r1, #50	; 0x32
 8006012:	2000      	movs	r0, #0
 8006014:	f000 fc7c 	bl	8006910 <steering_set_speed>
 8006018:	e00a      	b.n	8006030 <car_control+0x50>

	} else {

		//Propulsion
		wheels_set_speed(GPIO_PIN_SET, GPIO_PIN_SET, right_rear_speed, left_rear_speed);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	2101      	movs	r1, #1
 8006020:	2001      	movs	r0, #1
 8006022:	f001 f9c3 	bl	80073ac <wheels_set_speed>

		//Steering
		steering_set_speed(GPIO_PIN_SET, steering_speed);
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	2001      	movs	r0, #1
 800602a:	f000 fc71 	bl	8006910 <steering_set_speed>
	}
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <MX_DMA_Init+0x38>)
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	4a0b      	ldr	r2, [pc, #44]	; (8006070 <MX_DMA_Init+0x38>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6153      	str	r3, [r2, #20]
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <MX_DMA_Init+0x38>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 3U);
 8006056:	2203      	movs	r2, #3
 8006058:	2100      	movs	r1, #0
 800605a:	200b      	movs	r0, #11
 800605c:	f7fc fd51 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006060:	200b      	movs	r0, #11
 8006062:	f7fc fd6a 	bl	8002b3a <HAL_NVIC_EnableIRQ>

}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000

08006074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800607a:	4b55      	ldr	r3, [pc, #340]	; (80061d0 <MX_GPIO_Init+0x15c>)
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	4a54      	ldr	r2, [pc, #336]	; (80061d0 <MX_GPIO_Init+0x15c>)
 8006080:	f043 0310 	orr.w	r3, r3, #16
 8006084:	6193      	str	r3, [r2, #24]
 8006086:	4b52      	ldr	r3, [pc, #328]	; (80061d0 <MX_GPIO_Init+0x15c>)
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006092:	4b4f      	ldr	r3, [pc, #316]	; (80061d0 <MX_GPIO_Init+0x15c>)
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	4a4e      	ldr	r2, [pc, #312]	; (80061d0 <MX_GPIO_Init+0x15c>)
 8006098:	f043 0320 	orr.w	r3, r3, #32
 800609c:	6193      	str	r3, [r2, #24]
 800609e:	4b4c      	ldr	r3, [pc, #304]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060aa:	4b49      	ldr	r3, [pc, #292]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	4a48      	ldr	r2, [pc, #288]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060b0:	f043 0304 	orr.w	r3, r3, #4
 80060b4:	6193      	str	r3, [r2, #24]
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	607b      	str	r3, [r7, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c2:	4b43      	ldr	r3, [pc, #268]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	4a42      	ldr	r2, [pc, #264]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060c8:	f043 0308 	orr.w	r3, r3, #8
 80060cc:	6193      	str	r3, [r2, #24]
 80060ce:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <MX_GPIO_Init+0x15c>)
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_GPIO_Port, US_Front_Left_Trig_Pin|US_Front_Center_Trig_Pin|US_Front_Right_Trig_Pin|US_Rear_Left_Trig_Pin
 80060da:	2200      	movs	r2, #0
 80060dc:	f641 41be 	movw	r1, #7358	; 0x1cbe
 80060e0:	483c      	ldr	r0, [pc, #240]	; (80061d4 <MX_GPIO_Init+0x160>)
 80060e2:	f7fd fb06 	bl	80036f2 <HAL_GPIO_WritePin>
                          |US_Rear_Center_Trig_Pin|US_Rear_Right_Trig_Pin|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIO_PORT_HOOK, GPIO_PIN_HOOK, GPIO_PIN_RESET);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2120      	movs	r1, #32
 80060ea:	483b      	ldr	r0, [pc, #236]	; (80061d8 <MX_GPIO_Init+0x164>)
 80060ec:	f7fd fb01 	bl	80036f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LatchPower_GPIO_Port, LatchPower_Pin, GPIO_PIN_RESET);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2140      	movs	r1, #64	; 0x40
 80060f4:	4839      	ldr	r0, [pc, #228]	; (80061dc <MX_GPIO_Init+0x168>)
 80060f6:	f7fd fafc 	bl	80036f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80060fa:	2200      	movs	r2, #0
 80060fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006100:	4835      	ldr	r0, [pc, #212]	; (80061d8 <MX_GPIO_Init+0x164>)
 8006102:	f7fd faf6 	bl	80036f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800610a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800610c:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <MX_GPIO_Init+0x16c>)
 800610e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	4619      	mov	r1, r3
 800611a:	482e      	ldr	r0, [pc, #184]	; (80061d4 <MX_GPIO_Init+0x160>)
 800611c:	f7fd f94a 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = US_Front_Left_Trig_Pin|US_Front_Center_Trig_Pin|US_Front_Right_Trig_Pin|US_Rear_Left_Trig_Pin
 8006120:	f641 43be 	movw	r3, #7358	; 0x1cbe
 8006124:	613b      	str	r3, [r7, #16]
                          |US_Rear_Center_Trig_Pin|US_Rear_Right_Trig_Pin|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612a:	2302      	movs	r3, #2
 800612c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(US_GPIO_Port, &GPIO_InitStruct);
 800612e:	f107 0310 	add.w	r3, r7, #16
 8006132:	4619      	mov	r1, r3
 8006134:	4827      	ldr	r0, [pc, #156]	; (80061d4 <MX_GPIO_Init+0x160>)
 8006136:	f7fd f93d 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PIN_HOOK */
	GPIO_InitStruct.Pin = GPIO_PIN_HOOK;
 800613a:	2320      	movs	r3, #32
 800613c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800613e:	2301      	movs	r3, #1
 8006140:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006142:	2302      	movs	r3, #2
 8006144:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO_PORT_HOOK, &GPIO_InitStruct);
 8006146:	f107 0310 	add.w	r3, r7, #16
 800614a:	4619      	mov	r1, r3
 800614c:	4822      	ldr	r0, [pc, #136]	; (80061d8 <MX_GPIO_Init+0x164>)
 800614e:	f7fd f931 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LatchPower_Pin;
 8006152:	2340      	movs	r3, #64	; 0x40
 8006154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006156:	2301      	movs	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615a:	2302      	movs	r3, #2
 800615c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LatchPower_GPIO_Port, &GPIO_InitStruct);
 800615e:	f107 0310 	add.w	r3, r7, #16
 8006162:	4619      	mov	r1, r3
 8006164:	481d      	ldr	r0, [pc, #116]	; (80061dc <MX_GPIO_Init+0x168>)
 8006166:	f7fd f925 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800616a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800616e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006174:	2302      	movs	r3, #2
 8006176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	4619      	mov	r1, r3
 800617e:	4816      	ldr	r0, [pc, #88]	; (80061d8 <MX_GPIO_Init+0x164>)
 8006180:	f7fd f918 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RightSteeringButton_Pin|LeftSteeringButton_Pin;
 8006184:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800618e:	2301      	movs	r3, #1
 8006190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006192:	f107 0310 	add.w	r3, r7, #16
 8006196:	4619      	mov	r1, r3
 8006198:	480f      	ldr	r0, [pc, #60]	; (80061d8 <MX_GPIO_Init+0x164>)
 800619a:	f7fd f90b 	bl	80033b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = US_Right_Echo_Pin|US_Center_Echo_Pin|US_Left_Echo_Pin;
 800619e:	f44f 7350 	mov.w	r3, #832	; 0x340
 80061a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <MX_GPIO_Init+0x170>)
 80061a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(US_GPIO_Port, &GPIO_InitStruct);
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	4619      	mov	r1, r3
 80061b2:	4808      	ldr	r0, [pc, #32]	; (80061d4 <MX_GPIO_Init+0x160>)
 80061b4:	f7fd f8fe 	bl	80033b4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80061b8:	2200      	movs	r2, #0
 80061ba:	2100      	movs	r1, #0
 80061bc:	2017      	movs	r0, #23
 80061be:	f7fc fca0 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80061c2:	2017      	movs	r0, #23
 80061c4:	f7fc fcb9 	bl	8002b3a <HAL_NVIC_EnableIRQ>

}
 80061c8:	bf00      	nop
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40021000 	.word	0x40021000
 80061d4:	40011000 	.word	0x40011000
 80061d8:	40010c00 	.word	0x40010c00
 80061dc:	40010800 	.word	0x40010800
 80061e0:	10110000 	.word	0x10110000
 80061e4:	10310000 	.word	0x10310000

080061e8 <lockHook>:
#include "hook.h"

/**
* Lock the car hook
**/
void lockHook(void){
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT_HOOK, GPIO_PIN_HOOK, GPIO_PIN_SET);
 80061ec:	2201      	movs	r2, #1
 80061ee:	2120      	movs	r1, #32
 80061f0:	4802      	ldr	r0, [pc, #8]	; (80061fc <lockHook+0x14>)
 80061f2:	f7fd fa7e 	bl	80036f2 <HAL_GPIO_WritePin>
}
 80061f6:	bf00      	nop
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40010c00 	.word	0x40010c00

08006200 <unlockHook>:


/**
* Unlock the car hook
**/
void unlockHook(void){
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT_HOOK, GPIO_PIN_HOOK, GPIO_PIN_RESET);
 8006204:	2200      	movs	r2, #0
 8006206:	2120      	movs	r1, #32
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <unlockHook+0x14>)
 800620a:	f7fd fa72 	bl	80036f2 <HAL_GPIO_WritePin>
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40010c00 	.word	0x40010c00

08006218 <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM2)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006228:	d103      	bne.n	8006232 <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        VMG_mes = 0;
 800622a:	4b0c      	ldr	r3, [pc, #48]	; (800625c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

    }else if (htim->Instance==TIM3){

    	microSecondTimerOverflow();
    }
}
 8006230:	e00f      	b.n	8006252 <HAL_TIM_PeriodElapsedCallback+0x3a>
    } else if (htim->Instance==TIM4){
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d103      	bne.n	8006244 <HAL_TIM_PeriodElapsedCallback+0x2c>
        VMD_mes = 0;
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
}
 8006242:	e006      	b.n	8006252 <HAL_TIM_PeriodElapsedCallback+0x3a>
    }else if (htim->Instance==TIM3){
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a07      	ldr	r2, [pc, #28]	; (8006268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <HAL_TIM_PeriodElapsedCallback+0x3a>
    	microSecondTimerOverflow();
 800624e:	f001 f811 	bl	8007274 <microSecondTimerOverflow>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	2000016c 	.word	0x2000016c
 8006260:	40000800 	.word	0x40000800
 8006264:	20000170 	.word	0x20000170
 8006268:	40000400 	.word	0x40000400

0800626c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
     * Timer 2,4 sur 16 bits (65535)cp ->compte p�riode 9999 pour 1s (1Hz)   *
     *                               ->compte p�riode 1000 pour 0.1s (10Hz)  *
     * Rapport r�duction 2279/64 ~ 36 impulsions/tour de roue                *
     * unite de 0.01*tr/mn = 168495/ cp                                     *
     */
    if (htim->Instance==TIM2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d116      	bne.n	80062ac <HAL_TIM_IC_CaptureCallback+0x40>
    {
        per_vitesseG =	HAL_TIM_ReadCapturedValue (&htim2,TIM_CHANNEL_3);//PB10
 800627e:	2108      	movs	r1, #8
 8006280:	481a      	ldr	r0, [pc, #104]	; (80062ec <HAL_TIM_IC_CaptureCallback+0x80>)
 8006282:	f7fe fb8d 	bl	80049a0 <HAL_TIM_ReadCapturedValue>
 8006286:	4603      	mov	r3, r0
 8006288:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <HAL_TIM_IC_CaptureCallback+0x84>)
 800628a:	6013      	str	r3, [r2, #0]
        VMG_mes = 1684949/per_vitesseG ;// X 0.01 tr/mn
 800628c:	4b18      	ldr	r3, [pc, #96]	; (80062f0 <HAL_TIM_IC_CaptureCallback+0x84>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <HAL_TIM_IC_CaptureCallback+0x88>)
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8006298:	6013      	str	r3, [r2, #0]
        
        __HAL_TIM_SET_COUNTER(&htim2,0);// mise a zero compteur apres capture
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <HAL_TIM_IC_CaptureCallback+0x80>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
        nbImpulsionG +=1;
 80062a2:	4b16      	ldr	r3, [pc, #88]	; (80062fc <HAL_TIM_IC_CaptureCallback+0x90>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a14      	ldr	r2, [pc, #80]	; (80062fc <HAL_TIM_IC_CaptureCallback+0x90>)
 80062aa:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance==TIM4)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a13      	ldr	r2, [pc, #76]	; (8006300 <HAL_TIM_IC_CaptureCallback+0x94>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d116      	bne.n	80062e4 <HAL_TIM_IC_CaptureCallback+0x78>
    {
        per_vitesseD =	HAL_TIM_ReadCapturedValue (&htim4,TIM_CHANNEL_3);//PB8
 80062b6:	2108      	movs	r1, #8
 80062b8:	4812      	ldr	r0, [pc, #72]	; (8006304 <HAL_TIM_IC_CaptureCallback+0x98>)
 80062ba:	f7fe fb71 	bl	80049a0 <HAL_TIM_ReadCapturedValue>
 80062be:	4603      	mov	r3, r0
 80062c0:	4a11      	ldr	r2, [pc, #68]	; (8006308 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80062c2:	6013      	str	r3, [r2, #0]
        VMD_mes = 1684949/per_vitesseD ;// X 0.01 tr/mn
 80062c4:	4b10      	ldr	r3, [pc, #64]	; (8006308 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <HAL_TIM_IC_CaptureCallback+0x88>)
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	4a0f      	ldr	r2, [pc, #60]	; (800630c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80062d0:	6013      	str	r3, [r2, #0]
        
        __HAL_TIM_SET_COUNTER(&htim4,0);// mise a zero compteur apres capture
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <HAL_TIM_IC_CaptureCallback+0x98>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2200      	movs	r2, #0
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24
        nbImpulsionD +=1;
 80062da:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80062e2:	6013      	str	r3, [r2, #0]
    }
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	2000024c 	.word	0x2000024c
 80062f0:	20000174 	.word	0x20000174
 80062f4:	0019b5d5 	.word	0x0019b5d5
 80062f8:	2000016c 	.word	0x2000016c
 80062fc:	2000017c 	.word	0x2000017c
 8006300:	40000800 	.word	0x40000800
 8006304:	200002cc 	.word	0x200002cc
 8006308:	20000178 	.word	0x20000178
 800630c:	20000170 	.word	0x20000170
 8006310:	20000180 	.word	0x20000180

08006314 <HAL_GPIO_EXTI_Callback>:

// EXTI External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006314:	b5b0      	push	{r4, r5, r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	80fb      	strh	r3, [r7, #6]
	if(usEchoStart){ //check pin state : rising
 800631e:	4b14      	ldr	r3, [pc, #80]	; (8006370 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_GPIO_EXTI_Callback+0x28>
		usEchoRisingTime = microSecond();
 8006326:	f000 ffb7 	bl	8007298 <microSecond>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4911      	ldr	r1, [pc, #68]	; (8006374 <HAL_GPIO_EXTI_Callback+0x60>)
 8006330:	e9c1 2300 	strd	r2, r3, [r1]
		usEchoStart = 0;
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
		usEchoStart = 1;
		usEchoReceived = 1;

	}

}
 800633a:	e014      	b.n	8006366 <HAL_GPIO_EXTI_Callback+0x52>
		uint64_t echoDuration = microSecond() - usEchoRisingTime;
 800633c:	f000 ffac 	bl	8007298 <microSecond>
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <HAL_GPIO_EXTI_Callback+0x60>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	1a84      	subs	r4, r0, r2
 8006348:	eb61 0503 	sbc.w	r5, r1, r3
 800634c:	e9c7 4502 	strd	r4, r5, [r7, #8]
			usEchoDuration = echoDuration;
 8006350:	4909      	ldr	r1, [pc, #36]	; (8006378 <HAL_GPIO_EXTI_Callback+0x64>)
 8006352:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006356:	e9c1 2300 	strd	r2, r3, [r1]
		usEchoStart = 1;
 800635a:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_GPIO_EXTI_Callback+0x5c>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]
		usEchoReceived = 1;
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <HAL_GPIO_EXTI_Callback+0x68>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bdb0      	pop	{r4, r5, r7, pc}
 800636e:	bf00      	nop
 8006370:	20000018 	.word	0x20000018
 8006374:	20000188 	.word	0x20000188
 8006378:	20000190 	.word	0x20000190
 800637c:	20000184 	.word	0x20000184

08006380 <SYS_MicroDelay>:

void SYS_MicroDelay(uint32_t delay)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
    volatile uint32_t cnt=(delay*6)+5;
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4413      	add	r3, r2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	3305      	adds	r3, #5
 8006394:	60fb      	str	r3, [r7, #12]

    while (cnt >0) {
 8006396:	e002      	b.n	800639e <SYS_MicroDelay+0x1e>
        cnt--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
    while (cnt >0) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f9      	bne.n	8006398 <SYS_MicroDelay+0x18>
    }
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    hcan.pTxMsg = &TxMessage;
 80063b4:	4b8e      	ldr	r3, [pc, #568]	; (80065f0 <main+0x240>)
 80063b6:	4a8f      	ldr	r2, [pc, #572]	; (80065f4 <main+0x244>)
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
    hcan.pRxMsg = &RxMessage;
 80063ba:	4b8d      	ldr	r3, [pc, #564]	; (80065f0 <main+0x240>)
 80063bc:	4a8e      	ldr	r2, [pc, #568]	; (80065f8 <main+0x248>)
 80063be:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE END 1 */
    
    /* MCU Configuration----------------------------------------------------------*/
    
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80063c0:	f7fa ff4a 	bl	8001258 <HAL_Init>
    /* USER CODE BEGIN Init */
    
    /* USER CODE END Init */
    
    /* Configure the system clock */
    SystemClock_Config();
 80063c4:	f000 fa2a 	bl	800681c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */
    
    /* USER CODE END SysInit */
    
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80063c8:	f7ff fe54 	bl	8006074 <MX_GPIO_Init>
    power_boostrap();
 80063cc:	f000 fa92 	bl	80068f4 <power_boostrap>
    
    MX_DMA_Init();	// Set a breakpoint here for DEBUG : turn ON the car at this point before continuing !!
 80063d0:	f7ff fe32 	bl	8006038 <MX_DMA_Init>
    MX_USART2_UART_Init();
 80063d4:	f000 ff90 	bl	80072f8 <MX_USART2_UART_Init>
    MX_TIM1_Init();
 80063d8:	f000 fcca 	bl	8006d70 <MX_TIM1_Init>
    MX_TIM2_Init();
 80063dc:	f000 fd60 	bl	8006ea0 <MX_TIM2_Init>
    MX_TIM3_Init();
 80063e0:	f000 fdc8 	bl	8006f74 <MX_TIM3_Init>
    MX_TIM4_Init();
 80063e4:	f000 fdee 	bl	8006fc4 <MX_TIM4_Init>
    MX_ADC1_Init();
 80063e8:	f7ff fa90 	bl	800590c <MX_ADC1_Init>
    MX_CAN_Init();
 80063ec:	f7ff fc70 	bl	8005cd0 <MX_CAN_Init>
    /* USER CODE BEGIN 2 */
    
    /* Initialisations */
    
    /* PWM MOTEURS */
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80063f0:	2100      	movs	r1, #0
 80063f2:	4882      	ldr	r0, [pc, #520]	; (80065fc <main+0x24c>)
 80063f4:	f7fd fec2 	bl	800417c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80063f8:	2104      	movs	r1, #4
 80063fa:	4880      	ldr	r0, [pc, #512]	; (80065fc <main+0x24c>)
 80063fc:	f7fd febe 	bl	800417c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006400:	2108      	movs	r1, #8
 8006402:	487e      	ldr	r0, [pc, #504]	; (80065fc <main+0x24c>)
 8006404:	f7fd feba 	bl	800417c <HAL_TIM_PWM_Start>
    
    //Sorties complementaires
    HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_1);
 8006408:	2100      	movs	r1, #0
 800640a:	487c      	ldr	r0, [pc, #496]	; (80065fc <main+0x24c>)
 800640c:	f7fe ff20 	bl	8005250 <HAL_TIMEx_OCN_Start>
    HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_2);
 8006410:	2104      	movs	r1, #4
 8006412:	487a      	ldr	r0, [pc, #488]	; (80065fc <main+0x24c>)
 8006414:	f7fe ff1c 	bl	8005250 <HAL_TIMEx_OCN_Start>
    HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_3);
 8006418:	2108      	movs	r1, #8
 800641a:	4878      	ldr	r0, [pc, #480]	; (80065fc <main+0x24c>)
 800641c:	f7fe ff18 	bl	8005250 <HAL_TIMEx_OCN_Start>
    /*Vitesse*/
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8006420:	4b77      	ldr	r3, [pc, #476]	; (8006600 <main+0x250>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	4b76      	ldr	r3, [pc, #472]	; (8006600 <main+0x250>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8006430:	4b74      	ldr	r3, [pc, #464]	; (8006604 <main+0x254>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	4b73      	ldr	r3, [pc, #460]	; (8006604 <main+0x254>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	60da      	str	r2, [r3, #12]

    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8006440:	2100      	movs	r1, #0
 8006442:	486e      	ldr	r0, [pc, #440]	; (80065fc <main+0x24c>)
 8006444:	f7fd fef6 	bl	8004234 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8006448:	2104      	movs	r1, #4
 800644a:	486c      	ldr	r0, [pc, #432]	; (80065fc <main+0x24c>)
 800644c:	f7fd fef2 	bl	8004234 <HAL_TIM_IC_Start_IT>

    HAL_TIM_IC_Start_IT (&htim2,TIM_CHANNEL_3);//autorisation IT capture CH3
 8006450:	2108      	movs	r1, #8
 8006452:	486b      	ldr	r0, [pc, #428]	; (8006600 <main+0x250>)
 8006454:	f7fd feee 	bl	8004234 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT (&htim4,TIM_CHANNEL_3);//autorisation IT capture CH3
 8006458:	2108      	movs	r1, #8
 800645a:	486a      	ldr	r0, [pc, #424]	; (8006604 <main+0x254>)
 800645c:	f7fd feea 	bl	8004234 <HAL_TIM_IC_Start_IT>
    
    /* ADC1 */
    HAL_ADC_Start_DMA (&hadc1,ADCBUF,5);
 8006460:	2205      	movs	r2, #5
 8006462:	4969      	ldr	r1, [pc, #420]	; (8006608 <main+0x258>)
 8006464:	4869      	ldr	r0, [pc, #420]	; (800660c <main+0x25c>)
 8006466:	f7fb f837 	bl	80014d8 <HAL_ADC_Start_DMA>
    
    //US timer
    __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800646a:	4b69      	ldr	r3, [pc, #420]	; (8006610 <main+0x260>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	4b67      	ldr	r3, [pc, #412]	; (8006610 <main+0x260>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	60da      	str	r2, [r3, #12]
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800647a:	2100      	movs	r1, #0
 800647c:	4864      	ldr	r0, [pc, #400]	; (8006610 <main+0x260>)
 800647e:	f7fd fed9 	bl	8004234 <HAL_TIM_IC_Start_IT>
    startMicroSecondCounter();
 8006482:	f000 fee9 	bl	8007258 <startMicroSecondCounter>
    /* USER CODE BEGIN WHILE */
    
    /* Steering Initialization*/

    //Write default calibration values in flash memory (first use only)
    if ((int)Flash_Read_NUM(STEERING_CALIBRATION_A_DEFAULT_ADDR)!=(int)STEERING_CALIBRATION_A_DEFAULT
 8006486:	4863      	ldr	r0, [pc, #396]	; (8006614 <main+0x264>)
 8006488:	f7ff fa2a 	bl	80058e0 <Flash_Read_NUM>
 800648c:	4603      	mov	r3, r0
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fd38 	bl	8000f04 <__aeabi_f2iz>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <main+0x102>
    	|| (int)Flash_Read_NUM(STEERING_CALIBRATION_B_DEFAULT_ADDR)!=(int)STEERING_CALIBRATION_B_DEFAULT)
 800649a:	485f      	ldr	r0, [pc, #380]	; (8006618 <main+0x268>)
 800649c:	f7ff fa20 	bl	80058e0 <Flash_Read_NUM>
 80064a0:	4603      	mov	r3, r0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fa fd2e 	bl	8000f04 <__aeabi_f2iz>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f240 229a 	movw	r2, #666	; 0x29a
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00f      	beq.n	80064d2 <main+0x122>
		{

    	Flash_Write_NUM(STEERING_CALIBRATION_A_DEFAULT_ADDR, STEERING_CALIBRATION_A_DEFAULT);
 80064b2:	495a      	ldr	r1, [pc, #360]	; (800661c <main+0x26c>)
 80064b4:	4857      	ldr	r0, [pc, #348]	; (8006614 <main+0x264>)
 80064b6:	f7ff f9ff 	bl	80058b8 <Flash_Write_NUM>
    	Flash_Write_NUM(STEERING_CALIBRATION_B_DEFAULT_ADDR, STEERING_CALIBRATION_B_DEFAULT);
 80064ba:	4959      	ldr	r1, [pc, #356]	; (8006620 <main+0x270>)
 80064bc:	4856      	ldr	r0, [pc, #344]	; (8006618 <main+0x268>)
 80064be:	f7ff f9fb 	bl	80058b8 <Flash_Write_NUM>

    	Flash_Write_NUM(STEERING_CALIBRATION_A_ADDR, STEERING_CALIBRATION_A_DEFAULT);
 80064c2:	4956      	ldr	r1, [pc, #344]	; (800661c <main+0x26c>)
 80064c4:	4857      	ldr	r0, [pc, #348]	; (8006624 <main+0x274>)
 80064c6:	f7ff f9f7 	bl	80058b8 <Flash_Write_NUM>
    	Flash_Write_NUM(STEERING_CALIBRATION_B_ADDR, STEERING_CALIBRATION_B_DEFAULT);
 80064ca:	4955      	ldr	r1, [pc, #340]	; (8006620 <main+0x270>)
 80064cc:	4856      	ldr	r0, [pc, #344]	; (8006628 <main+0x278>)
 80064ce:	f7ff f9f3 	bl	80058b8 <Flash_Write_NUM>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    	if (US_FLAG==1)
 80064d2:	4b56      	ldr	r3, [pc, #344]	; (800662c <main+0x27c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d179      	bne.n	80065ce <main+0x21e>
		{
			US_FLAG=0;
 80064da:	4b54      	ldr	r3, [pc, #336]	; (800662c <main+0x27c>)
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]

			if (currentUs >= 6){
 80064e0:	4b53      	ldr	r3, [pc, #332]	; (8006630 <main+0x280>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	dd02      	ble.n	80064ee <main+0x13e>
				currentUs = 0;
 80064e8:	4b51      	ldr	r3, [pc, #324]	; (8006630 <main+0x280>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
			}

			if (sendTrig){
 80064ee:	4b51      	ldr	r3, [pc, #324]	; (8006634 <main+0x284>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01d      	beq.n	8006532 <main+0x182>
				usEchoStart = 1;
 80064f6:	4b50      	ldr	r3, [pc, #320]	; (8006638 <main+0x288>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin( US_GPIO_Port, usTriggerPin[currentUs], GPIO_PIN_SET); //Trigger ON
 80064fc:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <main+0x280>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a4e      	ldr	r2, [pc, #312]	; (800663c <main+0x28c>)
 8006502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006506:	2201      	movs	r2, #1
 8006508:	4619      	mov	r1, r3
 800650a:	484d      	ldr	r0, [pc, #308]	; (8006640 <main+0x290>)
 800650c:	f7fd f8f1 	bl	80036f2 <HAL_GPIO_WritePin>
				SYS_MicroDelay(10);
 8006510:	200a      	movs	r0, #10
 8006512:	f7ff ff35 	bl	8006380 <SYS_MicroDelay>
				HAL_GPIO_WritePin( US_GPIO_Port, usTriggerPin[currentUs], GPIO_PIN_RESET); //Trigger OFF
 8006516:	4b46      	ldr	r3, [pc, #280]	; (8006630 <main+0x280>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a48      	ldr	r2, [pc, #288]	; (800663c <main+0x28c>)
 800651c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006520:	2200      	movs	r2, #0
 8006522:	4619      	mov	r1, r3
 8006524:	4846      	ldr	r0, [pc, #280]	; (8006640 <main+0x290>)
 8006526:	f7fd f8e4 	bl	80036f2 <HAL_GPIO_WritePin>
				sendTrig = 0;
 800652a:	4b42      	ldr	r3, [pc, #264]	; (8006634 <main+0x284>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e043      	b.n	80065ba <main+0x20a>

			} else {
				cnt += PERIOD_UPDATE_US;
 8006532:	4b44      	ldr	r3, [pc, #272]	; (8006644 <main+0x294>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3305      	adds	r3, #5
 8006538:	4a42      	ldr	r2, [pc, #264]	; (8006644 <main+0x294>)
 800653a:	6013      	str	r3, [r2, #0]

				if (usEchoReceived){	//If we received the echo
 800653c:	4b42      	ldr	r3, [pc, #264]	; (8006648 <main+0x298>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d021      	beq.n	8006588 <main+0x1d8>

					usDistance[currentUs] = usEchoDuration/58;
 8006544:	4b41      	ldr	r3, [pc, #260]	; (800664c <main+0x29c>)
 8006546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800654a:	f04f 023a 	mov.w	r2, #58	; 0x3a
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	f7fa fcfd 	bl	8000f50 <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	4b34      	ldr	r3, [pc, #208]	; (8006630 <main+0x280>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	b281      	uxth	r1, r0
 8006564:	4a3a      	ldr	r2, [pc, #232]	; (8006650 <main+0x2a0>)
 8006566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					usEchoReceived = 0;
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <main+0x298>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
					cnt = 0;
 8006570:	4b34      	ldr	r3, [pc, #208]	; (8006644 <main+0x294>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
					currentUs+=1;
 8006576:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <main+0x280>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <main+0x280>)
 800657e:	6013      	str	r3, [r2, #0]
					sendTrig = 1;
 8006580:	4b2c      	ldr	r3, [pc, #176]	; (8006634 <main+0x284>)
 8006582:	2201      	movs	r2, #1
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e018      	b.n	80065ba <main+0x20a>

				}else if (cnt >= TIMEOUT_US){ //If the echo is not received (i.e. sensor failure)
 8006588:	4b2e      	ldr	r3, [pc, #184]	; (8006644 <main+0x294>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b31      	cmp	r3, #49	; 0x31
 800658e:	dd14      	ble.n	80065ba <main+0x20a>

					usDistance[currentUs] = 1000;	//Set distance value out of range
 8006590:	4b27      	ldr	r3, [pc, #156]	; (8006630 <main+0x280>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a2e      	ldr	r2, [pc, #184]	; (8006650 <main+0x2a0>)
 8006596:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800659a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					usEchoReceived = 0;
 800659e:	4b2a      	ldr	r3, [pc, #168]	; (8006648 <main+0x298>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
					cnt = 0;
 80065a4:	4b27      	ldr	r3, [pc, #156]	; (8006644 <main+0x294>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
					currentUs+=1;
 80065aa:	4b21      	ldr	r3, [pc, #132]	; (8006630 <main+0x280>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	4a1f      	ldr	r2, [pc, #124]	; (8006630 <main+0x280>)
 80065b2:	6013      	str	r3, [r2, #0]
					sendTrig = 1;
 80065b4:	4b1f      	ldr	r3, [pc, #124]	; (8006634 <main+0x284>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
				}
			}


			if (currentUs == 6){	//When all the us sensors have been performed, restart with first us sensor (0) and send data to can
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <main+0x280>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b06      	cmp	r3, #6
 80065c0:	d105      	bne.n	80065ce <main+0x21e>
				currentUs = 0;
 80065c2:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <main+0x280>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
				CAN_SEND_US = 1;
 80065c8:	4b22      	ldr	r3, [pc, #136]	; (8006654 <main+0x2a4>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
			}
		}

        /* Update motors command*/
        if (UPDATE_CMD_FLAG){
 80065ce:	4b22      	ldr	r3, [pc, #136]	; (8006658 <main+0x2a8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04d      	beq.n	8006672 <main+0x2c2>
            UPDATE_CMD_FLAG = 0;
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <main+0x2a8>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
            
			if (mode == 0){	//Calibration Mode
 80065dc:	4b1f      	ldr	r3, [pc, #124]	; (800665c <main+0x2ac>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d13d      	bne.n	8006660 <main+0x2b0>
            	calibrate();
 80065e4:	f7ff fa8a 	bl	8005afc <calibrate>
            	mode = 1;
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <main+0x2ac>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e040      	b.n	8006672 <main+0x2c2>
 80065f0:	20000110 	.word	0x20000110
 80065f4:	200001ac 	.word	0x200001ac
 80065f8:	200001c8 	.word	0x200001c8
 80065fc:	2000020c 	.word	0x2000020c
 8006600:	2000024c 	.word	0x2000024c
 8006604:	200002cc 	.word	0x200002cc
 8006608:	20000158 	.word	0x20000158
 800660c:	2000009c 	.word	0x2000009c
 8006610:	2000028c 	.word	0x2000028c
 8006614:	0800d100 	.word	0x0800d100
 8006618:	0800e100 	.word	0x0800e100
 800661c:	be746433 	.word	0xbe746433
 8006620:	44268707 	.word	0x44268707
 8006624:	0800a100 	.word	0x0800a100
 8006628:	0800b100 	.word	0x0800b100
 800662c:	20000008 	.word	0x20000008
 8006630:	20000198 	.word	0x20000198
 8006634:	20000014 	.word	0x20000014
 8006638:	20000018 	.word	0x20000018
 800663c:	2000001c 	.word	0x2000001c
 8006640:	40011000 	.word	0x40011000
 8006644:	2000019c 	.word	0x2000019c
 8006648:	20000184 	.word	0x20000184
 800664c:	20000190 	.word	0x20000190
 8006650:	200001a0 	.word	0x200001a0
 8006654:	20000154 	.word	0x20000154
 8006658:	20000004 	.word	0x20000004
 800665c:	20000000 	.word	0x20000000
			}
			else{	//Control Mode
            	car_control(leftRearSpeed,rightRearSpeed, steeringSpeed);
 8006660:	4b60      	ldr	r3, [pc, #384]	; (80067e4 <main+0x434>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a60      	ldr	r2, [pc, #384]	; (80067e8 <main+0x438>)
 8006666:	6811      	ldr	r1, [r2, #0]
 8006668:	4a60      	ldr	r2, [pc, #384]	; (80067ec <main+0x43c>)
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff fcb7 	bl	8005fe0 <car_control>
			}
        }
        
        /* CAN : Sending data*/
        if (CAN_SEND_MOTORS){
 8006672:	4b5f      	ldr	r3, [pc, #380]	; (80067f0 <main+0x440>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d033      	beq.n	80066e2 <main+0x332>

        	//Motors data
        	CAN_SEND_MOTORS = 0;
 800667a:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <main+0x440>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]

        	//Number of sensor pulses since last message (left rear wheel and right rear wheel)
        	data[0] = nbImpulsionG;
 8006680:	4b5c      	ldr	r3, [pc, #368]	; (80067f4 <main+0x444>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4b5c      	ldr	r3, [pc, #368]	; (80067f8 <main+0x448>)
 8006688:	701a      	strb	r2, [r3, #0]
        	data[1] = nbImpulsionD;
 800668a:	4b5c      	ldr	r3, [pc, #368]	; (80067fc <main+0x44c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	4b59      	ldr	r3, [pc, #356]	; (80067f8 <main+0x448>)
 8006692:	705a      	strb	r2, [r3, #1]
        	nbImpulsionG = 0;
 8006694:	4b57      	ldr	r3, [pc, #348]	; (80067f4 <main+0x444>)
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
        	nbImpulsionD = 0;
 800669a:	4b58      	ldr	r3, [pc, #352]	; (80067fc <main+0x44c>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

            data[2] = (VMG_mes >> 8) & 0xFF; // Left Rear Speed MSB
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <main+0x450>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0a1b      	lsrs	r3, r3, #8
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	4b53      	ldr	r3, [pc, #332]	; (80067f8 <main+0x448>)
 80066aa:	709a      	strb	r2, [r3, #2]
            data[3] = VMG_mes & 0xFF; 	//LSB
 80066ac:	4b54      	ldr	r3, [pc, #336]	; (8006800 <main+0x450>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	4b51      	ldr	r3, [pc, #324]	; (80067f8 <main+0x448>)
 80066b4:	70da      	strb	r2, [r3, #3]
            
            data[4] = (VMD_mes >> 8) & 0xFF; // Right Rear Speed MSB
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <main+0x454>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4b4e      	ldr	r3, [pc, #312]	; (80067f8 <main+0x448>)
 80066c0:	711a      	strb	r2, [r3, #4]
            data[5] = VMD_mes & 0xFF; // LSB
 80066c2:	4b50      	ldr	r3, [pc, #320]	; (8006804 <main+0x454>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b4b      	ldr	r3, [pc, #300]	; (80067f8 <main+0x448>)
 80066ca:	715a      	strb	r2, [r3, #5]
            
            data[6] = steering_get_angle() & 0xFF;	//Steering Angle MSB
 80066cc:	f000 f982 	bl	80069d4 <steering_get_angle>
 80066d0:	4603      	mov	r3, r0
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	4b48      	ldr	r3, [pc, #288]	; (80067f8 <main+0x448>)
 80066d6:	719a      	strb	r2, [r3, #6]
            
            CAN_Send(data, CAN_ID_MOTORS_DATA);
 80066d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066dc:	4846      	ldr	r0, [pc, #280]	; (80067f8 <main+0x448>)
 80066de:	f7ff fbb9 	bl	8005e54 <CAN_Send>

         }
         if (CAN_SEND_BATT){
 80066e2:	4b49      	ldr	r3, [pc, #292]	; (8006808 <main+0x458>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d012      	beq.n	8006710 <main+0x360>
        	//Battery Level
			CAN_SEND_BATT= 0;
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <main+0x458>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]

            data[0] = (ADCBUF[0] >> 8) & 0xFF; // Vbatt MSB
 80066f0:	4b46      	ldr	r3, [pc, #280]	; (800680c <main+0x45c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4b3f      	ldr	r3, [pc, #252]	; (80067f8 <main+0x448>)
 80066fa:	701a      	strb	r2, [r3, #0]
            data[1] = ADCBUF[0] & 0xFF; 	//LSB
 80066fc:	4b43      	ldr	r3, [pc, #268]	; (800680c <main+0x45c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4b3d      	ldr	r3, [pc, #244]	; (80067f8 <main+0x448>)
 8006704:	705a      	strb	r2, [r3, #1]

			CAN_Send(data, CAN_ID_BATT_LEVEL);
 8006706:	f240 2173 	movw	r1, #627	; 0x273
 800670a:	483b      	ldr	r0, [pc, #236]	; (80067f8 <main+0x448>)
 800670c:	f7ff fba2 	bl	8005e54 <CAN_Send>

		 }

         if (CAN_SEND_US){
 8006710:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <main+0x460>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d054      	beq.n	80067c2 <main+0x412>
        	//Sending US1 data (front)
			data[0] = (usDistance[0] >> 8) & 0xFF;	//US Front Left
 8006718:	4b3e      	ldr	r3, [pc, #248]	; (8006814 <main+0x464>)
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	b29b      	uxth	r3, r3
 8006720:	b2da      	uxtb	r2, r3
 8006722:	4b35      	ldr	r3, [pc, #212]	; (80067f8 <main+0x448>)
 8006724:	701a      	strb	r2, [r3, #0]
			data[1] = usDistance[0] & 0xFF;
 8006726:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <main+0x464>)
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <main+0x448>)
 800672e:	705a      	strb	r2, [r3, #1]

			data[2] = (usDistance[1] >> 8) & 0xFF;	//US Front Center
 8006730:	4b38      	ldr	r3, [pc, #224]	; (8006814 <main+0x464>)
 8006732:	885b      	ldrh	r3, [r3, #2]
 8006734:	0a1b      	lsrs	r3, r3, #8
 8006736:	b29b      	uxth	r3, r3
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b2f      	ldr	r3, [pc, #188]	; (80067f8 <main+0x448>)
 800673c:	709a      	strb	r2, [r3, #2]
			data[3] = usDistance[1] & 0xFF;
 800673e:	4b35      	ldr	r3, [pc, #212]	; (8006814 <main+0x464>)
 8006740:	885b      	ldrh	r3, [r3, #2]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <main+0x448>)
 8006746:	70da      	strb	r2, [r3, #3]

			data[4] = (usDistance[2] >> 8) & 0xFF;	//US Front Right
 8006748:	4b32      	ldr	r3, [pc, #200]	; (8006814 <main+0x464>)
 800674a:	889b      	ldrh	r3, [r3, #4]
 800674c:	0a1b      	lsrs	r3, r3, #8
 800674e:	b29b      	uxth	r3, r3
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4b29      	ldr	r3, [pc, #164]	; (80067f8 <main+0x448>)
 8006754:	711a      	strb	r2, [r3, #4]
			data[5] = usDistance[2] & 0xFF;
 8006756:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <main+0x464>)
 8006758:	889b      	ldrh	r3, [r3, #4]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	4b26      	ldr	r3, [pc, #152]	; (80067f8 <main+0x448>)
 800675e:	715a      	strb	r2, [r3, #5]

			CAN_Send(data, CAN_ID_US1);
 8006760:	f240 2111 	movw	r1, #529	; 0x211
 8006764:	4824      	ldr	r0, [pc, #144]	; (80067f8 <main+0x448>)
 8006766:	f7ff fb75 	bl	8005e54 <CAN_Send>

			//Sending US2 data (rear)
			data[0] = (usDistance[3] >> 8) & 0xFF;	//US Rear Left
 800676a:	4b2a      	ldr	r3, [pc, #168]	; (8006814 <main+0x464>)
 800676c:	88db      	ldrh	r3, [r3, #6]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	b2da      	uxtb	r2, r3
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <main+0x448>)
 8006776:	701a      	strb	r2, [r3, #0]
			data[1] = usDistance[3] & 0xFF;
 8006778:	4b26      	ldr	r3, [pc, #152]	; (8006814 <main+0x464>)
 800677a:	88db      	ldrh	r3, [r3, #6]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <main+0x448>)
 8006780:	705a      	strb	r2, [r3, #1]

			data[2] = (usDistance[4] >> 8) & 0xFF;	//US Rear Center
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <main+0x464>)
 8006784:	891b      	ldrh	r3, [r3, #8]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b29b      	uxth	r3, r3
 800678a:	b2da      	uxtb	r2, r3
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <main+0x448>)
 800678e:	709a      	strb	r2, [r3, #2]
			data[3] = usDistance[4] & 0xFF;
 8006790:	4b20      	ldr	r3, [pc, #128]	; (8006814 <main+0x464>)
 8006792:	891b      	ldrh	r3, [r3, #8]
 8006794:	b2da      	uxtb	r2, r3
 8006796:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <main+0x448>)
 8006798:	70da      	strb	r2, [r3, #3]

			data[4] = (usDistance[5] >> 8) & 0xFF;	//US Rear Right
 800679a:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <main+0x464>)
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <main+0x448>)
 80067a6:	711a      	strb	r2, [r3, #4]
			data[5] = usDistance[5] & 0xFF;
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <main+0x464>)
 80067aa:	895b      	ldrh	r3, [r3, #10]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <main+0x448>)
 80067b0:	715a      	strb	r2, [r3, #5]

			CAN_Send(data, CAN_ID_US2);
 80067b2:	f240 2121 	movw	r1, #545	; 0x221
 80067b6:	4810      	ldr	r0, [pc, #64]	; (80067f8 <main+0x448>)
 80067b8:	f7ff fb4c 	bl	8005e54 <CAN_Send>

			CAN_SEND_US = 0;
 80067bc:	4b14      	ldr	r3, [pc, #80]	; (8006810 <main+0x460>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
        }


        if (commCheckingRequest){
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <main+0x468>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f43f ae83 	beq.w	80064d2 <main+0x122>

			data[1] = COMM_CHECKING_ACK;
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <main+0x448>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	705a      	strb	r2, [r3, #1]

			CAN_Send(data,CAN_ID_COMM_CHECKING); //Send ack
 80067d2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80067d6:	4808      	ldr	r0, [pc, #32]	; (80067f8 <main+0x448>)
 80067d8:	f7ff fb3c 	bl	8005e54 <CAN_Send>

			commCheckingRequest = 0;
 80067dc:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <main+0x468>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
    	if (US_FLAG==1)
 80067e2:	e676      	b.n	80064d2 <main+0x122>
 80067e4:	20000030 	.word	0x20000030
 80067e8:	20000034 	.word	0x20000034
 80067ec:	20000038 	.word	0x20000038
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	2000017c 	.word	0x2000017c
 80067f8:	20000028 	.word	0x20000028
 80067fc:	20000180 	.word	0x20000180
 8006800:	2000016c 	.word	0x2000016c
 8006804:	20000170 	.word	0x20000170
 8006808:	20000010 	.word	0x20000010
 800680c:	20000158 	.word	0x20000158
 8006810:	20000154 	.word	0x20000154
 8006814:	200001a0 	.word	0x200001a0
 8006818:	200001ec 	.word	0x200001ec

0800681c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b094      	sub	sp, #80	; 0x50
 8006820:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_PeriphCLKInitTypeDef PeriphClkInit;
    
    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006822:	2302      	movs	r3, #2
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006826:	2301      	movs	r3, #1
 8006828:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSICalibrationValue = 16;
 800682a:	2310      	movs	r3, #16
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800682e:	2302      	movs	r3, #2
 8006830:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8006832:	2300      	movs	r3, #0
 8006834:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006836:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800683c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006840:	4618      	mov	r0, r3
 8006842:	f7fc ff87 	bl	8003754 <HAL_RCC_OscConfig>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <SystemClock_Config+0x3a>
    {
        _Error_Handler(__FILE__, __LINE__);
 800684c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006850:	4821      	ldr	r0, [pc, #132]	; (80068d8 <SystemClock_Config+0xbc>)
 8006852:	f000 f845 	bl	80068e0 <_Error_Handler>
    }
    
    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006856:	230f      	movs	r3, #15
 8006858:	617b      	str	r3, [r7, #20]
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800685a:	2302      	movs	r3, #2
 800685c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006866:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006868:	2300      	movs	r3, #0
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd f9d2 	bl	8003c1c <HAL_RCC_ClockConfig>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <SystemClock_Config+0x6c>
    {
        _Error_Handler(__FILE__, __LINE__);
 800687e:	f240 11dd 	movw	r1, #477	; 0x1dd
 8006882:	4815      	ldr	r0, [pc, #84]	; (80068d8 <SystemClock_Config+0xbc>)
 8006884:	f000 f82c 	bl	80068e0 <_Error_Handler>
    }
    
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006888:	2302      	movs	r3, #2
 800688a:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800688c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006890:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	4618      	mov	r0, r3
 8006896:	f7fd fb65 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <SystemClock_Config+0x8e>
    {
        _Error_Handler(__FILE__, __LINE__);
 80068a0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80068a4:	480c      	ldr	r0, [pc, #48]	; (80068d8 <SystemClock_Config+0xbc>)
 80068a6:	f000 f81b 	bl	80068e0 <_Error_Handler>
    }
    
    /**Configure the Systick interrupt time
     */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80068aa:	f7fd fb09 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 80068ae:	4603      	mov	r3, r0
 80068b0:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <SystemClock_Config+0xc0>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fc f94c 	bl	8002b56 <HAL_SYSTICK_Config>
    
    /**Configure the Systick
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80068be:	2004      	movs	r0, #4
 80068c0:	f7fc f956 	bl	8002b70 <HAL_SYSTICK_CLKSourceConfig>
    
    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 15U);
 80068c4:	220f      	movs	r2, #15
 80068c6:	2100      	movs	r1, #0
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	f7fc f919 	bl	8002b02 <HAL_NVIC_SetPriority>
}
 80068d0:	bf00      	nop
 80068d2:	3750      	adds	r7, #80	; 0x50
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	080075e8 	.word	0x080075e8
 80068dc:	10624dd3 	.word	0x10624dd3

080068e0 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
    /* User can add his own implementation to report the HAL error return state */
    /*while(1)
     {
     }*/
    /* USER CODE END Error_Handler_Debug */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <power_boostrap>:
//  Created by pehladik on 26/10/2019.
//

#include "power.h"

void power_boostrap(void){
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
    /* auto-maintien alim */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80068f8:	2201      	movs	r2, #1
 80068fa:	2140      	movs	r1, #64	; 0x40
 80068fc:	4802      	ldr	r0, [pc, #8]	; (8006908 <power_boostrap+0x14>)
 80068fe:	f7fc fef8 	bl	80036f2 <HAL_GPIO_WritePin>
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40010800 	.word	0x40010800
 800690c:	00000000 	.word	0x00000000

08006910 <steering_set_speed>:
extern uint32_t ADCBUF[5];

/* Programs ------------------------------------------------------------------*/

//Set the speed of the steering motor. Speed value has to be between 0% and 100%
void steering_set_speed(GPIO_PinState en_steering, int speed){
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	6039      	str	r1, [r7, #0]
 800691a:	71fb      	strb	r3, [r7, #7]
    
	//Normalize value between LEFT_MAX_SPEED_STEERING and RIGHT_MAX_SPEED_STEERING (because CAN order is between 0 and 100)
	speed = ((RIGHT_MAX_SPEED_STEERING-LEFT_MAX_SPEED_STEERING)/100.0) * speed + LEFT_MAX_SPEED_STEERING;
 800691c:	6838      	ldr	r0, [r7, #0]
 800691e:	f7f9 fd79 	bl	8000414 <__aeabi_i2d>
 8006922:	a325      	add	r3, pc, #148	; (adr r3, 80069b8 <steering_set_speed+0xa8>)
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f7f9 fdde 	bl	80004e8 <__aeabi_dmul>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <steering_set_speed+0xb0>)
 800693a:	f7f9 fc1f 	bl	800017c <__adddf3>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	f7f9 ffe1 	bl	800090c <__aeabi_d2iz>
 800694a:	4603      	mov	r3, r0
 800694c:	603b      	str	r3, [r7, #0]

    /* Threshold rotating speed of steering wheels*/
    if (speed > RIGHT_MAX_SPEED_STEERING){
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b5a      	cmp	r3, #90	; 0x5a
 8006952:	dd02      	ble.n	800695a <steering_set_speed+0x4a>
        speed = RIGHT_MAX_SPEED_STEERING;
 8006954:	235a      	movs	r3, #90	; 0x5a
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	e004      	b.n	8006964 <steering_set_speed+0x54>
    } else if (speed < LEFT_MAX_SPEED_STEERING){
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b09      	cmp	r3, #9
 800695e:	dc01      	bgt.n	8006964 <steering_set_speed+0x54>
        speed  = LEFT_MAX_SPEED_STEERING;
 8006960:	230a      	movs	r3, #10
 8006962:	603b      	str	r3, [r7, #0]
    }
    
    speed = 3200 * ( speed/ 100.0 );
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7f9 fd55 	bl	8000414 <__aeabi_i2d>
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <steering_set_speed+0xb4>)
 8006970:	f7f9 fee4 	bl	800073c <__aeabi_ddiv>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4610      	mov	r0, r2
 800697a:	4619      	mov	r1, r3
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <steering_set_speed+0xb8>)
 8006982:	f7f9 fdb1 	bl	80004e8 <__aeabi_dmul>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4610      	mov	r0, r2
 800698c:	4619      	mov	r1, r3
 800698e:	f7f9 ffbd 	bl	800090c <__aeabi_d2iz>
 8006992:	4603      	mov	r3, r0
 8006994:	603b      	str	r3, [r7, #0]
    TIM1->CCR3 = speed;
 8006996:	4a0d      	ldr	r2, [pc, #52]	; (80069cc <steering_set_speed+0xbc>)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	63d3      	str	r3, [r2, #60]	; 0x3c
    
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_12, en_steering);  //PC12  AV
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	461a      	mov	r2, r3
 80069a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069a4:	480a      	ldr	r0, [pc, #40]	; (80069d0 <steering_set_speed+0xc0>)
 80069a6:	f7fc fea4 	bl	80036f2 <HAL_GPIO_WritePin>
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	f3af 8000 	nop.w
 80069b8:	9999999a 	.word	0x9999999a
 80069bc:	3fe99999 	.word	0x3fe99999
 80069c0:	40240000 	.word	0x40240000
 80069c4:	40590000 	.word	0x40590000
 80069c8:	40a90000 	.word	0x40a90000
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40011000 	.word	0x40011000

080069d4 <steering_get_angle>:

//return the current angle between 0 (full left) and 200 (full right)
int steering_get_angle(void){
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
	if (need_read_calibration==1){
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <steering_get_angle+0x70>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d104      	bne.n	80069ec <steering_get_angle+0x18>
		readCalibrationData();
 80069e2:	f000 f899 	bl	8006b18 <readCalibrationData>
		need_read_calibration=0;
 80069e6:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <steering_get_angle+0x70>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
	}

	int steeringSensor = (int) ADCBUF[1];
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <steering_get_angle+0x74>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	603b      	str	r3, [r7, #0]
    int currentAngle = (steering_sensor_coef_a*steeringSensor + steering_sensor_coef_b);
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f7fa f86c 	bl	8000ad0 <__aeabi_i2f>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <steering_get_angle+0x78>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7fa f8b9 	bl	8000b78 <__aeabi_fmul>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <steering_get_angle+0x7c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f7f9 ffa9 	bl	8000968 <__addsf3>
 8006a16:	4603      	mov	r3, r0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fa fa73 	bl	8000f04 <__aeabi_f2iz>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	607b      	str	r3, [r7, #4]
    if (currentAngle > ANGLE_RIGHT_VALUE){
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2bc8      	cmp	r3, #200	; 0xc8
 8006a26:	dd02      	ble.n	8006a2e <steering_get_angle+0x5a>
    	currentAngle = ANGLE_RIGHT_VALUE;
 8006a28:	23c8      	movs	r3, #200	; 0xc8
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	e004      	b.n	8006a38 <steering_get_angle+0x64>

    }else if (currentAngle < ANGLE_LEFT_VALUE){
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	da01      	bge.n	8006a38 <steering_get_angle+0x64>
    	currentAngle = ANGLE_LEFT_VALUE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	607b      	str	r3, [r7, #4]
    }

    return currentAngle;
 8006a38:	687b      	ldr	r3, [r7, #4]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	2000003c 	.word	0x2000003c
 8006a48:	20000158 	.word	0x20000158
 8006a4c:	200001f0 	.word	0x200001f0
 8006a50:	200001f4 	.word	0x200001f4

08006a54 <steering_move_with_button>:
int steering_is_a_button_pressed(){
	return ((!HAL_GPIO_ReadPin(GPIOB, pin_bt_right_front_wheel)) || (!HAL_GPIO_ReadPin(GPIOB, pin_bt_left_front_wheel)));
}	

//move steering with L/R buttons
void steering_move_with_button(void){
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
    static int previous_value_right = GPIO_PIN_RESET;
    static int previous_value_left = GPIO_PIN_RESET;
    int current_value_right = !HAL_GPIO_ReadPin(GPIOB, pin_bt_right_front_wheel);
 8006a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a5e:	482b      	ldr	r0, [pc, #172]	; (8006b0c <steering_move_with_button+0xb8>)
 8006a60:	f7fc fe30 	bl	80036c4 <HAL_GPIO_ReadPin>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	607b      	str	r3, [r7, #4]
    int current_value_left = !HAL_GPIO_ReadPin(GPIOB, pin_bt_left_front_wheel);
 8006a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a76:	4825      	ldr	r0, [pc, #148]	; (8006b0c <steering_move_with_button+0xb8>)
 8006a78:	f7fc fe24 	bl	80036c4 <HAL_GPIO_ReadPin>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bf0c      	ite	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	2300      	movne	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	603b      	str	r3, [r7, #0]
    
    if (
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <steering_move_with_button+0x42>
				((current_value_right == GPIO_PIN_SET) && (current_value_left == GPIO_PIN_SET))
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d00d      	beq.n	8006ab2 <steering_move_with_button+0x5e>
        || ((current_value_right == GPIO_PIN_RESET) && (previous_value_right == GPIO_PIN_SET))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d103      	bne.n	8006aa4 <steering_move_with_button+0x50>
 8006a9c:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <steering_move_with_button+0xbc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d006      	beq.n	8006ab2 <steering_move_with_button+0x5e>
        || ((current_value_left == GPIO_PIN_RESET) && (previous_value_left == GPIO_PIN_SET))
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10e      	bne.n	8006ac8 <steering_move_with_button+0x74>
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <steering_move_with_button+0xc0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d10a      	bne.n	8006ac8 <steering_move_with_button+0x74>
				){
        steering_set_speed(GPIO_PIN_RESET, NO_STEERING);
 8006ab2:	2132      	movs	r1, #50	; 0x32
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7ff ff2b 	bl	8006910 <steering_set_speed>
        previous_value_right = GPIO_PIN_RESET;
 8006aba:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <steering_move_with_button+0xbc>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
        previous_value_left = GPIO_PIN_RESET;
 8006ac0:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <steering_move_with_button+0xc0>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e01d      	b.n	8006b04 <steering_move_with_button+0xb0>
    } else if ((current_value_right == GPIO_PIN_SET) && (previous_value_right == GPIO_PIN_RESET)){
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d10b      	bne.n	8006ae6 <steering_move_with_button+0x92>
 8006ace:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <steering_move_with_button+0xbc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <steering_move_with_button+0x92>
        steering_set_speed(GPIO_PIN_SET, RIGHT_MAX_SPEED_STEERING);
 8006ad6:	215a      	movs	r1, #90	; 0x5a
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f7ff ff19 	bl	8006910 <steering_set_speed>
        previous_value_right = GPIO_PIN_SET;
 8006ade:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <steering_move_with_button+0xbc>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e00e      	b.n	8006b04 <steering_move_with_button+0xb0>
    } else if ((current_value_left == GPIO_PIN_SET) && (previous_value_left == GPIO_PIN_RESET)){
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d10b      	bne.n	8006b04 <steering_move_with_button+0xb0>
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <steering_move_with_button+0xc0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d107      	bne.n	8006b04 <steering_move_with_button+0xb0>
           steering_set_speed(GPIO_PIN_SET, LEFT_MAX_SPEED_STEERING);
 8006af4:	210a      	movs	r1, #10
 8006af6:	2001      	movs	r0, #1
 8006af8:	f7ff ff0a 	bl	8006910 <steering_set_speed>
           previous_value_left = GPIO_PIN_SET;
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <steering_move_with_button+0xc0>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
    }
}
 8006b02:	e7ff      	b.n	8006b04 <steering_move_with_button+0xb0>
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40010c00 	.word	0x40010c00
 8006b10:	200001f8 	.word	0x200001f8
 8006b14:	200001fc 	.word	0x200001fc

08006b18 <readCalibrationData>:

//Read steering coefficients (a and b) in flash memory
void readCalibrationData(){
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
	steering_sensor_coef_a = Flash_Read_NUM(STEERING_CALIBRATION_A_ADDR);
 8006b1c:	4806      	ldr	r0, [pc, #24]	; (8006b38 <readCalibrationData+0x20>)
 8006b1e:	f7fe fedf 	bl	80058e0 <Flash_Read_NUM>
 8006b22:	4603      	mov	r3, r0
 8006b24:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <readCalibrationData+0x24>)
 8006b26:	6013      	str	r3, [r2, #0]
	steering_sensor_coef_b = Flash_Read_NUM(STEERING_CALIBRATION_B_ADDR);
 8006b28:	4805      	ldr	r0, [pc, #20]	; (8006b40 <readCalibrationData+0x28>)
 8006b2a:	f7fe fed9 	bl	80058e0 <Flash_Read_NUM>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <readCalibrationData+0x2c>)
 8006b32:	6013      	str	r3, [r2, #0]
}
 8006b34:	bf00      	nop
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	0800a100 	.word	0x0800a100
 8006b3c:	200001f0 	.word	0x200001f0
 8006b40:	0800b100 	.word	0x0800b100
 8006b44:	200001f4 	.word	0x200001f4

08006b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b4e:	4b24      	ldr	r3, [pc, #144]	; (8006be0 <HAL_MspInit+0x98>)
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	4a23      	ldr	r2, [pc, #140]	; (8006be0 <HAL_MspInit+0x98>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6193      	str	r3, [r2, #24]
 8006b5a:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <HAL_MspInit+0x98>)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b66:	2003      	movs	r0, #3
 8006b68:	f7fb ffc0 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	f06f 000b 	mvn.w	r0, #11
 8006b74:	f7fb ffc5 	bl	8002b02 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f06f 000a 	mvn.w	r0, #10
 8006b80:	f7fb ffbf 	bl	8002b02 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	f06f 0009 	mvn.w	r0, #9
 8006b8c:	f7fb ffb9 	bl	8002b02 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006b90:	2200      	movs	r2, #0
 8006b92:	2100      	movs	r1, #0
 8006b94:	f06f 0004 	mvn.w	r0, #4
 8006b98:	f7fb ffb3 	bl	8002b02 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	f06f 0003 	mvn.w	r0, #3
 8006ba4:	f7fb ffad 	bl	8002b02 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	f06f 0001 	mvn.w	r0, #1
 8006bb0:	f7fb ffa7 	bl	8002b02 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	f7fb ffa1 	bl	8002b02 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006bc0:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <HAL_MspInit+0x9c>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <HAL_MspInit+0x9c>)
 8006bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006bca:	6053      	str	r3, [r2, #4]
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <HAL_MspInit+0x9c>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <HAL_MspInit+0x9c>)
 8006bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bd6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40010000 	.word	0x40010000

08006be8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
	static int cmpt_can_motors = 0;
	static int cmpt_us = 0;
	static int cmpt_batt = 0;
  /* USER CODE END SysTick_IRQn 0 */
	
  HAL_IncTick();
 8006c04:	f7fa fb5a 	bl	80012bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006c08:	f7fb ffce 	bl	8002ba8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	cmpt_can_motors ++;
 8006c0c:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <SysTick_Handler+0x6c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <SysTick_Handler+0x6c>)
 8006c14:	6013      	str	r3, [r2, #0]
	cmpt_us++;
 8006c16:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <SysTick_Handler+0x70>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <SysTick_Handler+0x70>)
 8006c1e:	6013      	str	r3, [r2, #0]
	cmpt_batt++;
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <SysTick_Handler+0x74>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <SysTick_Handler+0x74>)
 8006c28:	6013      	str	r3, [r2, #0]
	
	if (cmpt_can_motors == PERIOD_SEND_MOTORS){
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <SysTick_Handler+0x6c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d105      	bne.n	8006c3e <SysTick_Handler+0x3e>
		CAN_SEND_MOTORS = 1;
 8006c32:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <SysTick_Handler+0x78>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
		cmpt_can_motors = 0;
 8006c38:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <SysTick_Handler+0x6c>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
	}
	if (cmpt_us == PERIOD_UPDATE_US){
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <SysTick_Handler+0x70>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d105      	bne.n	8006c52 <SysTick_Handler+0x52>
		US_FLAG = 1;
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <SysTick_Handler+0x7c>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
		cmpt_us = 0;
 8006c4c:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <SysTick_Handler+0x70>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
	}
	if (cmpt_batt == PERIOD_SEND_BATT){
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <SysTick_Handler+0x74>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006c5a:	d105      	bne.n	8006c68 <SysTick_Handler+0x68>
		CAN_SEND_BATT = 1;
 8006c5c:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <SysTick_Handler+0x80>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
		cmpt_batt = 0;
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <SysTick_Handler+0x74>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8006c68:	bf00      	nop
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000200 	.word	0x20000200
 8006c70:	20000204 	.word	0x20000204
 8006c74:	20000208 	.word	0x20000208
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	20000008 	.word	0x20000008
 8006c80:	20000010 	.word	0x20000010

08006c84 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006c88:	4802      	ldr	r0, [pc, #8]	; (8006c94 <DMA1_Channel1_IRQHandler+0x10>)
 8006c8a:	f7fc f85f 	bl	8002d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006c8e:	bf00      	nop
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200000cc 	.word	0x200000cc

08006c98 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006c9c:	4802      	ldr	r0, [pc, #8]	; (8006ca8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8006c9e:	f7fb fa87 	bl	80021b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006ca2:	bf00      	nop
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000110 	.word	0x20000110

08006cac <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006cb0:	4802      	ldr	r0, [pc, #8]	; (8006cbc <TIM2_IRQHandler+0x10>)
 8006cb2:	f7fd fb1f 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	2000024c 	.word	0x2000024c

08006cc0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006cc4:	4802      	ldr	r0, [pc, #8]	; (8006cd0 <TIM3_IRQHandler+0x10>)
 8006cc6:	f7fd fb15 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000028c 	.word	0x2000028c

08006cd4 <TIM4_IRQHandler>:
/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006cd8:	4802      	ldr	r0, [pc, #8]	; (8006ce4 <TIM4_IRQHandler+0x10>)
 8006cda:	f7fd fb0b 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006cde:	bf00      	nop
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200002cc 	.word	0x200002cc

08006ce8 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI9_5_IRQHandler(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(US_Left_Echo_Pin);
 8006cec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006cf0:	f7fc fd18 	bl	8003724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(US_Center_Echo_Pin);
 8006cf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006cf8:	f7fc fd14 	bl	8003724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(US_Right_Echo_Pin);
 8006cfc:	2040      	movs	r0, #64	; 0x40
 8006cfe:	f7fc fd11 	bl	8003724 <HAL_GPIO_EXTI_IRQHandler>
}
 8006d02:	bf00      	nop
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006d0c:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <SystemInit+0x5c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <SystemInit+0x5c>)
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <SystemInit+0x5c>)
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	4911      	ldr	r1, [pc, #68]	; (8006d64 <SystemInit+0x5c>)
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <SystemInit+0x60>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006d24:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <SystemInit+0x5c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a0e      	ldr	r2, [pc, #56]	; (8006d64 <SystemInit+0x5c>)
 8006d2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <SystemInit+0x5c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <SystemInit+0x5c>)
 8006d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8006d40:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <SystemInit+0x5c>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a07      	ldr	r2, [pc, #28]	; (8006d64 <SystemInit+0x5c>)
 8006d46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006d4a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <SystemInit+0x5c>)
 8006d4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006d52:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <SystemInit+0x64>)
 8006d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d5a:	609a      	str	r2, [r3, #8]
#endif 
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr
 8006d64:	40021000 	.word	0x40021000
 8006d68:	f8ff0000 	.word	0xf8ff0000
 8006d6c:	e000ed00 	.word	0xe000ed00

08006d70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b090      	sub	sp, #64	; 0x40
 8006d74:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8006d76:	4b47      	ldr	r3, [pc, #284]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d78:	4a47      	ldr	r2, [pc, #284]	; (8006e98 <MX_TIM1_Init+0x128>)
 8006d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006d7c:	4b45      	ldr	r3, [pc, #276]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d82:	4b44      	ldr	r3, [pc, #272]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3200;
 8006d88:	4b42      	ldr	r3, [pc, #264]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d8a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8006d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d90:	4b40      	ldr	r3, [pc, #256]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006d96:	4b3f      	ldr	r3, [pc, #252]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d9c:	4b3d      	ldr	r3, [pc, #244]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006da2:	483c      	ldr	r0, [pc, #240]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006da4:	f7fd f9bf 	bl	8004126 <HAL_TIM_PWM_Init>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006dae:	2146      	movs	r1, #70	; 0x46
 8006db0:	483a      	ldr	r0, [pc, #232]	; (8006e9c <MX_TIM1_Init+0x12c>)
 8006db2:	f7ff fd95 	bl	80068e0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006db6:	2300      	movs	r3, #0
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006dbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4833      	ldr	r0, [pc, #204]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006dc6:	f7fe fabc 	bl	8005342 <HAL_TIMEx_MasterConfigSynchronization>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <MX_TIM1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006dd0:	214d      	movs	r1, #77	; 0x4d
 8006dd2:	4832      	ldr	r0, [pc, #200]	; (8006e9c <MX_TIM1_Init+0x12c>)
 8006dd4:	f7ff fd84 	bl	80068e0 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dd8:	2360      	movs	r3, #96	; 0x60
 8006dda:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 320;
 8006ddc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006de0:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006de2:	2300      	movs	r3, #0
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006de6:	2300      	movs	r3, #0
 8006de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006dee:	2300      	movs	r3, #0
 8006df0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006df6:	f107 031c 	add.w	r3, r7, #28
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4825      	ldr	r0, [pc, #148]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006e00:	f7fd fc1c 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <MX_TIM1_Init+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006e0a:	2159      	movs	r1, #89	; 0x59
 8006e0c:	4823      	ldr	r0, [pc, #140]	; (8006e9c <MX_TIM1_Init+0x12c>)
 8006e0e:	f7ff fd67 	bl	80068e0 <_Error_Handler>
  }

  sConfigOC.Pulse = 1600;
 8006e12:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8006e16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006e18:	f107 031c 	add.w	r3, r7, #28
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	481c      	ldr	r0, [pc, #112]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006e22:	f7fd fc0b 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <MX_TIM1_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006e2c:	215f      	movs	r1, #95	; 0x5f
 8006e2e:	481b      	ldr	r0, [pc, #108]	; (8006e9c <MX_TIM1_Init+0x12c>)
 8006e30:	f7ff fd56 	bl	80068e0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006e34:	f107 031c 	add.w	r3, r7, #28
 8006e38:	2208      	movs	r2, #8
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4815      	ldr	r0, [pc, #84]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006e3e:	f7fd fbfd 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <MX_TIM1_Init+0xe0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006e48:	2164      	movs	r1, #100	; 0x64
 8006e4a:	4814      	ldr	r0, [pc, #80]	; (8006e9c <MX_TIM1_Init+0x12c>)
 8006e4c:	f7ff fd48 	bl	80068e0 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006e6e:	463b      	mov	r3, r7
 8006e70:	4619      	mov	r1, r3
 8006e72:	4808      	ldr	r0, [pc, #32]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006e74:	f7fe fa0d 	bl	8005292 <HAL_TIMEx_ConfigBreakDeadTime>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <MX_TIM1_Init+0x116>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006e7e:	2170      	movs	r1, #112	; 0x70
 8006e80:	4806      	ldr	r0, [pc, #24]	; (8006e9c <MX_TIM1_Init+0x12c>)
 8006e82:	f7ff fd2d 	bl	80068e0 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8006e86:	4803      	ldr	r0, [pc, #12]	; (8006e94 <MX_TIM1_Init+0x124>)
 8006e88:	f000 f9ac 	bl	80071e4 <HAL_TIM_MspPostInit>

}
 8006e8c:	bf00      	nop
 8006e8e:	3740      	adds	r7, #64	; 0x40
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	2000020c 	.word	0x2000020c
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	080075f8 	.word	0x080075f8

08006ea0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
 8006ea6:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006eac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8006eae:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006eb0:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8006eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8006ebc:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006ebe:	f241 3287 	movw	r2, #4999	; 0x1387
 8006ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ec4:	4b29      	ldr	r3, [pc, #164]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eca:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006ed0:	4826      	ldr	r0, [pc, #152]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006ed2:	f7fd f8fd 	bl	80040d0 <HAL_TIM_Base_Init>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006edc:	2185      	movs	r1, #133	; 0x85
 8006ede:	4824      	ldr	r0, [pc, #144]	; (8006f70 <MX_TIM2_Init+0xd0>)
 8006ee0:	f7ff fcfe 	bl	80068e0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ee8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006eea:	f107 0318 	add.w	r3, r7, #24
 8006eee:	4619      	mov	r1, r3
 8006ef0:	481e      	ldr	r0, [pc, #120]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006ef2:	f7fd fc69 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006efc:	218b      	movs	r1, #139	; 0x8b
 8006efe:	481c      	ldr	r0, [pc, #112]	; (8006f70 <MX_TIM2_Init+0xd0>)
 8006f00:	f7ff fcee 	bl	80068e0 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8006f04:	4819      	ldr	r0, [pc, #100]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006f06:	f7fd f961 	bl	80041cc <HAL_TIM_IC_Init>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <MX_TIM2_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006f10:	2190      	movs	r1, #144	; 0x90
 8006f12:	4817      	ldr	r0, [pc, #92]	; (8006f70 <MX_TIM2_Init+0xd0>)
 8006f14:	f7ff fce4 	bl	80068e0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f20:	f107 0310 	add.w	r3, r7, #16
 8006f24:	4619      	mov	r1, r3
 8006f26:	4811      	ldr	r0, [pc, #68]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006f28:	f7fe fa0b 	bl	8005342 <HAL_TIMEx_MasterConfigSynchronization>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <MX_TIM2_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006f32:	2197      	movs	r1, #151	; 0x97
 8006f34:	480e      	ldr	r0, [pc, #56]	; (8006f70 <MX_TIM2_Init+0xd0>)
 8006f36:	f7ff fcd3 	bl	80068e0 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4806      	ldr	r0, [pc, #24]	; (8006f6c <MX_TIM2_Init+0xcc>)
 8006f52:	f7fd fad7 	bl	8004504 <HAL_TIM_IC_ConfigChannel>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <MX_TIM2_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006f5c:	21a0      	movs	r1, #160	; 0xa0
 8006f5e:	4804      	ldr	r0, [pc, #16]	; (8006f70 <MX_TIM2_Init+0xd0>)
 8006f60:	f7ff fcbe 	bl	80068e0 <_Error_Handler>
  }

}
 8006f64:	bf00      	nop
 8006f66:	3728      	adds	r7, #40	; 0x28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000024c 	.word	0x2000024c
 8006f70:	080075f8 	.word	0x080075f8

08006f74 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
	htim3.Instance = TIM3;
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006f7a:	4a10      	ldr	r2, [pc, #64]	; (8006fbc <MX_TIM3_Init+0x48>)
 8006f7c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64-1;
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006f80:	223f      	movs	r2, #63	; 0x3f
 8006f82:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f90:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f98:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006f9e:	4806      	ldr	r0, [pc, #24]	; (8006fb8 <MX_TIM3_Init+0x44>)
 8006fa0:	f7fd f896 	bl	80040d0 <HAL_TIM_Base_Init>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <MX_TIM3_Init+0x3e>
	{
	  _Error_Handler(__FILE__, __LINE__);
 8006faa:	21af      	movs	r1, #175	; 0xaf
 8006fac:	4804      	ldr	r0, [pc, #16]	; (8006fc0 <MX_TIM3_Init+0x4c>)
 8006fae:	f7ff fc97 	bl	80068e0 <_Error_Handler>
	}
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000028c 	.word	0x2000028c
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	080075f8 	.word	0x080075f8

08006fc4 <MX_TIM4_Init>:


/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim4.Instance = TIM4;
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006fcc:	4a31      	ldr	r2, [pc, #196]	; (8007094 <MX_TIM4_Init+0xd0>)
 8006fce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8006fd0:	4b2f      	ldr	r3, [pc, #188]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006fd2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8006fd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fd8:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8006fde:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006fe0:	f241 3287 	movw	r2, #4999	; 0x1387
 8006fe4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fe6:	4b2a      	ldr	r3, [pc, #168]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006ff2:	4827      	ldr	r0, [pc, #156]	; (8007090 <MX_TIM4_Init+0xcc>)
 8006ff4:	f7fd f86c 	bl	80040d0 <HAL_TIM_Base_Init>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <MX_TIM4_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006ffe:	21c3      	movs	r1, #195	; 0xc3
 8007000:	4825      	ldr	r0, [pc, #148]	; (8007098 <MX_TIM4_Init+0xd4>)
 8007002:	f7ff fc6d 	bl	80068e0 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800700a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800700c:	f107 0318 	add.w	r3, r7, #24
 8007010:	4619      	mov	r1, r3
 8007012:	481f      	ldr	r0, [pc, #124]	; (8007090 <MX_TIM4_Init+0xcc>)
 8007014:	f7fd fbd8 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <MX_TIM4_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800701e:	21c9      	movs	r1, #201	; 0xc9
 8007020:	481d      	ldr	r0, [pc, #116]	; (8007098 <MX_TIM4_Init+0xd4>)
 8007022:	f7ff fc5d 	bl	80068e0 <_Error_Handler>
  }

  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8007026:	481a      	ldr	r0, [pc, #104]	; (8007090 <MX_TIM4_Init+0xcc>)
 8007028:	f7fd f8d0 	bl	80041cc <HAL_TIM_IC_Init>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <MX_TIM4_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007032:	21ce      	movs	r1, #206	; 0xce
 8007034:	4818      	ldr	r0, [pc, #96]	; (8007098 <MX_TIM4_Init+0xd4>)
 8007036:	f7ff fc53 	bl	80068e0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007042:	f107 0310 	add.w	r3, r7, #16
 8007046:	4619      	mov	r1, r3
 8007048:	4811      	ldr	r0, [pc, #68]	; (8007090 <MX_TIM4_Init+0xcc>)
 800704a:	f7fe f97a 	bl	8005342 <HAL_TIMEx_MasterConfigSynchronization>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <MX_TIM4_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007054:	21d5      	movs	r1, #213	; 0xd5
 8007056:	4810      	ldr	r0, [pc, #64]	; (8007098 <MX_TIM4_Init+0xd4>)
 8007058:	f7ff fc42 	bl	80068e0 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800705c:	2300      	movs	r3, #0
 800705e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007060:	2301      	movs	r3, #1
 8007062:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800706c:	463b      	mov	r3, r7
 800706e:	2208      	movs	r2, #8
 8007070:	4619      	mov	r1, r3
 8007072:	4807      	ldr	r0, [pc, #28]	; (8007090 <MX_TIM4_Init+0xcc>)
 8007074:	f7fd fa46 	bl	8004504 <HAL_TIM_IC_ConfigChannel>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <MX_TIM4_Init+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800707e:	21de      	movs	r1, #222	; 0xde
 8007080:	4805      	ldr	r0, [pc, #20]	; (8007098 <MX_TIM4_Init+0xd4>)
 8007082:	f7ff fc2d 	bl	80068e0 <_Error_Handler>
  }

}
 8007086:	bf00      	nop
 8007088:	3728      	adds	r7, #40	; 0x28
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	200002cc 	.word	0x200002cc
 8007094:	40000800 	.word	0x40000800
 8007098:	080075f8 	.word	0x080075f8

0800709c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <HAL_TIM_PWM_MspInit+0x34>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d10b      	bne.n	80070c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_TIM_PWM_MspInit+0x38>)
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <HAL_TIM_PWM_MspInit+0x38>)
 80070b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070b8:	6193      	str	r3, [r2, #24]
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_TIM_PWM_MspInit+0x38>)
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40021000 	.word	0x40021000

080070d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_baseHandle->Instance==TIM2)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e8:	d12d      	bne.n	8007146 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80070ea:	4b39      	ldr	r3, [pc, #228]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	4a38      	ldr	r2, [pc, #224]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	61d3      	str	r3, [r2, #28]
 80070f6:	4b36      	ldr	r3, [pc, #216]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	697b      	ldr	r3, [r7, #20]
  
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710c:	2300      	movs	r3, #0
 800710e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007110:	f107 0318 	add.w	r3, r7, #24
 8007114:	4619      	mov	r1, r3
 8007116:	482f      	ldr	r0, [pc, #188]	; (80071d4 <HAL_TIM_Base_MspInit+0xfc>)
 8007118:	f7fc f94c 	bl	80033b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800711c:	4b2e      	ldr	r3, [pc, #184]	; (80071d8 <HAL_TIM_Base_MspInit+0x100>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a2d      	ldr	r2, [pc, #180]	; (80071d8 <HAL_TIM_Base_MspInit+0x100>)
 8007122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007126:	6053      	str	r3, [r2, #4]
 8007128:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <HAL_TIM_Base_MspInit+0x100>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a2a      	ldr	r2, [pc, #168]	; (80071d8 <HAL_TIM_Base_MspInit+0x100>)
 800712e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007132:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 5U);
 8007134:	2205      	movs	r2, #5
 8007136:	2100      	movs	r1, #0
 8007138:	201c      	movs	r0, #28
 800713a:	f7fb fce2 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800713e:	201c      	movs	r0, #28
 8007140:	f7fb fcfb 	bl	8002b3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007144:	e03f      	b.n	80071c6 <HAL_TIM_Base_MspInit+0xee>
  }else if(tim_baseHandle->Instance==TIM3)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a24      	ldr	r2, [pc, #144]	; (80071dc <HAL_TIM_Base_MspInit+0x104>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d114      	bne.n	800717a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	4a1e      	ldr	r2, [pc, #120]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 8007156:	f043 0302 	orr.w	r3, r3, #2
 800715a:	61d3      	str	r3, [r2, #28]
 800715c:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	201d      	movs	r0, #29
 800716e:	f7fb fcc8 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007172:	201d      	movs	r0, #29
 8007174:	f7fb fce1 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 8007178:	e025      	b.n	80071c6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <HAL_TIM_Base_MspInit+0x108>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d120      	bne.n	80071c6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 800718a:	f043 0304 	orr.w	r3, r3, #4
 800718e:	61d3      	str	r3, [r2, #28]
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_TIM_Base_MspInit+0xf8>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800719c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071aa:	f107 0318 	add.w	r3, r7, #24
 80071ae:	4619      	mov	r1, r3
 80071b0:	4808      	ldr	r0, [pc, #32]	; (80071d4 <HAL_TIM_Base_MspInit+0xfc>)
 80071b2:	f7fc f8ff 	bl	80033b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 4U);
 80071b6:	2204      	movs	r2, #4
 80071b8:	2100      	movs	r1, #0
 80071ba:	201e      	movs	r0, #30
 80071bc:	f7fb fca1 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80071c0:	201e      	movs	r0, #30
 80071c2:	f7fb fcba 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 80071c6:	bf00      	nop
 80071c8:	3728      	adds	r7, #40	; 0x28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40010c00 	.word	0x40010c00
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800

080071e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a15      	ldr	r2, [pc, #84]	; (8007248 <HAL_TIM_MspPostInit+0x64>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d124      	bne.n	8007240 <HAL_TIM_MspPostInit+0x5c>
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80071f6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80071fa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fc:	2302      	movs	r3, #2
 80071fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007200:	2302      	movs	r3, #2
 8007202:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007204:	f107 0308 	add.w	r3, r7, #8
 8007208:	4619      	mov	r1, r3
 800720a:	4810      	ldr	r0, [pc, #64]	; (800724c <HAL_TIM_MspPostInit+0x68>)
 800720c:	f7fc f8d2 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007210:	2303      	movs	r3, #3
 8007212:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007214:	2302      	movs	r3, #2
 8007216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007218:	2302      	movs	r3, #2
 800721a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	4619      	mov	r1, r3
 8007222:	480b      	ldr	r0, [pc, #44]	; (8007250 <HAL_TIM_MspPostInit+0x6c>)
 8007224:	f7fc f8c6 	bl	80033b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <HAL_TIM_MspPostInit+0x70>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	4a09      	ldr	r2, [pc, #36]	; (8007254 <HAL_TIM_MspPostInit+0x70>)
 800722e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007232:	6053      	str	r3, [r2, #4]
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <HAL_TIM_MspPostInit+0x70>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a06      	ldr	r2, [pc, #24]	; (8007254 <HAL_TIM_MspPostInit+0x70>)
 800723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007240:	bf00      	nop
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40010800 	.word	0x40010800
 8007250:	40010c00 	.word	0x40010c00
 8007254:	40010000 	.word	0x40010000

08007258 <startMicroSecondCounter>:

uint64_t timerOverflow = 0;
uint64_t microSecondTime = 0;

//Start TIM3 counter
void startMicroSecondCounter(){
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM_CR1_CEN;
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <startMicroSecondCounter+0x18>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a03      	ldr	r2, [pc, #12]	; (8007270 <startMicroSecondCounter+0x18>)
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	6013      	str	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr
 8007270:	40000400 	.word	0x40000400

08007274 <microSecondTimerOverflow>:

//Count overflows
void microSecondTimerOverflow(){
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
	timerOverflow +=1 ;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <microSecondTimerOverflow+0x20>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	1c50      	adds	r0, r2, #1
 8007280:	f143 0100 	adc.w	r1, r3, #0
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <microSecondTimerOverflow+0x20>)
 8007286:	e9c3 0100 	strd	r0, r1, [r3]
}
 800728a:	bf00      	nop
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000310 	.word	0x20000310

08007298 <microSecond>:

//return current time in microsecond
uint64_t microSecond(){
 8007298:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800729c:	af00      	add	r7, sp, #0
	microSecondTime = timerOverflow * TIM3->ARR + TIM3->CNT;
 800729e:	4913      	ldr	r1, [pc, #76]	; (80072ec <microSecond+0x54>)
 80072a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80072a2:	2000      	movs	r0, #0
 80072a4:	460c      	mov	r4, r1
 80072a6:	4605      	mov	r5, r0
 80072a8:	4911      	ldr	r1, [pc, #68]	; (80072f0 <microSecond+0x58>)
 80072aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ae:	fb00 fc05 	mul.w	ip, r0, r5
 80072b2:	fb04 f601 	mul.w	r6, r4, r1
 80072b6:	4466      	add	r6, ip
 80072b8:	fba4 2300 	umull	r2, r3, r4, r0
 80072bc:	18f1      	adds	r1, r6, r3
 80072be:	460b      	mov	r3, r1
 80072c0:	490a      	ldr	r1, [pc, #40]	; (80072ec <microSecond+0x54>)
 80072c2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80072c4:	2000      	movs	r0, #0
 80072c6:	4688      	mov	r8, r1
 80072c8:	4681      	mov	r9, r0
 80072ca:	eb12 0a08 	adds.w	sl, r2, r8
 80072ce:	eb43 0b09 	adc.w	fp, r3, r9
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <microSecond+0x5c>)
 80072d4:	e9c3 ab00 	strd	sl, fp, [r3]
	return microSecondTime;
 80072d8:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <microSecond+0x5c>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]

}
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40000400 	.word	0x40000400
 80072f0:	20000310 	.word	0x20000310
 80072f4:	20000318 	.word	0x20000318

080072f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80072fc:	4b12      	ldr	r3, [pc, #72]	; (8007348 <MX_USART2_UART_Init+0x50>)
 80072fe:	4a13      	ldr	r2, [pc, #76]	; (800734c <MX_USART2_UART_Init+0x54>)
 8007300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007302:	4b11      	ldr	r3, [pc, #68]	; (8007348 <MX_USART2_UART_Init+0x50>)
 8007304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <MX_USART2_UART_Init+0x50>)
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007310:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <MX_USART2_UART_Init+0x50>)
 8007312:	2200      	movs	r2, #0
 8007314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <MX_USART2_UART_Init+0x50>)
 8007318:	2200      	movs	r2, #0
 800731a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <MX_USART2_UART_Init+0x50>)
 800731e:	220c      	movs	r2, #12
 8007320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <MX_USART2_UART_Init+0x50>)
 8007324:	2200      	movs	r2, #0
 8007326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <MX_USART2_UART_Init+0x50>)
 800732a:	2200      	movs	r2, #0
 800732c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800732e:	4806      	ldr	r0, [pc, #24]	; (8007348 <MX_USART2_UART_Init+0x50>)
 8007330:	f7fe f87f 	bl	8005432 <HAL_UART_Init>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800733a:	2142      	movs	r1, #66	; 0x42
 800733c:	4804      	ldr	r0, [pc, #16]	; (8007350 <MX_USART2_UART_Init+0x58>)
 800733e:	f7ff facf 	bl	80068e0 <_Error_Handler>
  }

}
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000320 	.word	0x20000320
 800734c:	40004400 	.word	0x40004400
 8007350:	08007608 	.word	0x08007608

08007354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <HAL_UART_MspInit+0x4c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d117      	bne.n	8007396 <HAL_UART_MspInit+0x42>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007366:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <HAL_UART_MspInit+0x50>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	4a0e      	ldr	r2, [pc, #56]	; (80073a4 <HAL_UART_MspInit+0x50>)
 800736c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007370:	61d3      	str	r3, [r2, #28]
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <HAL_UART_MspInit+0x50>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800737e:	230c      	movs	r3, #12
 8007380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007382:	2302      	movs	r3, #2
 8007384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007386:	2302      	movs	r3, #2
 8007388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800738a:	f107 0310 	add.w	r3, r7, #16
 800738e:	4619      	mov	r1, r3
 8007390:	4805      	ldr	r0, [pc, #20]	; (80073a8 <HAL_UART_MspInit+0x54>)
 8007392:	f7fc f80f 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007396:	bf00      	nop
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40004400 	.word	0x40004400
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40010800 	.word	0x40010800

080073ac <wheels_set_speed>:
#include "wheels.h"


void wheels_set_speed(GPIO_PinState en_right, GPIO_PinState en_left, int speed_right, int speed_left){
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60ba      	str	r2, [r7, #8]
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	460b      	mov	r3, r1
 80073bc:	73bb      	strb	r3, [r7, #14]

	//Normalize value between MAX_SPEED_FORWARD and MAX_SPEED_BACKWARD (because CAN order is between 0 and 100)
	speed_right = ((MAX_SPEED_FORWARD-MAX_SPEED_BACKWARD)/100.0) * speed_right + MAX_SPEED_BACKWARD;
 80073be:	68b8      	ldr	r0, [r7, #8]
 80073c0:	f7f9 f828 	bl	8000414 <__aeabi_i2d>
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <wheels_set_speed+0x138>)
 80073ca:	f7f9 f88d 	bl	80004e8 <__aeabi_dmul>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	4b43      	ldr	r3, [pc, #268]	; (80074e8 <wheels_set_speed+0x13c>)
 80073dc:	f7f8 fece 	bl	800017c <__adddf3>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	f7f9 fa90 	bl	800090c <__aeabi_d2iz>
 80073ec:	4603      	mov	r3, r0
 80073ee:	60bb      	str	r3, [r7, #8]
	speed_left = ((MAX_SPEED_FORWARD-MAX_SPEED_BACKWARD)/100.0) * speed_left + MAX_SPEED_BACKWARD;
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7f9 f80f 	bl	8000414 <__aeabi_i2d>
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	4b3a      	ldr	r3, [pc, #232]	; (80074e4 <wheels_set_speed+0x138>)
 80073fc:	f7f9 f874 	bl	80004e8 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4610      	mov	r0, r2
 8007406:	4619      	mov	r1, r3
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <wheels_set_speed+0x13c>)
 800740e:	f7f8 feb5 	bl	800017c <__adddf3>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	f7f9 fa77 	bl	800090c <__aeabi_d2iz>
 800741e:	4603      	mov	r3, r0
 8007420:	607b      	str	r3, [r7, #4]

	/* Threshold rotating speed of propulsion wheels*/
	if (speed_left > MAX_SPEED_FORWARD){
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b4b      	cmp	r3, #75	; 0x4b
 8007426:	dd02      	ble.n	800742e <wheels_set_speed+0x82>
		speed_left = MAX_SPEED_FORWARD;
 8007428:	234b      	movs	r3, #75	; 0x4b
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	e004      	b.n	8007438 <wheels_set_speed+0x8c>
	}else if (speed_left < MAX_SPEED_BACKWARD)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b18      	cmp	r3, #24
 8007432:	dc01      	bgt.n	8007438 <wheels_set_speed+0x8c>
		speed_left = MAX_SPEED_BACKWARD;
 8007434:	2319      	movs	r3, #25
 8007436:	607b      	str	r3, [r7, #4]


	if (speed_right > MAX_SPEED_FORWARD){
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b4b      	cmp	r3, #75	; 0x4b
 800743c:	dd02      	ble.n	8007444 <wheels_set_speed+0x98>
		speed_right = MAX_SPEED_FORWARD;
 800743e:	234b      	movs	r3, #75	; 0x4b
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	e004      	b.n	800744e <wheels_set_speed+0xa2>
	}else if (speed_right < MAX_SPEED_BACKWARD){
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b18      	cmp	r3, #24
 8007448:	dc01      	bgt.n	800744e <wheels_set_speed+0xa2>
		speed_right = MAX_SPEED_BACKWARD;
 800744a:	2319      	movs	r3, #25
 800744c:	60bb      	str	r3, [r7, #8]
	}

		
	speed_left = 3200 * ( speed_left/ 100.0 );
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7f8 ffe0 	bl	8000414 <__aeabi_i2d>
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	4b24      	ldr	r3, [pc, #144]	; (80074ec <wheels_set_speed+0x140>)
 800745a:	f7f9 f96f 	bl	800073c <__aeabi_ddiv>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <wheels_set_speed+0x144>)
 800746c:	f7f9 f83c 	bl	80004e8 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f7f9 fa48 	bl	800090c <__aeabi_d2iz>
 800747c:	4603      	mov	r3, r0
 800747e:	607b      	str	r3, [r7, #4]
	speed_right = 3200 * ( speed_right/ 100.0 );
 8007480:	68b8      	ldr	r0, [r7, #8]
 8007482:	f7f8 ffc7 	bl	8000414 <__aeabi_i2d>
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <wheels_set_speed+0x140>)
 800748c:	f7f9 f956 	bl	800073c <__aeabi_ddiv>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4610      	mov	r0, r2
 8007496:	4619      	mov	r1, r3
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <wheels_set_speed+0x144>)
 800749e:	f7f9 f823 	bl	80004e8 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4610      	mov	r0, r2
 80074a8:	4619      	mov	r1, r3
 80074aa:	f7f9 fa2f 	bl	800090c <__aeabi_d2iz>
 80074ae:	4603      	mov	r3, r0
 80074b0:	60bb      	str	r3, [r7, #8]

	TIM1->CCR1=speed_left;
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <wheels_set_speed+0x148>)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=speed_right;
 80074b8:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <wheels_set_speed+0x148>)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6393      	str	r3, [r2, #56]	; 0x38

	/*        Enable moteurs        */
	/* GPIO_PIN_SET : activation    */
	/* GPIO_PIN_RESET : pont ouvert */
		
	HAL_GPIO_WritePin( GPIOC, GPIO_PIN_10, en_left); //PC10  Right Rear
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	461a      	mov	r2, r3
 80074c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80074c6:	480c      	ldr	r0, [pc, #48]	; (80074f8 <wheels_set_speed+0x14c>)
 80074c8:	f7fc f913 	bl	80036f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOC, GPIO_PIN_11, en_right); //PC11  Left Rear
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074d4:	4808      	ldr	r0, [pc, #32]	; (80074f8 <wheels_set_speed+0x14c>)
 80074d6:	f7fc f90c 	bl	80036f2 <HAL_GPIO_WritePin>
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	40390000 	.word	0x40390000
 80074ec:	40590000 	.word	0x40590000
 80074f0:	40a90000 	.word	0x40a90000
 80074f4:	40012c00 	.word	0x40012c00
 80074f8:	40011000 	.word	0x40011000

080074fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80074fc:	480d      	ldr	r0, [pc, #52]	; (8007534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80074fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007500:	f7ff fc02 	bl	8006d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007504:	480c      	ldr	r0, [pc, #48]	; (8007538 <LoopForever+0x6>)
  ldr r1, =_edata
 8007506:	490d      	ldr	r1, [pc, #52]	; (800753c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007508:	4a0d      	ldr	r2, [pc, #52]	; (8007540 <LoopForever+0xe>)
  movs r3, #0
 800750a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800750c:	e002      	b.n	8007514 <LoopCopyDataInit>

0800750e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800750e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007512:	3304      	adds	r3, #4

08007514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007518:	d3f9      	bcc.n	800750e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800751a:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800751c:	4c0a      	ldr	r4, [pc, #40]	; (8007548 <LoopForever+0x16>)
  movs r3, #0
 800751e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007520:	e001      	b.n	8007526 <LoopFillZerobss>

08007522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007524:	3204      	adds	r2, #4

08007526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007528:	d3fb      	bcc.n	8007522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800752a:	f000 f811 	bl	8007550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800752e:	f7fe ff3f 	bl	80063b0 <main>

08007532 <LoopForever>:

LoopForever:
    b LoopForever
 8007532:	e7fe      	b.n	8007532 <LoopForever>
  ldr   r0, =_estack
 8007534:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8007538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800753c:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8007540:	08007640 	.word	0x08007640
  ldr r2, =_sbss
 8007544:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8007548:	20000360 	.word	0x20000360

0800754c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800754c:	e7fe      	b.n	800754c <ADC1_2_IRQHandler>
	...

08007550 <__libc_init_array>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	2600      	movs	r6, #0
 8007554:	4d0c      	ldr	r5, [pc, #48]	; (8007588 <__libc_init_array+0x38>)
 8007556:	4c0d      	ldr	r4, [pc, #52]	; (800758c <__libc_init_array+0x3c>)
 8007558:	1b64      	subs	r4, r4, r5
 800755a:	10a4      	asrs	r4, r4, #2
 800755c:	42a6      	cmp	r6, r4
 800755e:	d109      	bne.n	8007574 <__libc_init_array+0x24>
 8007560:	f000 f81a 	bl	8007598 <_init>
 8007564:	2600      	movs	r6, #0
 8007566:	4d0a      	ldr	r5, [pc, #40]	; (8007590 <__libc_init_array+0x40>)
 8007568:	4c0a      	ldr	r4, [pc, #40]	; (8007594 <__libc_init_array+0x44>)
 800756a:	1b64      	subs	r4, r4, r5
 800756c:	10a4      	asrs	r4, r4, #2
 800756e:	42a6      	cmp	r6, r4
 8007570:	d105      	bne.n	800757e <__libc_init_array+0x2e>
 8007572:	bd70      	pop	{r4, r5, r6, pc}
 8007574:	f855 3b04 	ldr.w	r3, [r5], #4
 8007578:	4798      	blx	r3
 800757a:	3601      	adds	r6, #1
 800757c:	e7ee      	b.n	800755c <__libc_init_array+0xc>
 800757e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007582:	4798      	blx	r3
 8007584:	3601      	adds	r6, #1
 8007586:	e7f2      	b.n	800756e <__libc_init_array+0x1e>
 8007588:	08007638 	.word	0x08007638
 800758c:	08007638 	.word	0x08007638
 8007590:	08007638 	.word	0x08007638
 8007594:	0800763c 	.word	0x0800763c

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
